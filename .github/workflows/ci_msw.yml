# CI workflow building wxMSW under Windows.
name: MSW builds

on:
  push:
    branches:
      - master
    paths-ignore:
      - '.circleci/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/workflows/ci.yml'
      - '.github/workflows/ci_cmake.yml'
      - '.github/workflows/ci_mac.yml'
      - '.github/workflows/ci_msw_cross.yml'
      - '.github/workflows/docs_update.yml'
      - 'build/tools/appveyor*.bat'
      - 'distrib/**'
      - 'docs/**'
      - 'interface/**'
      - 'include/wx/gtk/**'
      - 'include/wx/osx/**'
      - 'locale/**'
      - 'src/gtk/**'
      - 'src/osx/**'
      - '*.md'
      - '*.yml'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '.circleci/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/workflows/ci.yml'
      - '.github/workflows/ci_cmake.yml'
      - '.github/workflows/ci_mac.yml'
      - '.github/workflows/ci_msw_cross.yml'
      - '.github/workflows/docs_update.yml'
      - 'build/tools/appveyor*.bat'
      - 'distrib/**'
      - 'docs/**'
      - 'interface/**'
      - 'include/wx/gtk/**'
      - 'include/wx/osx/**'
      - 'locale/**'
      - 'src/gtk/**'
      - 'src/osx/**'
      - '*.md'
      - '*.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  msw-msvs:
    runs-on: windows-2022
    name: wxMSW vs2022 ${{ matrix.configuration }} ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - configuration: 'DLL Debug'
            platform: 'x64'
            use_utf8: true
          - configuration: 'Release'
            platform: 'arm64'
          - configuration: 'Debug'
            platform: 'Win32'
            use_cxx20: true
          - configuration: 'DLL Release'
            use_std_string: true
            platform: 'x64'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Configure build options
        working-directory: include/wx/msw
        run: |
            $use_std_string = "${{ matrix.use_std_string }}" ? 1 : 0
            $use_utf8 = "${{ matrix.use_utf8 }}" ? 1 : 0
            if ( $use_std_string -or $use_utf8 ) {
              $txt = Get-Content setup.h
              Write-Output $txt |
              %{$_ -replace "define wxUSE_STD_STRING_CONV_IN_WXSTRING 0", "define wxUSE_STD_STRING_CONV_IN_WXSTRING $use_std_string"} |
              %{$_ -replace "define wxUSE_UNICODE_UTF8 0", "define wxUSE_UNICODE_UTF8 $use_utf8"} |
              Set-Content setup.h
            }
            $use_cxx20 = "${{ matrix.use_cxx20 }}" ? 1 : 0
            if ( $use_cxx20 ) {
              cd ..\..\..\build\msw
              cp cxx20.props wx_local.props
            }

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
            vs-prerelease: true

      - name: Build
        run: |
            msbuild /noLogo /m /warnaserror '/p:Configuration=${{ matrix.configuration }}' /p:Platform=${{ matrix.platform }} build\msw\wx_vc17.sln
            if ( '${{ matrix.configuration }}'.IndexOf('DLL') -ne -1 ) {
                $dlldir = Join-Path (Get-Location) 'lib\vc_${{ matrix.platform }}_dll'
                Write-Output "Adding $dlldir to the PATH"
                $dlldir | Out-File -Append $env:GITHUB_PATH
            }

      - name: Build samples
        if: matrix.platform != 'arm64'
        run: |
            msbuild /noLogo /m /warnaserror '/p:Configuration=${{ matrix.configuration }}' /p:Platform=${{ matrix.platform }} samples\samples_vc17.sln

      - name: Build tests
        run: |
            msbuild /noLogo /m /warnaserror '/p:Configuration=${{ matrix.configuration }}' /p:Platform=${{ matrix.platform }} tests\test_vc17.sln

      - name: Run tests
        if: ${{ !contains(matrix.platform, 'arm64') }}
        working-directory: tests
        run: |
            go install github.com/mccutchen/go-httpbin/v2/cmd/go-httpbin@v2
            $gopath = $(go env GOPATH)
            $env:PATH += ";$gopath\bin"
            Start-Job -Name wx_httpbin { go-httpbin -host 127.0.0.1 -port 8081 2>&1 > httpbin.log }
            Start-Sleep -Seconds 5
            curl.exe --silent --show-error http://127.0.0.1:8081/ip > $null
            if ($lastExitCode -eq "0") {
                $env:WX_TEST_WEBREQUEST_URL="http://127.0.0.1:8081"
            }
            else {
                Write-Error "Disabling wxWebRequest tests as launching httpbin failed, log follows:"
                Get-Content httpbin.log
                $env:WX_TEST_WEBREQUEST_URL="0"
            }

            .\vc*msw*\test.exe

      - name: Build GUI tests
        run: |
            msbuild /noLogo /m /warnaserror '/p:Configuration=${{ matrix.configuration }}' /p:Platform=${{ matrix.platform }} tests\test_gui_vc17.sln

      - name: Run GUI tests
        if: ${{ !contains(matrix.platform, 'arm64') }}
        working-directory: tests
        run: |
            .\vc*msw*\test_gui.exe
