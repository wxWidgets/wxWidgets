dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.58)

dnl ---------------------------------------------------------------------------
dnl
dnl Top-level configure.in for wxWidgets by Robert Roebling, Phil Blecker,
dnl Vadim Zeitlin and Ron Lee
dnl
dnl This script is under the wxWindows licence.
dnl ---------------------------------------------------------------------------

dnl ---------------------------------------------------------------------------
dnl initialization
dnl ---------------------------------------------------------------------------

AC_INIT([wxWidgets], [3.1.2], [wx-dev@googlegroups.com])

dnl the file passed to AC_CONFIG_SRCDIR should be specific to our package
AC_CONFIG_SRCDIR([wx-config.in])

dnl sets build, host variables and the same with _alias
AC_CANONICAL_BUILD
AC_CANONICAL_HOST

dnl notice that if --host was given but --build was not, cross_compiling is
dnl only set to "maybe" and not "yes" and will be either set to "yes" later or
dnl configure will exit with error in AC_PROG_CC so don't test for = "yes" here
if test "$cross_compiling" != "no"; then
    HOST_PREFIX="${host_alias}-"
    HOST_SUFFIX="-$host_alias"
else
    HOST_PREFIX=
    HOST_SUFFIX=
fi

dnl When making releases do:
dnl
dnl wx_release_number += 1

wx_major_version_number=3
wx_minor_version_number=1
wx_release_number=2
wx_subrelease_number=0

WX_RELEASE=$wx_major_version_number.$wx_minor_version_number
WX_VERSION=$WX_RELEASE.$wx_release_number
WX_SUBVERSION=$WX_VERSION.$wx_subrelease_number

WX_MSW_VERSION=$wx_major_version_number$wx_minor_version_number$wx_release_number


dnl Autoconf-2.60 changed the meaning of top_builddir variable, so we have
dnl to use our own replacement that will work with both 2.5x and 2.60+:
wx_top_builddir="`pwd -W 2> /dev/null || pwd`"
AC_SUBST(wx_top_builddir)


dnl ------------------------------------------------------------------------
dnl Check platform (host system)
dnl ------------------------------------------------------------------------

dnl OS (assume Unix)
USE_UNIX=1
USE_WIN32=0
USE_DOS=0
USE_BEOS=0
USE_MAC=0

dnl Unix kind
USE_AIX=
USE_BSD=                            dnl any BSD
USE_DARWIN=                         dnl a.k.a. Mac OS X
USE_FREEBSD=
USE_GNU=                            dnl GNU/Hurd
USE_HPUX=
USE_LINUX=
USE_NETBSD=
USE_OPENBSD=
USE_OSF=                            dnl OSF/1 (obsolete?)
USE_SGI=
USE_SOLARIS=                        dnl Solaris ("SunOS" >= 5)
USE_SUN=                            dnl SunOS or Solaris
USE_SUNOS=                          dnl old/real SunOS (obsolete)
USE_SVR4=                           dnl SysV R4
USE_SYSV=                           dnl any System V
USE_VMS=
USE_ULTRIX=
USE_UNIXWARE=
USE_HAIKU=

dnl hardware platform
USE_ALPHA=

dnl on some platforms xxx_r() functions are declared inside "#ifdef
dnl _REENTRANT" and it's easier to just define this symbol for these platforms
dnl than checking it during run-time
NEEDS_D_REENTRANT_FOR_R_FUNCS=0

dnl the list of all available toolkits
dnl
dnl update NUM_TOOLKITS calculation below when adding a new toolkit here!
ALL_TOOLKITS="GTK OSX_COCOA OSX_IPHONE MOTIF MSW X11 DFB QT"

dnl NB: these wxUSE_XXX constants have value of 0 or 1 unlike all the other ones
dnl     which are either yes or no
DEFAULT_wxUSE_GTK=0
DEFAULT_wxUSE_OSX_COCOA=0
DEFAULT_wxUSE_OSX_IPHONE=0
DEFAULT_wxUSE_MOTIF=0
DEFAULT_wxUSE_MSW=0
DEFAULT_wxUSE_X11=0
DEFAULT_wxUSE_DFB=0
DEFAULT_wxUSE_QT=0

dnl these are the values which are really default for the given platform:
dnl they're used if no --with-<toolkit> options were given to detect the
dnl toolkit to use by default for the target platform
DEFAULT_DEFAULT_wxUSE_GTK=0
DEFAULT_DEFAULT_wxUSE_OSX_COCOA=0
DEFAULT_DEFAULT_wxUSE_OSX_IPHONE=0
DEFAULT_DEFAULT_wxUSE_MOTIF=0
DEFAULT_DEFAULT_wxUSE_MSW=0
DEFAULT_DEFAULT_wxUSE_X11=0
DEFAULT_DEFAULT_wxUSE_DFB=0
DEFAULT_DEFAULT_wxUSE_QT=0

PROGRAM_EXT=
SAMPLES_CXXFLAGS=
SAMPLES_RPATH_FLAG=
DYLIB_RPATH_INSTALL=
DYLIB_RPATH_POSTLINK=

DEFAULT_STD_FLAG=yes

dnl to support a new system, you need to add its canonical name (as determined
dnl by config.sub or specified by the configure command line) to this "case"
dnl and also define the shared library flags below - search for
dnl SHARED_LIB_SETUP to find the exact place
case "${host}" in
  *-hp-hpux* )
    USE_HPUX=1
    DEFAULT_DEFAULT_wxUSE_GTK=1
    NEEDS_D_REENTRANT_FOR_R_FUNCS=1
    AC_DEFINE(__HPUX__)

    dnl many standard declarations in HP-UX headers are only included if either
    dnl _HPUX_SOURCE is defined, see stdsyms(5)
    CPPFLAGS="-D_HPUX_SOURCE $CPPFLAGS"
  ;;
  *-*-linux* )
    USE_LINUX=1
    AC_DEFINE(__LINUX__)
    TMP=`uname -m`
    if test "x$TMP" = "xalpha"; then
      USE_ALPHA=1
      AC_DEFINE(__ALPHA__)
    fi
    DEFAULT_DEFAULT_wxUSE_GTK=1
  ;;
  *-*-gnu* | *-*-k*bsd*-gnu )
    USE_GNU=1
    TMP=`uname -m`
    if test "x$TMP" = "xalpha"; then
      USE_ALPHA=1
      AC_DEFINE(__ALPHA__)
    fi
    DEFAULT_DEFAULT_wxUSE_GTK=1
  ;;
  *-*-irix5* | *-*-irix6* )
    USE_SGI=1
    USE_SVR4=1
    AC_DEFINE(__SGI__)
    AC_DEFINE(__SVR4__)
    DEFAULT_DEFAULT_wxUSE_GTK=1
  ;;
  *-*-qnx*)
    USE_QNX=1
    AC_DEFINE(__QNX__)
    DEFAULT_DEFAULT_wxUSE_X11=1
  ;;
  *-*-solaris2* )
    USE_SUN=1
    USE_SOLARIS=1
    USE_SVR4=1
    AC_DEFINE(__SUN__)
    AC_DEFINE(__SOLARIS__)
    AC_DEFINE(__SVR4__)
    DEFAULT_DEFAULT_wxUSE_GTK=1
    NEEDS_D_REENTRANT_FOR_R_FUNCS=1
  ;;
  *-*-sunos4* )
    USE_SUN=1
    USE_SUNOS=1
    USE_BSD=1
    AC_DEFINE(__SUN__)
    AC_DEFINE(__SUNOS__)
    AC_DEFINE(__BSD__)
    DEFAULT_DEFAULT_wxUSE_GTK=1
  ;;
  *-*-freebsd*)
    USE_BSD=1
    USE_FREEBSD=1
    AC_DEFINE(__FREEBSD__)
    AC_DEFINE(__BSD__)
    DEFAULT_DEFAULT_wxUSE_GTK=1
  ;;
  *-*-openbsd*|*-*-mirbsd*)
    USE_BSD=1
    USE_OPENBSD=1
    AC_DEFINE(__OPENBSD__)
    AC_DEFINE(__BSD__)
    DEFAULT_DEFAULT_wxUSE_GTK=1
  ;;
  *-*-netbsd*)
    USE_BSD=1
    USE_NETBSD=1
    AC_DEFINE(__NETBSD__)
    AC_DEFINE(__BSD__)
    DEFAULT_DEFAULT_wxUSE_GTK=1
    NEEDS_D_REENTRANT_FOR_R_FUNCS=1

    dnl some standard declarations in NetBSD headers are only included if
    dnl _NETBSD_SOURCE and _LIBC are defined, e.g. getservbyname_r in netdb.h
    CPPFLAGS="-D_NETBSD_SOURCE -D_LIBC $CPPFLAGS"
  ;;
  *-*-osf* )
    USE_ALPHA=1
    USE_OSF=1
    AC_DEFINE(__ALPHA__)
    AC_DEFINE(__OSF__)
    DEFAULT_DEFAULT_wxUSE_GTK=1
    NEEDS_D_REENTRANT_FOR_R_FUNCS=1
  ;;
  *-*-dgux5* )
    USE_ALPHA=1
    USE_SVR4=1
    AC_DEFINE(__ALPHA__)
    AC_DEFINE(__SVR4__)
    DEFAULT_DEFAULT_wxUSE_GTK=1
  ;;
  *-*-sysv5* )
    USE_SYSV=1
    USE_SVR4=1
    AC_DEFINE(__SYSV__)
    AC_DEFINE(__SVR4__)
    DEFAULT_DEFAULT_wxUSE_GTK=1
  ;;
  *-*-aix* )
    USE_AIX=1
    USE_SYSV=1
    USE_SVR4=1
    AC_DEFINE(__AIX__)
    AC_DEFINE(__SYSV__)
    AC_DEFINE(__SVR4__)
    DEFAULT_DEFAULT_wxUSE_GTK=1
  ;;

  *-*-*UnixWare*)
    USE_SYSV=1
    USE_SVR4=1
    USE_UNIXWARE=1
    AC_DEFINE(__UNIXWARE__)
  ;;

  *-*-cygwin* | *-*-mingw32* | *-*-mingw64* )
    dnl MBN: some of the defines have been moved after toolkit detection
    dnl      because for wxMotif/wxGTK/wxX11 to build on Cygwin
    dnl      USE_UNIX  must be set and not USE_WIN32
    PROGRAM_EXT=".exe"
    DEFAULT_DEFAULT_wxUSE_MSW=1
  ;;

  arm-apple-darwin*)
    dnl iPhone
    USE_BSD=1
    USE_DARWIN=1
    AC_DEFINE(__BSD__)
    AC_DEFINE(__DARWIN__)
    DEFAULT_DEFAULT_wxUSE_OSX_IPHONE=1
  ;;

  *-*-darwin* )
    dnl Darwin based distributions (including Mac OS X)
    USE_BSD=1
    USE_DARWIN=1
    AC_DEFINE(__BSD__)
    AC_DEFINE(__DARWIN__)
    DEFAULT_DEFAULT_wxUSE_OSX_COCOA=1
  ;;

  *-*-beos* )
    dnl leave USE_UNIX on - BeOS is sufficiently Unix-like for this
    USE_BEOS=1
    AC_DEFINE(__BEOS__)
  ;;

  *-*-haiku* )
    USE_HAIKU=1
    AC_DEFINE(__HAIKU__)
    DEFAULT_DEFAULT_wxUSE_QT=1
  ;;

  *)
    AC_MSG_WARN([*** System type ${host} is unknown, assuming generic Unix and continuing nevertheless.])
    AC_MSG_WARN([*** Please report the build results to wx-dev@googlegroups.com.])

    DEFAULT_DEFAULT_wxUSE_X11=1
    DEFAULT_wxUSE_SHARED=no
esac

dnl ---------------------------------------------------------------------------
dnl command line options for configure
dnl ---------------------------------------------------------------------------

dnl the default values for all options - we collect them all here to simplify
dnl modification of the default values (for example, if the defaults for some
dnl platform should be changed, it can be done here too)
dnl
dnl NB: see also DEFAULT_wxUSE<toolkit> variables defined above

dnl it's only necessary to list the options which should be disabled by
dnl default, all the rest have default value of "yes" (or, rather, of
dnl wxUSE_ALL_FEATURES which is the only which has to be set to "yes" by
dnl default)
DEFAULT_wxUSE_ALL_FEATURES=yes

DEFAULT_wxUSE_STD_CONTAINERS=no
DEFAULT_wxUSE_STD_CONTAINERS_COMPATIBLY=$DEFAULT_STD_FLAG
DEFAULT_wxUSE_STD_IOSTREAM=$DEFAULT_STD_FLAG
DEFAULT_wxUSE_STD_STRING=$DEFAULT_STD_FLAG

dnl libraries disabled by default
DEFAULT_wxUSE_DMALLOC=no
DEFAULT_wxUSE_LIBGNOMEVFS=no
DEFAULT_wxUSE_LIBMSPACK=no
DEFAULT_wxUSE_LIBSDL=no

dnl features disabled by default
DEFAULT_wxUSE_ACCESSIBILITY=no
DEFAULT_wxUSE_IPV6=no
DEFAULT_wxUSE_UNICODE_UTF8=no
DEFAULT_wxUSE_UNICODE_UTF8_LOCALE=no

dnl automatic features
DEFAULT_wxUSE_ARTPROVIDER_TANGO=auto
DEFAULT_wxUSE_OPENGL=auto
DEFAULT_wxUSE_MEDIACTRL=auto
DEFAULT_wxUSE_COMPILER_TLS=auto
DEFAULT_wxUSE_HOTKEY=auto
DEFAULT_wxUSE_METAFILE=auto

dnl Mac/Cocoa users need to enable building universal binaries explicitly
DEFAULT_wxUSE_UNIVERSAL_BINARY=no
DEFAULT_wxUSE_MAC_ARCH=no

DEFAULT_wxUSE_OFFICIAL_BUILD=no

dnl Always default to no. Only special cases require this.
DEFAULT_wxUSE_OBJC_UNIQUIFYING=no

dnl ===========================
dnl deal with configure options
dnl ===========================

dnl we use several macros here:
dnl     - AC_ARG_WITH/AC_ARG_ENABLE are the standard autoconf macros, see
dnl       autoconf manual for details about them
dnl     - WX_ARG_WITH/WX_ARG_ENABLE are their wx counterparts which perform
dnl       the caching of the command line options and also use DEFAULT_foo
dnl       variable as the default value for "foo" if neither --enable-foo nor
dnl       --disable-foo is specified
dnl     - WX_ARG_SYS_WITH is a special version of WX_ARG_WITH which allows
dnl       to choose not only whether an external library is used but also if we
dnl       use the copy of it included with wxWidgets or an already installed
dnl       system version
dnl     - WX_ARG_WITHOUT/WX_ARG_DISABLE mirror WX_ARG_WITH/WX_ARG_ENABLE but
dnl       should be used for the options which are enabled by default
dnl     - WX_ARG_FEATURE is a version of WX_ARG_ENABLE which should be used for
dnl       optional features, i.e. options which should be disabled if
dnl       --disable-all-features is specified (WX_ARG_WITH/WX_ARG_SYS_WITH are
dnl       also affected by this)

dnl ---------------------------------------------------------------------------
dnl global build options
dnl ---------------------------------------------------------------------------

WX_ARG_DISABLE(gui,        [  --disable-gui           don't build GUI parts of the library], wxUSE_GUI)
WX_ARG_ENABLE(monolithic,  [  --enable-monolithic     build wxWidgets as single library], wxUSE_MONOLITHIC)
WX_ARG_ENABLE(plugins,     [  --enable-plugins        build parts of wxWidgets as loadable components], wxUSE_PLUGINS)
WX_ARG_WITHOUT(subdirs,    [  --without-subdirs       don't generate makefiles for samples/demos/...], wxWITH_SUBDIRS)
AC_ARG_WITH(flavour,       [  --with-flavour=NAME     specify a name to identify this build], [WX_FLAVOUR="$withval"])
WX_ARG_ENABLE(official_build,  [  --enable-official_build official build of wxWidgets (win32 DLL only)], wxUSE_OFFICIAL_BUILD)
AC_ARG_ENABLE(vendor,  [  --enable-vendor=VENDOR  vendor name (win32 DLL only)], [VENDOR="$enableval"])
if test "x$VENDOR" = "x"; then
    VENDOR="custom"
fi

WX_ARG_DISABLE(all-features,[  --disable-all-features  disable all optional features to build minimal library], wxUSE_ALL_FEATURES)
WX_ARG_DISABLE(sys-libs,    [  --disable-sys-libs      disable all use of system libraries, use only built-in ones], wxUSE_SYS_LIBS)

if test "$wxUSE_ALL_FEATURES" = "no"; then
    dnl this is a bit ugly but currently we have no choice but to manually
    dnl reset all the options with default value of auto if all features are to
    dnl be disabled because we can't have an option with default value of
    dnl "auto-or-no-if-wxUSE_ALL_FEATURES-is-disabled"
    DEFAULT_wxUSE_ARTPROVIDER_TANGO=no
    DEFAULT_wxUSE_MEDIACTRL=no
fi

dnl ---------------------------------------------------------------------------
dnl port selection
dnl ---------------------------------------------------------------------------

if test "$wxUSE_GUI" = "yes"; then

WX_ARG_ENABLE(universal,   [  --enable-universal      use wxWidgets GUI controls instead of native ones], wxUSE_UNIVERSAL)
if test "$wxUSE_UNIVERSAL" = "yes"; then
    AC_ARG_WITH(themes,    [  --with-themes=all|list  use only the specified comma-separated list of wxUniversal themes], [wxUNIV_THEMES="$withval"])
fi

dnl we use AC_ARG_WITH and not WX_ARG_WITH for the toolkit options as they
dnl shouldn't default to wxUSE_ALL_FEATURES
AC_ARG_WITH(gtk,          [[  --with-gtk[=VERSION]    use GTK+, VERSION can be 4 (EXPERIMENTAL), 3, 2 (default), 1 or "any"]], [wxUSE_GTK="$withval" CACHE_GTK=1 TOOLKIT_GIVEN=1])
WX_ARG_ONLY_WITH(motif,         [  --with-motif            use Motif/Lesstif], [wxUSE_MOTIF="$withval" CACHE_MOTIF=1 TOOLKIT_GIVEN=1])
WX_ARG_ONLY_WITH(osx_cocoa,     [  --with-osx_cocoa        use Mac OS X (Cocoa)], [wxUSE_OSX_COCOA="$withval" CACHE_OSX_COCOA=1 TOOLKIT_GIVEN=1])
WX_ARG_ONLY_WITH(osx_iphone,    [  --with-osx_iphone       use iPhone OS X port], [wxUSE_OSX_IPHONE="$withval" CACHE_OSX_IPHONE=1 TOOLKIT_GIVEN=1])
WX_ARG_ONLY_WITH(osx,           [  --with-osx              use Mac OS X (default port, Cocoa)], [wxUSE_OSX_COCOA="$withval" CACHE_OSX_COCOA=1 TOOLKIT_GIVEN=1])
WX_ARG_ONLY_WITH(cocoa,         [  --with-cocoa            same as --with-osx_cocoa], [wxUSE_OSX_COCOA="$withval" CACHE_OSX_COCOA=1 TOOLKIT_GIVEN=1])
WX_ARG_ONLY_WITH(iphone,        [  --with-iphone           same as --with-osx_iphone], [wxUSE_OSX_IPHONE="$withval" CACHE_OSX_IPHONE=1 TOOLKIT_GIVEN=1])
WX_ARG_ONLY_WITH(mac,           [  --with-mac              same as --with-osx], [wxUSE_OSX_COCOA="$withval" CACHE_OSX_COCOA=1 TOOLKIT_GIVEN=1])
WX_ARG_ONLY_WITH(wine,          [  --with-wine             use Wine], [wxUSE_WINE="$withval" CACHE_WINE=1])
WX_ARG_ONLY_WITH(msw,           [  --with-msw              use MS-Windows], [wxUSE_MSW="$withval" CACHE_MSW=1 TOOLKIT_GIVEN=1])
WX_ARG_ONLY_WITH(directfb,      [  --with-directfb         use DirectFB], [wxUSE_DFB="$withval" wxUSE_UNIVERSAL="yes" CACHE_DFB=1 TOOLKIT_GIVEN=1])
WX_ARG_ONLY_WITH(x11,           [  --with-x11              use X11], [wxUSE_X11="$withval" wxUSE_UNIVERSAL="yes" CACHE_X11=1 TOOLKIT_GIVEN=1])
WX_ARG_ONLY_WITH(qt,            [  --with-qt               use Qt], [wxUSE_QT="$withval" CACHE_QT=1 TOOLKIT_GIVEN=1])
WX_ARG_ENABLE(nanox,       [  --enable-nanox          use NanoX], wxUSE_NANOX)
WX_ARG_ENABLE(gpe,         [  --enable-gpe            use GNOME PDA Environment features if possible], wxUSE_GPE)

dnl check that no more than one toolkit is given and that if none are given that
dnl we have a default one

AC_MSG_CHECKING(for toolkit)



# In Wine, we need to default to MSW, not GTK or MOTIF
if test "$wxUSE_WINE" = "yes"; then
    DEFAULT_DEFAULT_wxUSE_GTK=0
    DEFAULT_DEFAULT_wxUSE_MOTIF=0
    DEFAULT_DEFAULT_wxUSE_MSW=1
    wxUSE_SHARED=no
    CC=${CC:-winegcc}
    CXX=${CXX:-wineg++}
fi


if test "$wxUSE_GUI" = "yes"; then

    if test "$USE_BEOS" = 1; then
        AC_MSG_ERROR([BeOS GUI is not supported yet, use --disable-gui])
    fi

    if test "$TOOLKIT_GIVEN" = 1; then
      dnl convert "yes", "any" or a number to 1 and "no" to 0
      for toolkit in $ALL_TOOLKITS; do
        var=wxUSE_$toolkit
        eval "value=\$${var}"
        if test "x$value" = "xno"; then
          eval "$var=0"
        elif test "x$value" != "x"; then
          eval "$var=1"
        fi

        if test "x$value" != "x" -a "x$value" != "xyes" -a "x$value" != "xno"; then
          eval "wx${toolkit}_VERSION=$value"
        fi
      done
    else
      dnl try to guess the most appropriate toolkit for this platform
      for toolkit in $ALL_TOOLKITS; do
        var=DEFAULT_DEFAULT_wxUSE_$toolkit
        eval "wxUSE_$toolkit=\$${var}"
      done
    fi

    dnl we suppose that expr is available (maybe there is a better way to do
    dnl this? what about using ALL_TOOLKITS? TODO)
    NUM_TOOLKITS=`expr ${wxUSE_GTK:-0} \
                  + ${wxUSE_OSX_COCOA:-0} + ${wxUSE_OSX_IPHONE:-0} + ${wxUSE_DFB:-0} \
                  + ${wxUSE_MOTIF:-0} + ${wxUSE_MSW:-0} \
                  + ${wxUSE_X11:-0} + ${wxUSE_QT:-0}`


    case "$NUM_TOOLKITS" in
      1)
      ;;
      0)
        AC_MSG_ERROR(Please specify a toolkit -- cannot determine the default for ${host})
      ;;
      *)
        AC_MSG_ERROR(Please specify at most one toolkit)
    esac

    for toolkit in $ALL_TOOLKITS; do
        var=wxUSE_$toolkit
        eval "value=\$${var}"
        if test "$value" = 1; then
          toolkit_echo=`echo $toolkit | tr '[[A-Z]]' '[[a-z]]'`
          AC_MSG_RESULT($toolkit_echo)
        fi
    done
else
    if test "x$host_alias" != "x"; then
        AC_MSG_RESULT(base ($host_alias hosted) only)
    else
        AC_MSG_RESULT(base only)
    fi
fi

wxUSE_MAC=0
if test "$wxUSE_OSX_COCOA" = 1 \
       -o "$wxUSE_OSX_IPHONE" = 1; then
    wxUSE_MAC=1
fi

dnl ---------------------------------------------------------------------------
dnl external libraries
dnl ---------------------------------------------------------------------------

WX_ARG_SYS_WITH(libpng,    [  --with-libpng           use libpng (PNG image format)], wxUSE_LIBPNG)
WX_ARG_SYS_WITH(libjpeg,   [  --with-libjpeg          use libjpeg (JPEG file format)], wxUSE_LIBJPEG)
WX_ARG_SYS_WITH(libtiff,   [  --with-libtiff          use libtiff (TIFF file format)], wxUSE_LIBTIFF)

dnl We don't provide built-in version of this library, so if the use of system
dnl libraries is explicitly disabled, we can't use it at all.
if test "$wxUSE_LIBTIFF" = "builtin" ; then
    wxUSE_LIBJBIG=no
else
    WX_ARG_WITHOUT(libjbig,    [  --without-libjbig       don't use libjbig in libtiff even if available)], wxUSE_LIBJBIG)
fi

WX_ARG_SYS_WITH(libxpm,    [  --with-libxpm           use libxpm (XPM file format)], wxUSE_LIBXPM)
WX_ARG_WITH(libiconv,      [  --with-libiconv         use libiconv (character conversion)], wxUSE_LIBICONV)
WX_ARG_WITH(libmspack,     [  --with-libmspack        use libmspack (CHM help files loading)], wxUSE_LIBMSPACK)
WX_ARG_WITHOUT(gtkprint,   [  --without-gtkprint      don't use GTK printing support], wxUSE_GTKPRINT)
WX_ARG_WITH(gnomevfs,      [  --with-gnomevfs         use GNOME VFS for associating MIME types], wxUSE_LIBGNOMEVFS)
WX_ARG_WITH(libnotify,     [  --with-libnotify        use libnotify for notifications], wxUSE_LIBNOTIFY)
WX_ARG_WITH(opengl,        [  --with-opengl           use OpenGL (or Mesa)], wxUSE_OPENGL)
WX_ARG_WITH(xtest,         [  --with-xtest            use XTest extension], wxUSE_XTEST)

fi
dnl for GUI only

WX_ARG_WITH(dmalloc,       [  --with-dmalloc          use dmalloc library (http://dmalloc.com/)], wxUSE_DMALLOC)
WX_ARG_WITH(sdl,           [  --with-sdl              use SDL for audio on Unix], wxUSE_LIBSDL)
WX_ARG_SYS_WITH(regex,     [  --with-regex            enable support for wxRegEx class], wxUSE_REGEX)
WX_ARG_WITH(liblzma,       [  --with-liblzma          use LZMA compression)], wxUSE_LIBLZMA)
WX_ARG_SYS_WITH(zlib,      [  --with-zlib             use zlib for LZW compression], wxUSE_ZLIB)
WX_ARG_SYS_WITH(expat,     [  --with-expat            enable XML support using expat parser], wxUSE_EXPAT)

if test "$USE_DARWIN" = 1; then

AC_ARG_WITH(macosx-sdk,    [  --with-macosx-sdk=PATH  use an OS X SDK at PATH], [
        wxUSE_MACOSX_SDK=$withval
        wx_cv_use_macosx_sdk="wxUSE_MACOSX_SDK=$withval"
    ])

AC_ARG_WITH(macosx-version-min,    [  --with-macosx-version-min=VER   build binaries which require at least this OS X version], [
        wxUSE_MACOSX_VERSION_MIN=$withval
        wx_cv_use_macosx_version_min="wxUSE_MACOSX_VERSION_MIN=$withval"
    ])

fi dnl USE_DARWIN

dnl ---------------------------------------------------------------------------
dnl debugging options
dnl ---------------------------------------------------------------------------

dnl don't use WX_ARG_ENABLE as it just gets in the way instead of helping with
dnl this rather unusual option
AC_ARG_ENABLE(debug,       [  --enable-debug          build library for debugging],
    [
        if test "$enableval" = yes; then
            wxUSE_DEBUG=yes
        elif test "$enableval" = no; then
            wxUSE_DEBUG=no
        elif test "$enableval" = max; then
            wxUSE_DEBUG=yes
            WXCONFIG_CPPFLAGS="$WXCONFIG_CPPFLAGS -DwxDEBUG_LEVEL=2"
        else
            AC_MSG_ERROR([Invalid --enable-debug value, must be yes, no or max])
        fi
    ],
    wxUSE_DEBUG=default
)

case "$wxUSE_DEBUG" in
    yes)
        dnl build the library for debugging: enable debugging code and generate
        dnl the debug information for the library itself
        DEFAULT_wxUSE_DEBUG_FLAG=yes
        DEFAULT_wxUSE_DEBUG_INFO=yes

        dnl also disable optimizations by default if --enable-debug was used
        dnl (this can still be overridden by an explicit --enable-optimise)
        DEFAULT_wxUSE_OPTIMISE=no
        ;;

    no)
        dnl --disable-debug is equivalent to both --disable-debug_flag and
        dnl --disable-debug_info
        DEFAULT_wxUSE_DEBUG_FLAG=no
        DEFAULT_wxUSE_DEBUG_INFO=no
        ;;

    default)
        dnl the library is built with debugging support by default but without
        dnl debug information as this requires much, much more disk space
        DEFAULT_wxUSE_DEBUG_FLAG=yes
        DEFAULT_wxUSE_DEBUG_INFO=no
        ;;
esac

WX_ARG_DISABLE(debug_flag,   [  --disable-debug_flag    disable all debugging support], wxUSE_DEBUG_FLAG)
WX_ARG_ENABLE(debug_info,    [  --enable-debug_info     generate debug information], wxUSE_DEBUG_INFO)

dnl enabled if just --enable-debug_{flag,info} was
dnl
dnl in any case, only set the default value and allow overriding it with an

WX_ARG_ENABLE(debug_gdb,     [  --enable-debug_gdb      create code with extra GDB debugging information], wxUSE_DEBUG_GDB)
WX_ARG_ENABLE(debug_cntxt,   [  --enable-debug_cntxt    obsolete, don't use: use wxDebugContext], wxUSE_DEBUG_CONTEXT)
WX_ARG_ENABLE(mem_tracing,   [  --enable-mem_tracing    obsolete, don't use: create code with memory tracing], wxUSE_MEM_TRACING)

dnl ---------------------------------------------------------------------------
dnl global compile options
dnl ---------------------------------------------------------------------------

WX_ARG_DISABLE(shared,     [  --disable-shared        create static library instead of shared], wxUSE_SHARED)
AC_ARG_ENABLE(cxx11,       [  --enable-cxx11          use C++11 compiler if available], [wxWITH_CXX=11 wxWITH_CXX_IS_OPTIONAL=1])
AC_ARG_WITH(cxx,           [  --with-cxx=11|14|17     use the given C++ dialect], [wxWITH_CXX="$withval"])
WX_ARG_ENABLE(stl,         [  --enable-stl            use standard C++ classes for everything], wxUSE_STL)
if test "$wxUSE_STL" = "yes"; then
    DEFAULT_wxUSE_STD_CONTAINERS=yes
    DEFAULT_wxUSE_STD_CONTAINERS_COMPATIBLY=yes
    DEFAULT_wxUSE_STD_IOSTREAM=yes
    DEFAULT_wxUSE_STD_STRING=yes
fi
WX_ARG_ENABLE(std_containers,[  --enable-std_containers use standard C++ container classes], wxUSE_STD_CONTAINERS)
WX_ARG_ENABLE(std_containers_compat, [  --enable-std_containers_compat     use standard C++ container classes when it can be done compatible], wxUSE_STD_CONTAINERS_COMPATIBLY)
WX_ARG_ENABLE(std_iostreams, [  --enable-std_iostreams  use standard C++ stream classes], wxUSE_STD_IOSTREAM)
WX_ARG_ENABLE(std_string,    [  --enable-std_string     use standard C++ string classes], wxUSE_STD_STRING)
WX_ARG_ENABLE(std_string_conv_in_wxstring, [ --enable-std_string_conv_in_wxstring     provide implicit conversion to std::string in wxString], wxUSE_STD_STRING_CONV_IN_WXSTRING)
WX_ARG_DISABLE(unsafe_conv_in_wxstring,     [ --disable-unsafe_conv_in_wxstring        disable unsafe implicit conversions in wxString], wxUSE_UNSAFE_WXSTRING_CONV)
WX_ARG_DISABLE(unicode,      [  --disable-unicode       compile without Unicode support], wxUSE_UNICODE)
WX_ARG_ENABLE_PARAM(utf8,    [  --enable-utf8           use UTF-8 representation for strings (Unix only)], wxUSE_UNICODE_UTF8)
WX_ARG_ENABLE(utf8only,      [  --enable-utf8only       only support UTF-8 locales in UTF-8 build (Unix only)], wxUSE_UNICODE_UTF8_LOCALE)
WX_ARG_ENABLE(extended_rtti, [  --enable-extended_rtti  use extended RTTI (XTI)], wxUSE_EXTENDED_RTTI)

WX_ARG_DISABLE(optimise,   [  --disable-optimise      compile without optimisations], wxUSE_OPTIMISE)

WX_ARG_ENABLE(profile,       [  --enable-profile        create code with profiling information], wxUSE_PROFILE)
WX_ARG_ENABLE(no_rtti,       [  --enable-no_rtti        create code without RTTI information], wxUSE_NO_RTTI)
WX_ARG_ENABLE(no_exceptions, [  --enable-no_exceptions  create code without C++ exceptions handling], wxUSE_NO_EXCEPTIONS)
WX_ARG_ENABLE(permissive,    [  --enable-permissive     compile code disregarding strict ANSI], wxUSE_PERMISSIVE)
WX_ARG_DISABLE(vararg_macros,[  --disable-vararg_macros don't use vararg macros, even if they are supported], wxUSE_VARARG_MACROS)

if test "$USE_DARWIN" = 1; then
WX_ARG_ENABLE_PARAM(universal_binary, [[  --enable-universal_binary=archs create universal binary for the specified (or all supported) architectures]], wxUSE_UNIVERSAL_BINARY)
WX_ARG_ENABLE_PARAM(macosx_arch,      [[  --enable-macosx_arch=ARCH  build for just the specified architecture]], wxUSE_MAC_ARCH)
fi dnl USE_DARWIN

WX_ARG_ENABLE(compat28,      [  --enable-compat28       enable wxWidgets 2.8 compatibility], WXWIN_COMPATIBILITY_2_8)
WX_ARG_DISABLE(compat30,     [  --disable-compat30      disable wxWidgets 3.0 compatibility], WXWIN_COMPATIBILITY_3_0)

WX_ARG_DISABLE(rpath,        [  --disable-rpath         disable use of rpath for uninstalled builds], wxUSE_RPATH)

WX_ARG_DISABLE(visibility,   [  --disable-visibility    disable use of ELF symbols visibility even if supported], wxUSE_VISIBILITY)
WX_ARG_DISABLE(tls,          [  --disable-tls           disable use of compiler TLS support], wxUSE_COMPILER_TLS)

WX_ARG_ENABLE(repro_build,   [  --enable-repro-build    enable reproducible build mode], wxUSE_REPRODUCIBLE_BUILD)
WX_ARG_ENABLE(pch,           [  --enable-pch            use precompiled headers if possible (off by default)], wxUSE_PCH)

dnl ---------------------------------------------------------------------------
dnl optional non GUI features
dnl ---------------------------------------------------------------------------

WX_ARG_FEATURE(intl,          [  --enable-intl           use internationalization system], wxUSE_INTL)
WX_ARG_FEATURE(xlocale,       [  --enable-xlocale        use x-locale support (requires wxLocale)], wxUSE_XLOCALE)
WX_ARG_FEATURE(config,        [  --enable-config         use wxConfig (and derived) classes], wxUSE_CONFIG)

WX_ARG_FEATURE(protocols,     [  --enable-protocols      use wxProtocol and derived classes], wxUSE_PROTOCOL)
WX_ARG_FEATURE(ftp,           [  --enable-ftp            use wxFTP (requires wxProtocol], wxUSE_PROTOCOL_FTP)
WX_ARG_FEATURE(http,          [  --enable-http           use wxHTTP (requires wxProtocol], wxUSE_PROTOCOL_HTTP)
WX_ARG_FEATURE(fileproto,     [  --enable-fileproto      use wxFileProto class (requires wxProtocol], wxUSE_PROTOCOL_FILE)
WX_ARG_FEATURE(sockets,       [  --enable-sockets        use socket/network classes], wxUSE_SOCKETS)
WX_ARG_FEATURE(ipv6,          [  --enable-ipv6           enable IPv6 support in wxSocket], wxUSE_IPV6)
WX_ARG_FEATURE(ole,           [  --enable-ole            use OLE classes (Win32 only)], wxUSE_OLE)
WX_ARG_FEATURE(dataobj,       [  --enable-dataobj        use data object classes], wxUSE_DATAOBJ)

WX_ARG_FEATURE(ipc,           [  --enable-ipc            use interprocess communication (wxSocket etc.)], wxUSE_IPC)

WX_ARG_FEATURE(baseevtloop,   [  --enable-baseevtloop    use event loop in console programs too], wxUSE_CONSOLE_EVENTLOOP)
WX_ARG_FEATURE(epollloop,     [  --enable-epollloop      use wxEpollDispatcher class (Linux only)], wxUSE_EPOLL_DISPATCHER)
WX_ARG_FEATURE(selectloop,    [  --enable-selectloop     use wxSelectDispatcher class], wxUSE_SELECT_DISPATCHER)

dnl please keep the settings below in alphabetical order
WX_ARG_FEATURE(any,           [  --enable-any            use wxAny class], wxUSE_ANY)
WX_ARG_FEATURE(apple_ieee,    [  --enable-apple_ieee     use the Apple IEEE codec], wxUSE_APPLE_IEEE)
WX_ARG_FEATURE(arcstream,     [  --enable-arcstream      use wxArchive streams], wxUSE_ARCHIVE_STREAMS)
WX_ARG_FEATURE(base64,        [  --enable-base64         use base64 encoding/decoding functions], wxUSE_BASE64)
WX_ARG_FEATURE(backtrace,     [  --enable-backtrace      use wxStackWalker class for getting backtraces], wxUSE_STACKWALKER)
WX_ARG_FEATURE(catch_segvs,   [  --enable-catch_segvs    catch signals in wxApp::OnFatalException (Unix only)], wxUSE_ON_FATAL_EXCEPTION)
WX_ARG_FEATURE(cmdline,       [  --enable-cmdline        use wxCmdLineParser class], wxUSE_CMDLINE_PARSER)
WX_ARG_FEATURE(datetime,      [  --enable-datetime       use wxDateTime class], wxUSE_DATETIME)
WX_ARG_FEATURE(debugreport,   [  --enable-debugreport    use wxDebugReport class], wxUSE_DEBUGREPORT)
WX_ARG_FEATURE(dialupman,     [  --enable-dialupman      use dialup network classes], wxUSE_DIALUP_MANAGER)
WX_ARG_FEATURE(dynlib,        [  --enable-dynlib         use wxLibrary class for DLL loading], wxUSE_DYNLIB_CLASS)
WX_ARG_FEATURE(dynamicloader, [  --enable-dynamicloader  use (new) wxDynamicLibrary class], wxUSE_DYNAMIC_LOADER)
WX_ARG_FEATURE(exceptions,    [  --enable-exceptions     build exception-safe library], wxUSE_EXCEPTIONS)
WX_ARG_FEATURE(ffile,         [  --enable-ffile          use wxFFile class], wxUSE_FFILE)
WX_ARG_FEATURE(file,          [  --enable-file           use wxFile class], wxUSE_FILE)
WX_ARG_FEATURE(filehistory,   [  --enable-filehistory    use wxFileHistory class], wxUSE_FILE_HISTORY)
WX_ARG_FEATURE(filesystem,    [  --enable-filesystem     use virtual file systems classes], wxUSE_FILESYSTEM)
WX_ARG_FEATURE(fontenum,      [  --enable-fontenum       use wxFontEnumerator class], wxUSE_FONTENUM)
WX_ARG_FEATURE(fontmap,       [  --enable-fontmap        use font encodings conversion classes], wxUSE_FONTMAP)
WX_ARG_FEATURE(fs_archive,    [  --enable-fs_archive     use virtual archive filesystems], wxUSE_FS_ARCHIVE)
WX_ARG_FEATURE(fs_inet,       [  --enable-fs_inet        use virtual HTTP/FTP filesystems], wxUSE_FS_INET)
WX_ARG_FEATURE(fs_zip,        [  --enable-fs_zip         now replaced by fs_archive], wxUSE_FS_ZIP)
WX_ARG_FEATURE(fsvolume,      [  --enable-fsvolume       use wxFSVolume class], wxUSE_FSVOLUME)
WX_ARG_FEATURE(fswatcher,     [  --enable-fswatcher      use wxFileSystemWatcher class], wxUSE_FSWATCHER)
WX_ARG_FEATURE(geometry,      [  --enable-geometry       use geometry class], wxUSE_GEOMETRY)
WX_ARG_FEATURE(log,           [  --enable-log            use logging system], wxUSE_LOG)
WX_ARG_FEATURE(longlong,      [  --enable-longlong       use wxLongLong class], wxUSE_LONGLONG)
WX_ARG_FEATURE(mimetype,      [  --enable-mimetype       use wxMimeTypesManager], wxUSE_MIMETYPE)
WX_ARG_FEATURE(printfposparam,[  --enable-printfposparam use wxVsnprintf() which supports positional parameters], wxUSE_PRINTF_POS_PARAMS)
WX_ARG_FEATURE(secretstore,   [  --enable-secretstore    use wxSecretStore class], wxUSE_SECRETSTORE)
WX_ARG_FEATURE(snglinst,      [  --enable-snglinst       use wxSingleInstanceChecker class], wxUSE_SNGLINST_CHECKER)
WX_ARG_FEATURE(sound,         [  --enable-sound          use wxSound class], wxUSE_SOUND)
WX_ARG_FEATURE(stdpaths,      [  --enable-stdpaths       use wxStandardPaths class], wxUSE_STDPATHS)
WX_ARG_FEATURE(stopwatch,     [  --enable-stopwatch      use wxStopWatch class], wxUSE_STOPWATCH)
WX_ARG_FEATURE(streams,       [  --enable-streams        use wxStream etc classes], wxUSE_STREAMS)
WX_ARG_FEATURE(sysoptions,    [  --enable-sysoptions     use wxSystemOptions], wxUSE_SYSTEM_OPTIONS)
WX_ARG_FEATURE(tarstream,     [  --enable-tarstream      use wxTar streams], wxUSE_TARSTREAM)
WX_ARG_FEATURE(textbuf,       [  --enable-textbuf        use wxTextBuffer class], wxUSE_TEXTBUFFER)
WX_ARG_FEATURE(textfile,      [  --enable-textfile       use wxTextFile class], wxUSE_TEXTFILE)
WX_ARG_FEATURE(timer,         [  --enable-timer          use wxTimer class], wxUSE_TIMER)
WX_ARG_FEATURE(variant,       [  --enable-variant        use wxVariant class], wxUSE_VARIANT)
WX_ARG_FEATURE(zipstream,     [  --enable-zipstream      use wxZip streams], wxUSE_ZIPSTREAM)

dnl URL-related classes
WX_ARG_FEATURE(url,           [  --enable-url            use wxURL class], wxUSE_URL)
WX_ARG_FEATURE(protocol,      [  --enable-protocol       use wxProtocol class], wxUSE_PROTOCOL)
WX_ARG_FEATURE(protocol_http, [  --enable-protocol-http  HTTP support in wxProtocol], wxUSE_PROTOCOL_HTTP)
WX_ARG_FEATURE(protocol_ftp,  [  --enable-protocol-ftp   FTP support in wxProtocol], wxUSE_PROTOCOL_FTP)
WX_ARG_FEATURE(protocol_file, [  --enable-protocol-file  FILE support in wxProtocol], wxUSE_PROTOCOL_FILE)

WX_ARG_FEATURE(threads,     [  --enable-threads        use threads], wxUSE_THREADS)

if test "$wxUSE_MSW" = 1 ; then
WX_ARG_DISABLE(dbghelp,     [  --enable-dbghelp        use dbghelp.dll API (Win32 only)], wxUSE_DBGHELP)
WX_ARG_ENABLE(iniconf,      [  --enable-iniconf        use wxIniConfig (Win32 only)], wxUSE_INICONF)
fi

WX_ARG_FEATURE(regkey,      [  --enable-regkey         use wxRegKey class (Win32 only)], wxUSE_REGKEY)

if test "$wxUSE_GUI" = "yes"; then

dnl ---------------------------------------------------------------------------
dnl optional "big" GUI features
dnl ---------------------------------------------------------------------------

WX_ARG_FEATURE(docview,     [  --enable-docview        use document view architecture], wxUSE_DOC_VIEW_ARCHITECTURE)
WX_ARG_FEATURE(help,        [  --enable-help           use help subsystem], wxUSE_HELP)
WX_ARG_FEATURE(mshtmlhelp,  [  --enable-mshtmlhelp     use MS HTML Help (win32)], wxUSE_MS_HTML_HELP)
WX_ARG_FEATURE(html,        [  --enable-html           use wxHTML sub-library], wxUSE_HTML)
WX_ARG_FEATURE(htmlhelp,    [  --enable-htmlhelp       use wxHTML-based help], wxUSE_WXHTML_HELP)
WX_ARG_FEATURE(xrc,         [  --enable-xrc            use XRC resources sub-library], wxUSE_XRC)
WX_ARG_FEATURE(aui,         [  --enable-aui            use AUI docking library], wxUSE_AUI)
WX_ARG_FEATURE(propgrid,    [  --enable-propgrid       use wxPropertyGrid library], wxUSE_PROPGRID)
WX_ARG_FEATURE(ribbon,      [  --enable-ribbon         use wxRibbon library], wxUSE_RIBBON)
WX_ARG_FEATURE(stc,         [  --enable-stc            use wxStyledTextCtrl library], wxUSE_STC)
WX_ARG_FEATURE(constraints, [  --enable-constraints    use layout-constraints system], wxUSE_CONSTRAINTS)
WX_ARG_FEATURE(loggui,      [  --enable-loggui         use standard GUI logger], wxUSE_LOGGUI)
WX_ARG_FEATURE(logwin,      [  --enable-logwin         use wxLogWindow], wxUSE_LOGWINDOW)
WX_ARG_FEATURE(logdialog,   [  --enable-logdialog      use wxLogDialog], wxUSE_LOGDIALOG)
WX_ARG_FEATURE(mdi,         [  --enable-mdi            use multiple document interface architecture], wxUSE_MDI)
WX_ARG_FEATURE(mdidoc,      [  --enable-mdidoc         use docview architecture with MDI], wxUSE_MDI_ARCHITECTURE)
WX_ARG_FEATURE(mediactrl,   [  --enable-mediactrl      use wxMediaCtrl class], wxUSE_MEDIACTRL)
WX_ARG_FEATURE(richtext,    [  --enable-richtext       use wxRichTextCtrl], wxUSE_RICHTEXT)
WX_ARG_FEATURE(postscript,  [  --enable-postscript     use wxPostscriptDC device context (default for gtk+)], wxUSE_POSTSCRIPT)
WX_ARG_FEATURE(printarch,   [  --enable-printarch      use printing architecture], wxUSE_PRINTING_ARCHITECTURE)
WX_ARG_FEATURE(svg,         [  --enable-svg            use wxSVGFileDC device context], wxUSE_SVG)
WX_ARG_FEATURE(webkit,      [  --enable-webkit         use wxWebKitCtrl (Mac-only, use wxWebView instead)], wxUSE_WEBKIT)
WX_ARG_FEATURE(webview,     [  --enable-webview        use wxWebView library], wxUSE_WEBVIEW)

dnl wxDC is implemented in terms of wxGraphicsContext in wxOSX so the latter
dnl can't be disabled, don't even provide an option to do it
if test "$wxUSE_MAC" != 1; then
WX_ARG_FEATURE(graphics_ctx,[  --enable-graphics_ctx   use graphics context 2D drawing API], wxUSE_GRAPHICS_CONTEXT)
fi

dnl ---------------------------------------------------------------------------
dnl IPC &c
dnl ---------------------------------------------------------------------------

WX_ARG_FEATURE(clipboard,   [  --enable-clipboard      use wxClipboard class], wxUSE_CLIPBOARD)
WX_ARG_FEATURE(dnd,         [  --enable-dnd            use Drag'n'Drop classes], wxUSE_DRAG_AND_DROP)

dnl ---------------------------------------------------------------------------
dnl optional GUI controls (in alphabetical order except the first one)
dnl ---------------------------------------------------------------------------

dnl don't set DEFAULT_wxUSE_XXX below if the option is not specified
DEFAULT_wxUSE_CONTROLS=none
WX_ARG_DISABLE(controls,    [  --disable-controls      disable compilation of all standard controls], wxUSE_CONTROLS)

dnl even with --disable-controls, some may be enabled by an explicit
dnl --enable-<control> later on the command line -- but by default all will be
dnl disabled
if test "$wxUSE_CONTROLS" = "no"; then
    DEFAULT_wxUSE_ACCEL=no
    DEFAULT_wxUSE_ANIMATIONCTRL=no
    DEFAULT_wxUSE_BANNERWINDOW=no
    DEFAULT_wxUSE_BMPBUTTON=no
    DEFAULT_wxUSE_BUTTON=no
    DEFAULT_wxUSE_CALCTRL=no
    DEFAULT_wxUSE_CARET=no
    DEFAULT_wxUSE_CHECKBOX=no
    DEFAULT_wxUSE_CHECKLISTBOX=no
    DEFAULT_wxUSE_CHOICE=no
    DEFAULT_wxUSE_CHOICEBOOK=no
    DEFAULT_wxUSE_COLLPANE=no
    DEFAULT_wxUSE_COLOURPICKERCTRL=no
    DEFAULT_wxUSE_COMBOBOX=no
    DEFAULT_wxUSE_COMBOBOX=no
    DEFAULT_wxUSE_COMMANDLINKBUTTON=no
    DEFAULT_wxUSE_DATAVIEWCTRL=no
    DEFAULT_wxUSE_DATEPICKCTRL=no
    DEFAULT_wxUSE_DETECT_SM=no
    DEFAULT_wxUSE_DIRPICKERCTRL=no
    DEFAULT_wxUSE_DISPLAY=no
    DEFAULT_wxUSE_FILECTRL=no
    DEFAULT_wxUSE_FILEPICKERCTRL=no
    DEFAULT_wxUSE_FONTPICKERCTRL=no
    DEFAULT_wxUSE_GAUGE=no
    DEFAULT_wxUSE_GRID=no
    DEFAULT_wxUSE_HEADERCTRL=no
    DEFAULT_wxUSE_HYPERLINKCTRL=no
    DEFAULT_wxUSE_IMAGLIST=no
    DEFAULT_wxUSE_LISTBOOK=no
    DEFAULT_wxUSE_LISTBOX=no
    DEFAULT_wxUSE_LISTCTRL=no
    DEFAULT_wxUSE_MARKUP=no
    DEFAULT_wxUSE_NOTEBOOK=no
    DEFAULT_wxUSE_POPUPWIN=no
    DEFAULT_wxUSE_RADIOBOX=no
    DEFAULT_wxUSE_RADIOBTN=no
    DEFAULT_wxUSE_RICHMSGDLG=no
    DEFAULT_wxUSE_RICHTOOLTIP=no
    DEFAULT_wxUSE_REARRANGECTRL=no
    DEFAULT_wxUSE_SASH=no
    DEFAULT_wxUSE_SCROLLBAR=no
    DEFAULT_wxUSE_SEARCHCTRL=no
    DEFAULT_wxUSE_SLIDER=no
    DEFAULT_wxUSE_SPINBTN=no
    DEFAULT_wxUSE_SPINCTRL=no
    DEFAULT_wxUSE_SPLITTER=no
    DEFAULT_wxUSE_STATBMP=no
    DEFAULT_wxUSE_STATBOX=no
    DEFAULT_wxUSE_STATLINE=no
    DEFAULT_wxUSE_STATUSBAR=no
    DEFAULT_wxUSE_TIMEPICKCTRL=no
    DEFAULT_wxUSE_TIPWINDOW=no
    DEFAULT_wxUSE_TOGGLEBTN=no
    DEFAULT_wxUSE_TOOLBAR=no
    DEFAULT_wxUSE_TOOLBAR_NATIVE=no
    DEFAULT_wxUSE_TOOLBOOK=no
    DEFAULT_wxUSE_TOOLTIPS=no
    DEFAULT_wxUSE_TREEBOOK=no
    DEFAULT_wxUSE_TREECTRL=no
    DEFAULT_wxUSE_TREELISTCTRL=no
fi

dnl features affecting multiple controls
WX_ARG_FEATURE(markup,      [  --enable-markup         support wxControl::SetLabelMarkup], wxUSE_MARKUP)

dnl please keep the settings below in alphabetical order
WX_ARG_FEATURE(accel,       [  --enable-accel          use accelerators], wxUSE_ACCEL)
WX_ARG_FEATURE(actindicator,[  --enable-actindicator   use wxActivityIndicator class], wxUSE_ACTIVITYINDICATOR)
WX_ARG_FEATURE(addremovectrl, [  --enable-addremovectrl  use wxAddRemoveCtrl], wxUSE_ADDREMOVECTRL)
WX_ARG_FEATURE(animatectrl, [  --enable-animatectrl    use wxAnimationCtrl class], wxUSE_ANIMATIONCTRL)
WX_ARG_FEATURE(bannerwindow,[  --enable-bannerwindow   use wxBannerWindow class], wxUSE_BANNERWINDOW)
WX_ARG_FEATURE(artstd,      [  --enable-artstd         use standard XPM icons in wxArtProvider], wxUSE_ARTPROVIDER_STD)
WX_ARG_FEATURE(arttango,    [  --enable-arttango       use Tango icons in wxArtProvider], wxUSE_ARTPROVIDER_TANGO)
WX_ARG_FEATURE(bmpbutton,   [  --enable-bmpbutton      use wxBitmapButton class], wxUSE_BMPBUTTON)
WX_ARG_FEATURE(bmpcombobox, [  --enable-bmpcombobox    use wxBitmapComboBox class], wxUSE_BITMAPCOMBOBOX)
WX_ARG_FEATURE(button,      [  --enable-button         use wxButton class], wxUSE_BUTTON)
WX_ARG_FEATURE(calendar,    [  --enable-calendar       use wxCalendarCtrl class], wxUSE_CALCTRL)
WX_ARG_FEATURE(caret,       [  --enable-caret          use wxCaret class], wxUSE_CARET)
WX_ARG_FEATURE(checkbox,    [  --enable-checkbox       use wxCheckBox class], wxUSE_CHECKBOX)
WX_ARG_FEATURE(checklst,    [  --enable-checklst       use wxCheckListBox (listbox with checkboxes) class], wxUSE_CHECKLST)
WX_ARG_FEATURE(choice,      [  --enable-choice         use wxChoice class], wxUSE_CHOICE)
WX_ARG_FEATURE(choicebook,  [  --enable-choicebook     use wxChoicebook class], wxUSE_CHOICEBOOK)
WX_ARG_FEATURE(collpane,    [  --enable-collpane       use wxCollapsiblePane class], wxUSE_COLLPANE)
WX_ARG_FEATURE(colourpicker,[  --enable-colourpicker   use wxColourPickerCtrl class], wxUSE_COLOURPICKERCTRL)
WX_ARG_FEATURE(combobox,    [  --enable-combobox       use wxComboBox class], wxUSE_COMBOBOX)
WX_ARG_FEATURE(comboctrl,   [  --enable-comboctrl      use wxComboCtrl class], wxUSE_COMBOCTRL)
WX_ARG_FEATURE(commandlinkbutton, [  --enable-commandlinkbutton      use wxCommmandLinkButton class], wxUSE_COMMANDLINKBUTTON)
WX_ARG_FEATURE(dataviewctrl,[  --enable-dataviewctrl   use wxDataViewCtrl class], wxUSE_DATAVIEWCTRL)
WX_ARG_FEATURE(datepick,    [  --enable-datepick       use wxDatePickerCtrl class], wxUSE_DATEPICKCTRL)
WX_ARG_FEATURE(detect_sm,   [  --enable-detect_sm      use code to detect X11 session manager], wxUSE_DETECT_SM)
WX_ARG_FEATURE(dirpicker,   [  --enable-dirpicker      use wxDirPickerCtrl class], wxUSE_DIRPICKERCTRL)
WX_ARG_FEATURE(display,     [  --enable-display        use wxDisplay class], wxUSE_DISPLAY)
WX_ARG_FEATURE(editablebox, [  --enable-editablebox    use wxEditableListBox class], wxUSE_EDITABLELISTBOX)
WX_ARG_FEATURE(filectrl,    [  --enable-filectrl       use wxFileCtrl class], wxUSE_FILECTRL)
WX_ARG_FEATURE(filepicker,  [  --enable-filepicker     use wxFilePickerCtrl class], wxUSE_FILEPICKERCTRL)
WX_ARG_FEATURE(fontpicker,  [  --enable-fontpicker     use wxFontPickerCtrl class], wxUSE_FONTPICKERCTRL)
WX_ARG_FEATURE(gauge,       [  --enable-gauge          use wxGauge class], wxUSE_GAUGE)
WX_ARG_FEATURE(grid,        [  --enable-grid           use wxGrid class], wxUSE_GRID)
WX_ARG_FEATURE(headerctrl,  [  --enable-headerctrl     use wxHeaderCtrl class], wxUSE_HEADERCTRL)
WX_ARG_FEATURE(hyperlink,   [  --enable-hyperlink      use wxHyperlinkCtrl class], wxUSE_HYPERLINKCTRL)
WX_ARG_FEATURE(imaglist,    [  --enable-imaglist       use wxImageList class], wxUSE_IMAGLIST)
WX_ARG_FEATURE(infobar,     [  --enable-infobar        use wxInfoBar class], wxUSE_INFOBAR)
WX_ARG_FEATURE(listbook,    [  --enable-listbook       use wxListbook class], wxUSE_LISTBOOK)
WX_ARG_FEATURE(listbox,     [  --enable-listbox        use wxListBox class], wxUSE_LISTBOX)
WX_ARG_FEATURE(listctrl,    [  --enable-listctrl       use wxListCtrl class], wxUSE_LISTCTRL)
WX_ARG_FEATURE(notebook,    [  --enable-notebook       use wxNotebook class], wxUSE_NOTEBOOK)
WX_ARG_FEATURE(notifmsg,    [  --enable-notifmsg       use wxNotificationMessage class], wxUSE_NOTIFICATION_MESSAGE)
WX_ARG_FEATURE(odcombobox,  [  --enable-odcombobox     use wxOwnerDrawnComboBox class], wxUSE_ODCOMBOBOX)
WX_ARG_FEATURE(popupwin,    [  --enable-popupwin       use wxPopUpWindow class], wxUSE_POPUPWIN)
WX_ARG_FEATURE(prefseditor, [  --enable-prefseditor    use wxPreferencesEditor class], wxUSE_PREFERENCES_EDITOR)
WX_ARG_FEATURE(privatefonts,[  --enable-privatefonts   provide wxFont::AddPrivateFont() method], wxUSE_PRIVATE_FONTS)
WX_ARG_FEATURE(radiobox,    [  --enable-radiobox       use wxRadioBox class], wxUSE_RADIOBOX)
WX_ARG_FEATURE(radiobtn,    [  --enable-radiobtn       use wxRadioButton class], wxUSE_RADIOBTN)
WX_ARG_FEATURE(richmsgdlg,  [  --enable-richmsgdlg     use wxRichMessageDialog class], wxUSE_RICHMSGDLG)
WX_ARG_FEATURE(richtooltip, [  --enable-richtooltip    use wxRichToolTip class], wxUSE_RICHTOOLTIP)
WX_ARG_FEATURE(rearrangectrl,[  --enable-rearrangectrl  use wxRearrangeList/Ctrl/Dialog], wxUSE_REARRANGECTRL)
WX_ARG_FEATURE(sash,        [  --enable-sash           use wxSashWindow class], wxUSE_SASH)
WX_ARG_FEATURE(scrollbar,   [  --enable-scrollbar      use wxScrollBar class and scrollable windows], wxUSE_SCROLLBAR)
WX_ARG_FEATURE(searchctrl,  [  --enable-searchctrl     use wxSearchCtrl class], wxUSE_SEARCHCTRL)
WX_ARG_FEATURE(slider,      [  --enable-slider         use wxSlider class], wxUSE_SLIDER)
WX_ARG_FEATURE(spinbtn,     [  --enable-spinbtn        use wxSpinButton class], wxUSE_SPINBTN)
WX_ARG_FEATURE(spinctrl,    [  --enable-spinctrl       use wxSpinCtrl class], wxUSE_SPINCTRL)
WX_ARG_FEATURE(splitter,    [  --enable-splitter       use wxSplitterWindow class], wxUSE_SPLITTER)
WX_ARG_FEATURE(statbmp,     [  --enable-statbmp        use wxStaticBitmap class], wxUSE_STATBMP)
WX_ARG_FEATURE(statbox,     [  --enable-statbox        use wxStaticBox class], wxUSE_STATBOX)
WX_ARG_FEATURE(statline,    [  --enable-statline       use wxStaticLine class], wxUSE_STATLINE)
WX_ARG_FEATURE(stattext,    [  --enable-stattext       use wxStaticText class], wxUSE_STATTEXT)
WX_ARG_FEATURE(statusbar,   [  --enable-statusbar      use wxStatusBar class], wxUSE_STATUSBAR)
WX_ARG_FEATURE(taskbaricon, [  --enable-taskbaricon    use wxTaskBarIcon class], wxUSE_TASKBARICON)
WX_ARG_FEATURE(tbarnative,  [  --enable-tbarnative     use native wxToolBar class], wxUSE_TOOLBAR_NATIVE)
WX_ARG_FEATURE(textctrl,    [  --enable-textctrl       use wxTextCtrl class], wxUSE_TEXTCTRL)
WX_ARG_FEATURE(datepick,    [  --enable-timepick       use wxTimePickerCtrl class], wxUSE_TIMEPICKCTRL)
WX_ARG_FEATURE(tipwindow,   [  --enable-tipwindow      use wxTipWindow class], wxUSE_TIPWINDOW)
WX_ARG_FEATURE(togglebtn,   [  --enable-togglebtn      use wxToggleButton class], wxUSE_TOGGLEBTN)
WX_ARG_FEATURE(toolbar,     [  --enable-toolbar        use wxToolBar class], wxUSE_TOOLBAR)
WX_ARG_FEATURE(toolbook,    [  --enable-toolbook       use wxToolbook class], wxUSE_TOOLBOOK)
WX_ARG_FEATURE(treebook,    [  --enable-treebook       use wxTreebook class], wxUSE_TREEBOOK)
WX_ARG_FEATURE(treectrl,    [  --enable-treectrl       use wxTreeCtrl class], wxUSE_TREECTRL)
WX_ARG_FEATURE(treelist,    [  --enable-treelist       use wxTreeListCtrl class], wxUSE_TREELISTCTRL)

dnl ---------------------------------------------------------------------------
dnl common dialogs
dnl ---------------------------------------------------------------------------

WX_ARG_FEATURE(commondlg,   [  --enable-commondlg      use all common dialogs], wxUSE_COMMONDLGS)
WX_ARG_FEATURE(aboutdlg,    [  --enable-aboutdlg       use wxAboutBox], wxUSE_ABOUTDLG)
WX_ARG_FEATURE(choicedlg,   [  --enable-choicedlg      use wxChoiceDialog], wxUSE_CHOICEDLG)
WX_ARG_FEATURE(coldlg,      [  --enable-coldlg         use wxColourDialog], wxUSE_COLOURDLG)
WX_ARG_FEATURE(filedlg,     [  --enable-filedlg        use wxFileDialog], wxUSE_FILEDLG)
WX_ARG_FEATURE(finddlg,     [  --enable-finddlg        use wxFindReplaceDialog], wxUSE_FINDREPLDLG)
WX_ARG_FEATURE(fontdlg,     [  --enable-fontdlg        use wxFontDialog], wxUSE_FONTDLG)
WX_ARG_FEATURE(dirdlg,      [  --enable-dirdlg         use wxDirDialog], wxUSE_DIRDLG)
WX_ARG_FEATURE(msgdlg,      [  --enable-msgdlg         use wxMessageDialog], wxUSE_MSGDLG)
WX_ARG_FEATURE(numberdlg,   [  --enable-numberdlg      use wxNumberEntryDialog], wxUSE_NUMBERDLG)
WX_ARG_FEATURE(splash,      [  --enable-splash         use wxSplashScreen], wxUSE_SPLASH)
WX_ARG_FEATURE(textdlg,     [  --enable-textdlg        use wxTextDialog], wxUSE_TEXTDLG)
WX_ARG_FEATURE(tipdlg,      [  --enable-tipdlg         use startup tips], wxUSE_STARTUP_TIPS)
WX_ARG_FEATURE(progressdlg, [  --enable-progressdlg    use wxProgressDialog], wxUSE_PROGRESSDLG)
WX_ARG_FEATURE(wizarddlg,   [  --enable-wizarddlg      use wxWizard], wxUSE_WIZARDDLG)

dnl ---------------------------------------------------------------------------
dnl misc GUI options
dnl ---------------------------------------------------------------------------

if test "$wxUSE_MSW" = 1 ; then
    DEFAULT_wxUSE_ACCESSIBILITY=yes
fi

WX_ARG_FEATURE(menus,       [  --enable-menus          use wxMenu/wxMenuBar/wxMenuItem classes], wxUSE_MENUS)
WX_ARG_FEATURE(miniframe,   [  --enable-miniframe      use wxMiniFrame class], wxUSE_MINIFRAME)
WX_ARG_FEATURE(tooltips,    [  --enable-tooltips       use wxToolTip class], wxUSE_TOOLTIPS)
WX_ARG_FEATURE(splines,     [  --enable-splines        use spline drawing code], wxUSE_SPLINES)
WX_ARG_FEATURE(mousewheel,  [  --enable-mousewheel     use mousewheel], wxUSE_MOUSEWHEEL)
WX_ARG_FEATURE(validators,  [  --enable-validators     use wxValidator and derived classes], wxUSE_VALIDATORS)
WX_ARG_FEATURE(busyinfo,    [  --enable-busyinfo       use wxBusyInfo], wxUSE_BUSYINFO)
WX_ARG_FEATURE(hotkey,      [  --enable-hotkey         use wxWindow::RegisterHotKey()], wxUSE_HOTKEY)
WX_ARG_FEATURE(joystick,    [  --enable-joystick       use wxJoystick], wxUSE_JOYSTICK)
WX_ARG_FEATURE(metafile,    [  --enable-metafiles      use wxMetaFile], wxUSE_METAFILE)
WX_ARG_FEATURE(dragimage,   [  --enable-dragimage      use wxDragImage], wxUSE_DRAGIMAGE)
WX_ARG_FEATURE(accessibility,[  --enable-accessibility  enable accessibility support], wxUSE_ACCESSIBILITY)
WX_ARG_FEATURE(uiactionsim,  [  --enable-uiactionsim    use wxUIActionSimulator (experimental)], wxUSE_UIACTIONSIMULATOR)
WX_ARG_FEATURE(dctransform,  [  --enable-dctransform    use wxDC::SetTransformMatrix and related], wxUSE_DC_TRANSFORM_MATRIX)
WX_ARG_FEATURE(webviewwebkit,[  --enable-webviewwebkit  use wxWebView WebKit backend], wxUSE_WEBVIEW_WEBKIT)

dnl ---------------------------------------------------------------------------
dnl support for image formats that do not rely on external library
dnl ---------------------------------------------------------------------------

WX_ARG_FEATURE(palette,     [  --enable-palette        use wxPalette class], wxUSE_PALETTE)
WX_ARG_FEATURE(image,       [  --enable-image          use wxImage class], wxUSE_IMAGE)
WX_ARG_FEATURE(gif,         [  --enable-gif            use gif images (GIF file format)], wxUSE_GIF)
WX_ARG_FEATURE(pcx,         [  --enable-pcx            use pcx images (PCX file format)], wxUSE_PCX)
WX_ARG_FEATURE(tga,         [  --enable-tga            use tga images (TGA file format)], wxUSE_TGA)
WX_ARG_FEATURE(iff,         [  --enable-iff            use iff images (IFF file format)], wxUSE_IFF)
WX_ARG_FEATURE(pnm,         [  --enable-pnm            use pnm images (PNM file format)], wxUSE_PNM)
WX_ARG_FEATURE(xpm,         [  --enable-xpm            use xpm images (XPM file format)], wxUSE_XPM)
WX_ARG_FEATURE(ico_cur,     [  --enable-ico_cur        use Windows ICO and CUR formats], wxUSE_ICO_CUR)

dnl ---------------------------------------------------------------------------
dnl wxMSW-only options
dnl ---------------------------------------------------------------------------

WX_ARG_FEATURE(dccache,     [  --enable-dccache        cache temporary wxDC objects (Win32 only)], wxUSE_DC_CACHEING)
WX_ARG_FEATURE(ps-in-msw,   [  --enable-ps-in-msw      use PS printing in wxMSW (Win32 only)], wxUSE_POSTSCRIPT_ARCHITECTURE_IN_MSW)
WX_ARG_FEATURE(ownerdrawn,  [  --enable-ownerdrawn     use owner drawn controls (Win32 and OS/2 only)], wxUSE_OWNER_DRAWN)
WX_ARG_FEATURE(uxtheme,     [  --enable-uxtheme        enable support for Windows XP themed look (Win32 only)], wxUSE_UXTHEME)
WX_ARG_FEATURE(wxdib,       [  --enable-wxdib          use wxDIB class (Win32 only)], wxUSE_DIB)
WX_ARG_FEATURE(webviewie,   [  --enable-webviewie      use wxWebView IE backend (Win32 only)], wxUSE_WEBVIEW_IE)

dnl this one is not really MSW-specific but it exists mainly to be turned off
dnl under MSW, it should be off by default on the other platforms
if test "$wxUSE_MSW" != 1; then
    DEFAULT_wxUSE_AUTOID_MANAGEMENT=no
fi

WX_ARG_FEATURE(autoidman,   [  --enable-autoidman      use automatic ids management], wxUSE_AUTOID_MANAGEMENT)

fi
dnl for GUI only

dnl ---------------------------------------------------------------------------
dnl Checks for programs
dnl ---------------------------------------------------------------------------

dnl flush the cache because checking for programs might abort
AC_CACHE_SAVE

dnl C-compiler checks
dnl   defines CC with the compiler to use
dnl   defines GCC with yes if using gcc
dnl   defines GCC empty if not using gcc
dnl   defines CFLAGS
dnl
dnl this magic incantation is needed to prevent AC_PROG_CC from setting the
dnl default CFLAGS (something like "-g -O2") -- we don't need this as we add
dnl (if not already present in C*FLAGS) the -g and -O flags ourselves below
CFLAGS=${CFLAGS:=}
AC_BAKEFILE_PROG_CC

dnl is -traditional needed for correct compilations
dnl   adds -traditional for gcc if needed
AC_PROG_GCC_TRADITIONAL

dnl C++-compiler checks
dnl   defines CXX with the compiler to use
dnl   defines GXX with yes if using gxx
dnl   defines GXX empty if not using gxx
dnl   defines CXXFLAGS
dnl
dnl see CFLAGS line above
CXXFLAGS=${CXXFLAGS:=}
AC_BAKEFILE_PROG_CXX

dnl configure always sets CXX to something as it falls back to g++ even if no
dnl C++ compiler was found, but we prefer to abort now with a clear error
dnl message rather than give errors about all tests failures below
if test "$CXX" = "g++" -a "$GXX" != "yes"; then
    AC_MSG_ERROR([C++ compiler is needed to build wxWidgets])
fi

if test -n "$wxWITH_CXX"; then
    dnl AX_CXX_COMPILE_STDCXX requires its VERSION argument to be specified at
    dnl autoconf, not run, time.
    case "$wxWITH_CXX" in
        11)
            AX_CXX_COMPILE_STDCXX(11,,optional)
            if test -n "$wxWITH_CXX_IS_OPTIONAL"; then
                if test "$HAVE_CXX11" != 1; then
                    AC_MSG_FAILURE([C++11 support was requested but is not available])
                fi
            fi
            ;;

        14)
            dnl This check can't be optional because we have only --with-cxx=14
            dnl and not --enable-cxx14 option.
            AX_CXX_COMPILE_STDCXX(14)

            dnl Notice that because it's not optional, the macro doesn't define
            dnl HAVE_CXX14. We don't use it anyhow so far, so it doesn't
            dnl matter, but we could need to do it ourselves here in the future.

            dnl If we have C++14, we necessarily have C++11 too.
            HAVE_CXX11=1
            ;;

        17)
            dnl This is similar to 14 above.
            AX_CXX_COMPILE_STDCXX(17)
            HAVE_CXX11=1
            ;;

        *)
            AC_MSG_ERROR([Invalid --with-cxx="$wxWITH_CXX" option value, only 11, 14 or 17 supported])
    esac

    if test "$HAVE_CXX11" = "1" ; then
        dnl The standard macro above doesn't set Objective-C++ flags, but we do
        dnl need them too.
        OBJCXXFLAGS="$OBJCXXFLAGS $switch"
    fi
fi

dnl ar command
dnl   defines AR with the appropriate command
dnl
dnl For Sun CC AC_BAKEFILE below sets AR to the compiler itself.
if test "x$SUNCXX" != xyes; then
    AC_CHECK_TOOL(AR, ar)
    if test "x$AR" = "x" ; then
        AC_MSG_ERROR([ar is needed to build wxWidgets])
    fi
fi

dnl ---------------------------------------------------------------------------
dnl Mac-specific SDK/architectures checks
dnl ---------------------------------------------------------------------------

dnl Note that some checks here are OS-specific, and need to be done for any
dnl port, while others are wxOSX-specific and are performed only for it inside
dnl another test below.
if test "$USE_DARWIN" = 1; then

retest_macosx_linking=no

OSX_ARCH_OPTS=""

dnl Deal with architecture selection. By default, we compile for the current
dnl architecture, whatever it is. With --enable-universal_binary the list of
dnl architectures can be explicitly specified. If it isn't, we compile for all
dnl supported ones.
if test "x$wxUSE_UNIVERSAL_BINARY" != xno ; then
    if test "x$wxUSE_MAC_ARCH" != xno; then
        AC_MSG_WARN([--enable-macosx_arch is ignored when --enable-universal_binary is used.])
    fi

    if test "x$wxUSE_UNIVERSAL_BINARY" != xyes; then
        OSX_ARCH_OPTS=$wxUSE_UNIVERSAL_BINARY
    else dnl Use all architectures supported
        OSX_ARCH_OPTS="i386"
        if test "$wxUSE_OSX_COCOA" = 1; then
            OSX_ARCH_OPTS="$OSX_ARCH_OPTS,x86_64"
        fi
    fi

    AC_MSG_CHECKING([for architectures to use in universal binary])
    AC_MSG_RESULT([$OSX_ARCH_OPTS])

    dnl NOTE: Only the compiler driver needs arch flags.  The link editor
    dnl is incapable of using them but the compiler driver (which we use
    dnl as LD when building dynamic libraries) uses them to invoke the
    dnl real ld multiple times.  If we moved to libtool -dynamic we would
    dnl need no arch flags because libtool automatically invokes ld for
    dnl every architecture found in the fat input files.
    dnl
    dnl For static library builds, AR/RANLIB automatically create proper
    dnl fat archives although AR is unable to update them once RANLIB has
    dnl made them into proper fat archives.  Fortunately, our link process
    dnl simply removes the .a file before using ar to create a new one.
    dnl If we did move to libtool -static we still wouldn't need arch flags
    dnl because libtool automatically figures it out based on input.
    retest_macosx_linking=yes
else
    if test "x$wxUSE_MAC_ARCH" != xno; then
        OSX_ARCH_OPTS=$wxUSE_MAC_ARCH
    fi
fi

if test "x$OSX_ARCH_OPTS" != "x"; then
    dnl Check if there is more than one architecture
    if echo $OSX_ARCH_OPTS | grep -q ","; then
        AC_MSG_WARN([Disabling dependency tracking due to universal binary build.])
        disable_macosx_deps=yes

        if test "x$wxUSE_PCH" = "xyes"; then
            dnl HACK: PCH could be made to work by precompiling for each architecture into separate directories
            dnl and including all architecture directories with each compiler invocation.
            dnl That would require a major rework of Bakefile and at the same time it would be nice to have
            dnl Objective-C++ precompiled headers.
            AC_MSG_WARN([Disabling precompiled headers due to universal binary build.])
            wxUSE_PCH=no
        fi
    fi

    OSX_ARCH_OPTS=`echo $OSX_ARCH_OPTS | sed -e 's/^/-arch /' -e 's/,/ -arch /g'`

    CXXFLAGS="$OSX_ARCH_OPTS $CXXFLAGS"
    CFLAGS="$OSX_ARCH_OPTS $CFLAGS"
    OBJCXXFLAGS="$OSX_ARCH_OPTS $OBJCXXFLAGS"
    OBJCFLAGS="$OSX_ARCH_OPTS $OBJCFLAGS"
    LDFLAGS="$OSX_ARCH_OPTS $LDFLAGS"
fi

if test "$wxUSE_MAC" = 1; then

dnl Set up the Mac OS X SDK.  We do this early so configure tests will occur
dnl with the SDK in place.
dnl NOTE: We clobber wxUSE_MACOSX_SDK with the SDK path
if test "x$wxUSE_MACOSX_SDK" = "xno"; then
    wxUSE_MACOSX_SDK=
elif test "x$wxUSE_MACOSX_SDK" = "xyes"; then
    # TODO: Search for most recent SDK and use it.
    wxUSE_MACOSX_SDK="/Developer/SDKs/MacOSX10.4u.sdk"
fi


if test "x$wxUSE_MACOSX_SDK" != "x"; then
    AC_MSG_CHECKING([for SDK directory $wxUSE_MACOSX_SDK])
    if ! test -d "$wxUSE_MACOSX_SDK"; then
        AC_MSG_FAILURE([not found])
    else
        AC_MSG_RESULT([exists])
    fi
    dnl CC and CXX will have these flags added below, after the compiler has been chosen
    MACOSX_SDK_OPTS="-isysroot $wxUSE_MACOSX_SDK"
    retest_macosx_linking=yes
    dnl NOTE: When libtool is used in lieu of AR/RANLIB (i.e. in static mode)
    dnl the syslibroot makes no difference.  We aren't using libtool now but
    dnl if we ever did, be aware that you don't need to worry about it.
fi

fi dnl wxUSE_MAC

dnl Set up the deployment target
dnl No   : Don't specify a min version even if using an SDK
dnl Yes  : Use the version from the SDK if used, otherwise same as no
dnl Param: Use the specified version
if test "x$wxUSE_MACOSX_VERSION_MIN" = "xno"; then
    wxUSE_MACOSX_VERSION_MIN=
elif test "x$wxUSE_MACOSX_VERSION_MIN" = "xyes"; then
    if test "x$wxUSE_MACOSX_SDK" != "x"; then
        AC_MSG_CHECKING([SDK deployment version])
dnl We need to quote the next line where we don't need macros and do need [] in the regex
[
        MACOSX_SDK_PLIST_VERSION_MIN=`defaults read "$wxUSE_MACOSX_SDK/SDKSettings" buildSettings | grep '^ *"\{0,1\}MACOSX_DEPLOYMENT_TARGET"\{0,1\} *= *"\{0,1\}[^"]*"\{0,1\}; *$' | sed 's/^ *"\{0,1\}MACOSX_DEPLOYMENT_TARGET"\{0,1\} *= *"\{0,1\}\([^"]*\)"\{0,1\} *; *$/\1/'`
]
        # If that failed, try again with the new key
        if test "x$MACOSX_SDK_PLIST_VERSION_MIN" = "x"; then
[
            MACOSX_SDK_PLIST_VERSION_MIN=`defaults read "$wxUSE_MACOSX_SDK/SDKSettings" DefaultProperties | grep '^ *"\{0,1\}MACOSX_DEPLOYMENT_TARGET"\{0,1\} *= *"\{0,1\}[^"]*"\{0,1\}; *$' | sed 's/^ *"\{0,1\}MACOSX_DEPLOYMENT_TARGET"\{0,1\} *= *"\{0,1\}\([^"]*\)"\{0,1\} *; *$/\1/'`
]
        fi

        if test "x$MACOSX_SDK_PLIST_VERSION_MIN" != "x"; then
            wxUSE_MACOSX_VERSION_MIN=$MACOSX_SDK_PLIST_VERSION_MIN
            AC_MSG_RESULT([$wxUSE_MACOSX_VERSION_MIN])
        else
            AC_MSG_WARN([Could not determine deployment target from SDKSettings.plist])
            wxUSE_MACOSX_VERSION_MIN=
        fi
    else
        wxUSE_MACOSX_VERSION_MIN=
    fi
elif test "x$wxUSE_MACOSX_VERSION_MIN" = "x"; then
    wxUSE_MACOSX_VERSION_MIN=10.7
fi

if test "x$MACOSX_SDK_OPTS" != "x"; then
    eval "CC=\"$CC $MACOSX_SDK_OPTS\""
    eval "CXX=\"$CXX $MACOSX_SDK_OPTS\""
    eval "LD=\"$LD $MACOSX_SDK_OPTS\""
    retest_macosx_linking=yes
fi

if test "x$wxUSE_MACOSX_VERSION_MIN" != "x"; then
    if test "$wxUSE_OSX_IPHONE" = 1; then
        MACOSX_VERSION_MIN_OPTS="-miphoneos-version-min=$wxUSE_MACOSX_VERSION_MIN"
    else
        MACOSX_VERSION_MIN_OPTS="-mmacosx-version-min=$wxUSE_MACOSX_VERSION_MIN"
    fi
    eval "CC=\"$CC $MACOSX_VERSION_MIN_OPTS\""
    eval "CXX=\"$CXX $MACOSX_VERSION_MIN_OPTS\""
    eval "LD=\"$LD $MACOSX_VERSION_MIN_OPTS\""
    retest_macosx_linking=yes
fi

if test "$HAVE_CXX11" = "1" ; then
    dnl We also need to use libc++ standard library instead of libstdc++ for
    dnl C++11 support, both when compiling (for both C++ and Objective-C++, so
    dnl putting this in just CXXFLAGS wouldn't be enough) and when linking
    dnl (both libraries and plugins, using bakefile shared-ld-sh script which
    dnl doesn't handle this option, so putting it in LDFLAGS wouldn't work).
    eval "CXX=\"$CXX -stdlib=libc++\""
fi

dnl If either an SDK or a version option was added, make sure that we can
dnl still compile and link both C and C++.  If we didn't do this, then most
dnl of the remaining tests would fail.
if test "x$retest_macosx_linking" = "xyes"; then
    AC_LANG_PUSH(C)
    AC_MSG_CHECKING([if C compiler ($CC) works with SDK/version options])
    AC_TRY_LINK([],[],[AC_MSG_RESULT([yes])],[AC_MSG_FAILURE([no.  Try a different SDK]); exit 1])
    AC_LANG_POP()

    AC_LANG_PUSH(C++)
    AC_MSG_CHECKING([if C++ compiler ($CXX) works with SDK/version options])
    AC_TRY_LINK([],[],[AC_MSG_RESULT([yes])],[AC_MSG_FAILURE([no.  Try a different SDK]); exit 1])
    AC_LANG_POP()
fi

fi dnl USE_DARWIN

case "${host}" in

    dnl The other BSD's should probably go in here too, since this is
    dnl to workaround a strange static lib BSDism.
    dnl Mac OS X install seems to ignore -p option...
    *-*-darwin* )
        INSTALL_PROGRAM="cp -fp"
        INSTALL_DATA="cp -fp"
        ;;
    *)
        ;;
esac

dnl ------------------------------------------------------------------------
dnl Platform specific tests
dnl ------------------------------------------------------------------------

if test "$USE_LINUX" = 1 -o "$USE_GNU" = 1; then
    dnl While g++ predefines _GNU_SOURCE by default, gcc does not, so do it
    dnl explicitly to ensure that the tests done below using C compiler
    dnl succeed, otherwise things like pthread_mutexattr_settype() (and many
    dnl others) wouldn't be detected.
    AC_DEFINE(_GNU_SOURCE)

    dnl For non-g++ compilers (including gcc, as mentioned above) we need to
    dnl add this flag explicitly when building our own code later too.
    GNU_SOURCE_FLAG="-D_GNU_SOURCE"
    CFLAGS="$GNU_SOURCE_FLAG $CFLAGS"
fi

if test "x$USE_AIX" = "x1"; then
    dnl xlC needs -qunique under AIX so that one source file can be
    dnl compiled to multiple object files and safely linked together.
    if test "x$XLCXX" = "xyes"; then
        CXXFLAGS="-qunique $CXXFLAGS"
    fi

    dnl AIX sys/timer.h header #defines func_data as t_union.data breaking the
    dnl compilation of GTK+ headers that use func_data as parameter name in
    dnl several places. We could work around this by inserting "#undef
    dnl func_data" in the code but IBM provides a possibility to disable this
    dnl #define by pre-defining the symbol below and this seems to be simpler.
    dnl And if we have any problems because of it we can always remove it and
    dnl use the #undef approach.
    CPPFLAGS="-D_LINUX_SOURCE_COMPAT $CPPFLAGS"
fi

dnl This case is for PowerPC OS X vs. everything else
case "${host}" in
  powerpc-*-darwin* )
    AC_MSG_CHECKING([if __POWERPC__ is already defined])
    AC_TRY_COMPILE([],[#ifndef __POWERPC__
        choke me for lack of PowerPC
#endif
],
        [AC_MSG_RESULT([yes])],
        [AC_MSG_RESULT([no])
        AC_DEFINE(__POWERPC__)
    ])
  ;;
esac

dnl This case is for OS X vs. everything else
case "${host}" in
  *-*-darwin* )
    AC_MSG_CHECKING([if CoreFoundation/CFBase.h is usable])
    AC_TRY_COMPILE([#include <CoreFoundation/CFBase.h>
],[],
        [AC_MSG_RESULT([yes])],
        [AC_MSG_RESULT([no])
        AC_MSG_CHECKING([if __CF_USE_FRAMEWORK_INCLUDES__ is required])
        AC_TRY_COMPILE([#define __CF_USE_FRAMEWORK_INCLUDES__
#include <CoreFoundation/CFBase.h>
        ],[],
        [AC_MSG_RESULT([yes])
        dnl We must use -D so source files that don't include wx/setup.h
        dnl but do include CFBase will work.
        CPPFLAGS="-D__CF_USE_FRAMEWORK_INCLUDES__ $CPPFLAGS"],
        [AC_MSG_FAILURE([no.  CoreFoundation not available.])]
        )
        ]
    )
  ;;
esac

dnl Determine whether we want to use Cygwin as Windows or POSIX platform: the
dnl latter makes more sense for wxGTK/Motif/X11 ports
wants_win32=0
doesnt_want_win32=0
case "${host}" in
  *-*-cygwin*)
      if test "$wxUSE_MSW" = 1 ; then
        wants_win32=1
      else
        dnl when we use cygwin compiler with -mno-cygwin option it uses mingw32
        dnl headers and libraries, so it's Windows-like in this case
        AC_CACHE_CHECK([if -mno-cygwin is in effect], wx_cv_nocygwin,
            [
                AC_TRY_COMPILE(
                    [],
                    [
                        #ifdef __MINGW32__
                            choke me
                        #endif
                    ],
                    wx_cv_nocygwin=no,
                    wx_cv_nocygwin=yes
                )
            ]
        )

        if test "$wx_cv_nocygwin" = "yes"; then
            wants_win32=1
        else
            doesnt_want_win32=1
        fi
      fi
      if test "$wants_win32" = 1 ; then
        BAKEFILE_FORCE_PLATFORM=win32
      fi
  ;;
  *-*-mingw*)
      wants_win32=1
  ;;
esac

if test "$wxUSE_WINE" = "yes"; then
    wants_win32=1
    LDFLAGS_GUI="-mwindows"
fi

dnl NB: The two tests below are *NOT* mutually exclusive! They should only
dnl     take effect on Cygwin/Mingw and not other platforms.
if test "$wants_win32" = 1 ; then
    USE_UNIX=0
    USE_WIN32=1
    AC_DEFINE(__WIN32__)
    AC_DEFINE(__WINDOWS__)
    AC_DEFINE(__GNUWIN32__)
    AC_DEFINE(STRICT)
fi
if test "$doesnt_want_win32" = 1 ; then
    USE_UNIX=1
    USE_WIN32=0
fi
dnl (end of Windows-only piece)

if test "$USE_UNIX" = 1 ; then
    wxUSE_UNIX=yes
    AC_DEFINE(__UNIX__)
fi

dnl ------------------------------------------------------------------------
dnl Check for headers
dnl ------------------------------------------------------------------------

dnl Note: non-empty last parameter makes check compile-only,
dnl   skipping worthless preprocessing check
AC_CHECK_HEADERS(langinfo.h wchar.h,,, [AC_INCLUDES_DEFAULT])

dnl maybe wchar_t is in wcstr.h if we don't have wchar.h?
if test "$ac_cv_header_wchar_h" != "yes"; then
    AC_CHECK_HEADERS([wcstr.h],,, [AC_INCLUDES_DEFAULT()])
fi

if test "$USE_UNIX" = 1 ; then
    dnl POSIX needs this for select(), but old systems don't have it
    AC_CHECK_HEADERS([sys/select.h],,, [AC_INCLUDES_DEFAULT()])

    dnl Header defining C++ ABI is currently only available with g++ but test
    dnl for it unconditionally in case it becomes supported by other compilers.
    AC_LANG_PUSH(C++)
    AC_CHECK_HEADERS([cxxabi.h],,, [AC_INCLUDES_DEFAULT()])
    AC_LANG_POP()
fi

dnl ---------------------------------------------------------------------------
dnl Checks for compiler characteristics
dnl ---------------------------------------------------------------------------

dnl defines const to be empty if c-compiler does not support const fully
AC_C_CONST
dnl defines inline to a sensible value for the c-compiler
AC_C_INLINE

dnl check the sizes of integral types (give some reasonable default values for
dnl cross-compiling)
dnl   defines the size of certain types of variables in SIZEOF_<TYPE>
AC_CHECK_SIZEOF(short, 2)
AC_CHECK_SIZEOF(void *, 4)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(size_t, 4)

case "${host}" in
    arm-*-linux* )
        AC_CHECK_SIZEOF(long long, 8)
    ;;
    *-hp-hpux* )
        AC_CHECK_SIZEOF(long long, 0)
        if test "$ac_cv_sizeof_long_long" != 0; then
            dnl HPUX 10.20 headers need this define in order to use long long definitions
            CPPFLAGS="-D_INCLUDE_LONGLONG $CPPFLAGS"
        fi
    ;;
    * )
        AC_CHECK_SIZEOF(long long, 0)
esac

dnl SGI/Irix's stdio.h does not include wchar_t. Mac OS X does not provide
dnl wchar.h and wchar_t is defined by stdlib.h (GD)
AC_CHECK_SIZEOF(wchar_t, 0,
    [
        /* DJGPP's wchar_t is now a keyword in C++ (still not C though) */
        #if defined(__DJGPP__) && !( (__GNUC_MINOR__ >= 8 && __GNUC__ == 2 ) || __GNUC__ >= 3 )
        #  error "fake wchar_t"
        #endif
        #ifdef HAVE_WCHAR_H
        #  ifdef __CYGWIN__
        #    include <stddef.h>
        #  endif
        #  include <wchar.h>
        #endif
        #ifdef HAVE_STDLIB_H
        #  include <stdlib.h>
        #endif
        #include <stdio.h>
    ]
)
if test "$ac_cv_sizeof_wchar_t" = 0; then
    AC_MSG_ERROR([wxWidgets requires wchar_t support.])
fi
AC_DEFINE(wxUSE_WCHAR_T)

dnl checks needed to define wxVaCopy
AC_CACHE_CHECK([for va_copy],
    wx_cv_func_va_copy,
    [
        AC_LANG_PUSH(C++)
        AC_LINK_IFELSE([
            AC_LANG_SOURCE([
                #include <stdarg.h>
                void foo(char *f, ...)
                {
                    va_list ap1, ap2;
                    va_start(ap1, f);
                    va_copy(ap2, ap1);
                    va_end(ap2);
                    va_end(ap1);
                }
                int main()
                {
                    foo("hi", 17);
                    return 0;
                }])
            ],
            wx_cv_func_va_copy=yes,
            wx_cv_func_va_copy=no
        )
        AC_LANG_POP()
    ]
)

if test $wx_cv_func_va_copy = "yes"; then
    AC_DEFINE(HAVE_VA_COPY)
else
    dnl try to understand how can we copy va_lists
    AC_CACHE_CHECK([if va_list can be copied by value],
        wx_cv_type_va_list_lvalue,
        [
            AC_RUN_IFELSE([
                AC_LANG_SOURCE([
                    #include <stdarg.h>
                    int foo(char *f, ...)
                    {
                        va_list ap1, ap2;
                        va_start(ap1, f);
                        ap2 = ap1;
                        if ( va_arg(ap1, int) != 17 || va_arg(ap2, int) != 17 )
                            return 1;
                        va_end(ap2);
                        va_end(ap1);
                        return 0;
                    }
                    int main()
                    {
                        return foo("hi", 17);
                    }])
                ],
                wx_cv_type_va_list_lvalue=yes,
                wx_cv_type_va_list_lvalue=no,
                dnl assume most common case for cross-compiling...
                wx_cv_type_va_list_lvalue=yes
            )
        ]
    )

    if test $wx_cv_type_va_list_lvalue != "yes"; then
        dnl we suppose that the only thing which can't be copied like this
        dnl are arrays... only experience will show whether this is really true
        AC_DEFINE(VA_LIST_IS_ARRAY)
    fi
fi

dnl don't check for vararg macros if they're explicitly disabled: this is
dnl useful if the user code using the library wants to limit itself to standard
dnl C++ only (e.g. is compiled with g++ -std=c++98)
if test "$wxUSE_VARARG_MACROS" = "yes"; then

dnl Check if variadic macros (C99 feature) are supported:
AC_CACHE_CHECK(
    [whether the compiler supports variadic macros],
    [wx_cv_have_variadic_macros],
    [
        dnl C compiler might support variadic macros when C++ one doesn't
        dnl (happens with gcc/g++ 2.95.4), so must use C++ one explicitly
        AC_LANG_PUSH(C++)
        AC_COMPILE_IFELSE([
            AC_LANG_PROGRAM(
                [
                    #include <stdio.h>
                    #define test(fmt, ...) printf(fmt, __VA_ARGS__)
                ],
                [
                    test("%s %d %p", "test", 1, 0);
                ]
            )],
            [wx_cv_have_variadic_macros=yes],
            [wx_cv_have_variadic_macros=no]
            )
        AC_LANG_POP()
    ]
)

if test $wx_cv_have_variadic_macros = "yes"; then
    AC_DEFINE(HAVE_VARIADIC_MACROS)
fi

else
    AC_DEFINE(wxNO_VARIADIC_MACROS)
fi dnl wxUSE_VARARG_MACROS == yes


dnl check for large file support
LARGEFILE_CPPFLAGS=
AC_SYS_LARGEFILE
if test "$ac_cv_sys_file_offset_bits" = "64"; then
    LARGEFILE_CPPFLAGS="-D_FILE_OFFSET_BITS=64"
elif test "$ac_cv_sys_large_files" = 1; then
    LARGEFILE_CPPFLAGS="-D_LARGE_FILES"
fi

dnl we need to define _FILE_OFFSET_BITS or _LARGE_FILES on the compiler command
dnl line because otherwise the system headers risk being included before
dnl wx/defs.h which defines these constants leading to inconsistent
dnl sizeof(off_t) in different source files of the same program and linking
dnl problems
if test -n "$LARGEFILE_CPPFLAGS"; then
    WXCONFIG_CPPFLAGS="$WXCONFIG_CPPFLAGS $LARGEFILE_CPPFLAGS"

    dnl We get "Large Files (ILP32) not supported in strict ANSI mode."
    dnl #error from HP standard headers unless __STDC_EXT__ is defined.
    dnl The compiler should define it automatically, but some old g++
    dnl versions don't define it, so test and add it if necessary. AFAIK
    dnl the problem only affects the C++ compiler so it is added to
    dnl CXXFLAGS only.
    if test "$USE_HPUX" = 1 -a "$GXX" = "yes"; then
        AC_CACHE_CHECK(
            [if -D__STDC_EXT__ is required],
            wx_cv_STDC_EXT_required,
            [
                AC_LANG_PUSH(C++)
                AC_TRY_COMPILE(
                    [],
                    [
                        #ifndef __STDC_EXT__
                            choke me
                        #endif
                    ],
                    wx_cv_STDC_EXT_required=no,
                    wx_cv_STDC_EXT_required=yes
                )
                AC_LANG_POP()
            ]
        )
        if test "x$wx_cv_STDC_EXT_required" = "xyes"; then
            WXCONFIG_CXXFLAGS="$WXCONFIG_CXXFLAGS -D__STDC_EXT__"
        fi
    fi
fi

dnl AC_FUNC_FSEEKO sets HAVE_FSEEKO and $ac_cv_sys_largefile_source
dnl
dnl it may be affected by large file flags (this happens under HP-UX 11 for
dnl example) so set them before using it and also use C++ to ensure that we get
dnl errors, not warnings, about the missing functions
AC_LANG_PUSH(C++)
old_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $LARGEFILE_CPPFLAGS"
AC_FUNC_FSEEKO
CPPFLAGS="$old_CPPFLAGS"
AC_LANG_POP()
if test "$ac_cv_sys_largefile_source" != no; then
    WXCONFIG_CPPFLAGS="$WXCONFIG_CPPFLAGS -D_LARGEFILE_SOURCE=$ac_cv_sys_largefile_source"
fi

dnl check for bytesex stuff (don't use AC_C_BIGENDIAN to allow cross-compiling)
WX_C_BIGENDIAN

dnl With Sun CC, temporaries have block scope by default. This flag is needed
dnl to get the expression scope behaviour that conforms to the standard.
if test "x$SUNCXX" = xyes; then
    CXXFLAGS="-features=tmplife $GNU_SOURCE_FLAG $CXXFLAGS"
fi

dnl Sun X11 headers are (still, in 2005!) non-ANSI and the best they could do
dnl was to hack their C++ compiler to accept them silently -- but C compiler
dnl still spits out dozens of warnings for each X include file, so suppress
dnl them
if test "x$SUNCC" = xyes; then
    CFLAGS="-erroff=E_NO_EXPLICIT_TYPE_GIVEN $CFLAGS"
fi

dnl SGI mipsPro compiler version 7.4.4 and later (and maybe some earlier
dnl versions too but it's known that 7.4.2 doesn't give this warning but does
dnl instead warn about "unknown warning number 3970" which explains that we
dnl don't want to do this for it) gives this warning for "conversion from
dnl pointer to same-sized integral type" even when there is an explicit cast
dnl and as there is no way to turn it off and there are hundreds of these
dnl warnings in wx sources, just turn it off for now
dnl
dnl a better long term solution would be to use #pragma set/reset woff in
dnl wxPtrToUInt() and use it instead of casts elsewhere
if test "x$SGICC" = "xyes"; then
    AC_CACHE_CHECK([if cc version is 7.4.4 or greater],
        wx_cv_prog_sgicc744,
        [
            AC_TRY_COMPILE([],
                [
                    #if _SGI_COMPILER_VERSION >= 744
                    chock me: mipsPro is 7.4.4 or later
                    #endif
                ],
                wx_cv_prog_sgicc744=no,
                wx_cv_prog_sgicc744=yes
            )
        ]
    )

    if test "x$wx_cv_prog_sgicc744" = "xyes"; then
        CFLAGS="-woff 3970 $CFLAGS"
    fi
fi
if test "x$SGICXX" = "xyes"; then
    AC_CACHE_CHECK([if CC version is 7.4.4 or greater],
        wx_cv_prog_sgicxx744,
        [
            AC_LANG_PUSH(C++)
            AC_TRY_COMPILE([],
                [
                    #if _SGI_COMPILER_VERSION >= 744
                    chock me: mipsPro is 7.4.4 or later
                    #endif
                ],
                wx_cv_prog_sgicxx744=no,
                wx_cv_prog_sgicxx744=yes
            )
            AC_LANG_POP()
        ]
    )

    if test "x$wx_cv_prog_sgicxx744" = "xyes"; then
        CXXFLAGS="-woff 3970 $CXXFLAGS"
    fi
fi

dnl HP-UX c89/aCC compiler warnings
if test "x$HPCC" = "xyes"; then
    dnl 2011: "unrecognized preprocessor directive": nice warning but it's given
    dnl       even for directives inside #if which is not true (i.e. which are
    dnl       used for other compilers/OS) and so we have no way to get rid of it
    dnl 2450: "long long is non standard" -- yes, we know
    CFLAGS="+W 2011,2450 $CFLAGS"
fi
if test "x$HPCXX" = "xyes"; then
    dnl 2340: "value copied to temporary, reference to temporary used": very
    dnl       painful as triggered by any occurrence of user-defined conversion
    dnl 4232: "conversion from 'Foo *' to a more strictly aligned type 'Bar *'
    dnl       may cause misaligned access": this might indicate a real problem
    dnl       but any use of GTK+ cast macros results in it so it's unusable
    dnl       for wxGTK code
    CXXFLAGS="+W 2340,4232 $CXXFLAGS"
fi

dnl DEC/Compaq/HP cxx warnings
if test "x$COMPAQCXX" = "xyes"; then
    dnl -w0 enables all warnings, then we disable some of them:
    dnl basclsnondto: base class dtor non virtual (sometimes we do want this)
    dnl unrimpret:  "end of routine block may be unreachable" is given for
    dnl             every "if ( ) return ...; else return ...;"
    dnl intconlosbit: "conversion to integral type of smaller size could lose
    dnl               data" this is a useful warning but there are too many of
    dnl               them for now
    CXXFLAGS="-w0 -msg_disable basclsnondto,unrimpret,intconlosbit"
fi

dnl The checks below are for ancient compilers and are unnecessary when using
dnl C++11, but we still need to define the symbols that would have been defined
dnl by them if we did run them.
if test "$HAVE_CXX11" = "1" ; then

AC_DEFINE(HAVE_STD_WSTRING)
AC_DEFINE(HAVE_STD_STRING_COMPARE)
AC_DEFINE(HAVE_STD_UNORDERED_MAP)
AC_DEFINE(HAVE_STD_UNORDERED_SET)
AC_DEFINE(HAVE_TYPE_TRAITS)

else dnl Not using C++11, so we do need to run the checks.

dnl check for iostream (as opposed to iostream.h) standard header
WX_CPP_NEW_HEADERS(, AC_DEFINE(wxUSE_IOSTREAMH))

dnl the next few tests are all for C++ features and so need to be done using
dnl C++ compiler
AC_LANG_PUSH(C++)

dnl check for std::string or std::wstring
if test "$wxUSE_STD_STRING" = "yes" -o "$wxUSE_STL" = "yes"; then
    if test "$wxUSE_UNICODE" = "yes"; then
        std_string="std::wstring"
        char_type="wchar_t"
    else
        std_string="std::string"
        char_type="char"
    fi

    dnl check if <string> declares std::[w]string
    AC_CACHE_CHECK([for $std_string in <string>],
        wx_cv_class_stdstring,
        [
            AC_TRY_COMPILE([#include <string>],
                [$std_string foo;],
                wx_cv_class_stdstring=yes,
                wx_cv_class_stdstring=no
            )
        ]
    )

    if test "$wx_cv_class_stdstring" = yes; then
        if test "$wxUSE_UNICODE" = "yes"; then
            AC_DEFINE(HAVE_STD_WSTRING)
        fi
        dnl we don't need HAVE_STD_STRING, we just suppose it's available if
        dnl wxUSE_STD_STRING==yes
    else
        AC_CACHE_CHECK([if std::basic_string<$char_type> works],
            wx_cv_class_stdbasicstring,
            [
                AC_TRY_COMPILE([
                    #ifdef HAVE_WCHAR_H
                    #  ifdef __CYGWIN__
                    #    include <stddef.h>
                    #  endif
                    #  include <wchar.h>
                    #endif
                    #ifdef HAVE_STDLIB_H
                    #  include <stdlib.h>
                    #endif
                    #include <stdio.h>
                    #include <string>
                    ],
                    [std::basic_string<$char_type> foo;
                     const $char_type* dummy = foo.c_str();],
                    wx_cv_class_stdbasicstring=yes,
                    wx_cv_class_stdbasicstring=no
                )
            ]
        )

        if test "$wx_cv_class_stdbasicstring" != yes; then
            if test "$wxUSE_STL" = "yes"; then
                AC_MSG_ERROR([Can't use --enable-stl without $std_string or std::basic_string<$char_type>])
            elif test "$wxUSE_STD_STRING" = "yes"; then
                AC_MSG_ERROR([Can't use --enable-std_string without $std_string or std::basic_string<$char_type>])
            else
                AC_MSG_WARN([No $std_string or std::basic_string<$char_type>, switching to --disable-std_string])
                wxUSE_STD_STRING=no
            fi
        fi
    fi
fi

if test "$wxUSE_STD_IOSTREAM" = "yes"; then
    AC_CHECK_TYPES([std::istream, std::ostream],,
                   [wxUSE_STD_IOSTREAM=no],
                   [#include <iostream>])

    if test "$wxUSE_STD_IOSTREAM" != "yes"; then
        if test "$wxUSE_STD_IOSTREAM" = "yes"; then
            AC_MSG_ERROR([Can't use --enable-std_iostreams without std::istream and std::ostream])
        else
            AC_MSG_WARN([No std::iostreams, switching to --disable-std_iostreams])
        fi
    fi
fi

if test "$wxUSE_STL" = "yes"; then
    dnl check for basic STL functionality
    AC_CACHE_CHECK([for basic STL functionality],
        wx_cv_lib_stl,
        [AC_TRY_COMPILE([#include <string>
            #include <functional>
            #include <algorithm>
            #include <vector>
            #include <list>],
            [std::vector<int> moo;
             std::list<int> foo;
             std::vector<int>::iterator it =
                 std::find_if(moo.begin(), moo.end(),
                              std::bind2nd(std::less<int>(), 3));],
            wx_cv_lib_stl=yes,
            wx_cv_lib_stl=no
        )]
    )

    if test "$wx_cv_lib_stl" != yes; then
         AC_MSG_ERROR([Can't use --enable-stl as basic STL functionality is missing])
    fi

    dnl check for compliant std::string::compare
    AC_CACHE_CHECK([for compliant std::string::compare],
        wx_cv_func_stdstring_compare,
        [AC_TRY_COMPILE([#include <string>],
            [std::string foo, bar;
            foo.compare(bar);
            foo.compare(1, 1, bar);
            foo.compare(1, 1, bar, 1, 1);
            foo.compare("");
            foo.compare(1, 1, "");
            foo.compare(1, 1, "", 2);],
            wx_cv_func_stdstring_compare=yes,
            wx_cv_func_stdstring_compare=no
        )]
    )

    if test "$wx_cv_func_stdstring_compare" = yes; then
        AC_DEFINE(HAVE_STD_STRING_COMPARE)
    fi

    if test "$wx_cv_class_gnuhashmapset" = yes; then
         AC_DEFINE(HAVE_EXT_HASH_MAP)
         AC_DEFINE(HAVE_GNU_CXX_HASH_MAP)
    fi

    AC_CHECK_HEADER([unordered_map],
        [AC_CACHE_CHECK([for unordered_map and unordered_set in std],
            wx_cv_class_stdunorderedmapset,
            [AC_TRY_COMPILE([#include <unordered_map>
                #include <unordered_set>],
                [std::unordered_map<double*, char*> test1;
                 std::unordered_set<char*> test2;],
                wx_cv_class_stdunorderedmapset=yes,
                wx_cv_class_stdunorderedmapset=no)
            ]
        )],
        [],
        [ ]
    )

    if test "$wx_cv_class_stdunorderedmapset" = yes; then
         AC_DEFINE(HAVE_STD_UNORDERED_MAP)
         AC_DEFINE(HAVE_STD_UNORDERED_SET)
    else
        AC_CHECK_HEADER([tr1/unordered_map],
            [AC_CACHE_CHECK([for unordered_map and unordered_set in std::tr1],
                wx_cv_class_tr1unorderedmapset,
                [AC_TRY_COMPILE([#include <tr1/unordered_map>
                    #include <tr1/unordered_set>],
                    [std::tr1::unordered_map<double*, char*> test1;
                     std::tr1::unordered_set<char*> test2;
            #if defined(__GNUC__) && (__GNUC__==4) && (__GNUC_MINOR__<2)
            #error can't use unordered_{map,set} with gcc-4.[01]: http://gcc.gnu.org/PR24389
            #endif],
                    wx_cv_class_tr1unorderedmapset=yes,
                    wx_cv_class_tr1unorderedmapset=no)
                ]
            )],
            [],
            [ ]
        )

        if test "$wx_cv_class_tr1unorderedmapset" = yes; then
            AC_DEFINE(HAVE_TR1_UNORDERED_MAP)
            AC_DEFINE(HAVE_TR1_UNORDERED_SET)
        else
            dnl check for hash_map and hash_set headers
            AC_CHECK_HEADER([hash_map],
                [AC_CACHE_CHECK([for std::hash_map and hash_set],
                    wx_cv_class_stdhashmapset,
                    [AC_TRY_COMPILE([#include <hash_map>
                        #include <hash_set>],
                        [std::hash_map<double*, char*, std::hash<double*>, std::equal_to<double*> > test1;
                         std::hash_set<char*, std::hash<char*>, std::equal_to<char*> > test2;],
                        wx_cv_class_stdhashmapset=yes,
                        wx_cv_class_stdhashmapset=no)
                    ]
                )],
                [],
                [ ]
            )

            if test "$wx_cv_class_stdhashmapset" = yes; then
                AC_DEFINE(HAVE_HASH_MAP)
                AC_DEFINE(HAVE_STD_HASH_MAP)
            fi

            AC_CHECK_HEADER([ext/hash_map],
                [AC_CACHE_CHECK([for GNU hash_map and hash_set],
                    wx_cv_class_gnuhashmapset,
                    [AC_TRY_COMPILE([#include <ext/hash_map>
                        #include <ext/hash_set>],
                        [__gnu_cxx::hash_map<double*, char*, __gnu_cxx::hash<double*>, std::equal_to<double*> > test1;
                         __gnu_cxx::hash_set<char*, __gnu_cxx::hash<char*>, std::equal_to<char*> > test2;],
                        wx_cv_class_gnuhashmapset=yes,
                        wx_cv_class_gnuhashmapset=no)
                    ]
                )],
                [],
                [ ]
            )

        fi
    fi
fi

AC_CHECK_HEADERS([type_traits tr1/type_traits], break, [], [AC_INCLUDES_DEFAULT()])

fi dnl End of pre-C++11 only checks section

dnl check for atomic operations builtins for wx/atomic.h:
WX_ATOMIC_BUILTINS

dnl pop C++
AC_LANG_POP()

dnl ---------------------------------------------------------------------------
dnl Define search path for includes and libraries: all headers and libs will be
dnl looked for in all directories of this path
dnl ---------------------------------------------------------------------------

dnl Notice that /usr/include should *not* be in this list, otherwise it breaks
dnl compilation on Solaris/AIX/... with gcc because standard (non ANSI C)
dnl headers are included instead of the "fixed" (ANSI-fied) gcc ones.
dnl
dnl Also try to put all directories which may contain X11R6 before those which
dnl may contain X11R5/4 - we want to use R6 on machines which have both!
dnl
dnl In the same vein. Motif 2.1 should be tried before Motif 1.2 for the
dnl systems which have both (AIX 4.x does)
SEARCH_INCLUDE="\
    /usr/local/include        \
    /usr/local/X11/include    \
    /usr/local/include/X11    \
    /usr/local/X11R7/include  \
    /usr/local/X11R6/include  \
    /usr/local/include/X11R7  \
    /usr/local/include/X11R6  \
                              \
    /usr/Motif-2.1/include    \
    /usr/Motif-1.2/include    \
    /usr/include/Motif1.2     \
                              \
    /usr/dt/include           \
    /usr/openwin/include      \
                              \
    /usr/include/Xm           \
                              \
    /usr/X11R7/include        \
    /usr/X11R6/include        \
    /usr/X11R6.4/include      \
                              \
    /usr/include/X11R7        \
    /usr/include/X11R6        \
                              \
    /usr/X11/include          \
    /usr/include/X11          \
                              \
    /usr/XFree86/include/X11  \
    /usr/pkg/include          \
                              \
    /usr/local/X1R5/include  \
    /usr/local/include/X11R5  \
    /usr/X11R5/include        \
    /usr/include/X11R5        \
                              \
    /usr/local/X11R4/include  \
    /usr/local/include/X11R4  \
    /usr/X11R4/include        \
    /usr/include/X11R4        \
                              \
    /usr/openwin/share/include"

dnl try to find out the standard lib locations for the systems with multiple
dnl ABIs
AC_MSG_CHECKING([for libraries directories])

case "${host}" in
    *-*-irix6* )
        AC_CACHE_VAL(
            wx_cv_std_libpath,
            [
                for d in WX_STD_LIBPATH(); do
                    for e in a so sl dylib dll.a; do
                        libc="$d/libc.$e"
                        if test -f $libc; then
                            save_LIBS="$LIBS"
                            LIBS="$libc"
                            AC_LINK_IFELSE([
                                    AC_LANG_SOURCE([int main() { return 0; }])
                                ],
                                wx_cv_std_libpath=`echo $d | sed s@/usr/@@`)
                            LIBS="$save_LIBS"
                            if test "x$wx_cv_std_libpath" != "x"; then
                                break 2
                            fi
                        fi
                    done
                done
            ]
        )
        ;;

    *-*-solaris2* )
        dnl use ../lib or ../lib/64 depending on the size of void*
        if test "$ac_cv_sizeof_void_p" = 8 -a -d "/usr/lib/64"; then
            wx_cv_std_libpath="lib/64"
        fi
        ;;

    *-*-linux* )
        dnl Recent Debian versions (as of 2011) use new approach to multiarch
        dnl and put the libraries under /usr/lib/arch-linux-gnu. Annoyingly,
        dnl "arch" here is not `uname -m` because it is "i386" even when uname
        dnl returns e.g. "i686". So we need to test for it explicitly.
        if test "$ac_cv_sizeof_void_p" = 8; then
            if test -d "/usr/lib/`uname -m`-linux-gnu"; then
                wx_cv_std_libfullpath="/usr/lib/`uname -m`-linux-gnu"
            elif test -d "/usr/lib64" -a ! -h "/usr/lib64"; then
                wx_cv_std_libpath="lib64"
            fi
        else
            case "${host}" in
                i*86-*-linux* )
                    if test -d '/usr/lib/i386-linux-gnu'; then
                        wx_cv_std_libfullpath='/usr/lib/i386-linux-gnu'
                    fi
            esac
        fi

        dnl And on top of all this, some packages haven't been updated for
        dnl full multiarch support yet so we still need to look in /usr/lib
        dnl too as well.
        if test -n "$wx_cv_std_libfullpath" -a -d "/usr/lib"; then
            wx_cv_std_libfullpath="$wx_cv_std_libfullpath /usr/lib"
        fi
        ;;
esac

if test -z "$wx_cv_std_libpath"; then
    wx_cv_std_libpath="lib"
fi

if test -z "$wx_cv_std_libfullpath"; then
    wx_cv_std_libfullpath="/usr/$wx_cv_std_libpath"
fi


AC_MSG_RESULT($wx_cv_std_libfullpath)

SEARCH_LIB="`echo "$SEARCH_INCLUDE" | sed s@include@$wx_cv_std_libpath@g` $wx_cv_std_libfullpath"

dnl Cross compiling with gcc?
if test "$build" != "$host" -a "$GCC" = yes; then
    dnl for gcc cross-compilers "$CC -print-prog-name=ld" prints the path to
    dnl the linker. Stripping off the trailing '/bin/ld' gives us a candiate
    dnl for a 'root' below which libraries and headers for the target system
    dnl might be installed.
    if cross_root=`$CC -print-prog-name=ld 2>/dev/null`; then
        cross_root=`dirname $cross_root`
        cross_root=`dirname $cross_root`

        dnl substitute this candiate root for '^/usr' in the search lists,
        dnl strip out any that don't start '^/usr'.
        SEARCH_LIB=`for x in $SEARCH_LIB; do echo $x; done | sed -ne "s|^/usr|$cross_root|p"`
        SEARCH_INCLUDE=`for x in $SEARCH_INCLUDE; do echo $x; done | sed -ne "s|^/usr|$cross_root|p"`
        SEARCH_INCLUDE="$SEARCH_INCLUDE $cross_root/include"

        dnl also have pkg-config search for *.pc files under this 'root'
        if test -z "$PKG_CONFIG_PATH"; then
            PKG_CONFIG_PATH="$cross_root/local/lib/pkgconfig:$cross_root/lib/pkgconfig"
            export PKG_CONFIG_PATH
        fi

        dnl AC_PATH_XTRA doesn't work currently unless -x-includes and
        dnl -x-libraries are given on the command line. So if they are not
        dnl set then set them here to plausible defaults.
        if test -z "$x_includes" -o "$x_includes" = NONE; then
            WX_PATH_FIND_INCLUDES($SEARCH_INCLUDE, X11/Intrinsic.h)
            x_includes=$ac_find_includes
        fi
        if test -z "$x_libraries" -o "$x_libraries" = NONE; then
            WX_PATH_FIND_LIBRARIES(Xt)
            x_libraries=$ac_find_libraries
        fi
    fi
fi

dnl ------------------------------------------------------------------------
dnl Check for libraries
dnl ------------------------------------------------------------------------

dnl flush the cache because checking for libraries below might abort
AC_CACHE_SAVE

dnl Only add the -lm library if floating point functions cannot be used
dnl without it.  This check is important on cygwin because of the bizarre
dnl way that they have organized functions into libraries.  On cygwin, both
dnl libc.a and libm.a are symbolic links to a single lib libcygwin.a.  This
dnl means that
dnl   1) linking with -lm is not necessary, and
dnl   2) linking with -lm is dangerous if the order of libraries is wrong
dnl In particular, if you compile any program with -mno-cygwin and link with
dnl -lm, it will crash instantly when it is run.  This happens because the
dnl linker incorrectly links the Cygwin libm.a (==libcygwin.a), which replaces
dnl the ___main function instead of allowing it to be defined by
dnl /usr/lib/mingw/libmingw32.a as it should be.
dnl
dnl On MacOS X, this test will find that -lm is unnecessary and leave it out.
dnl
dnl Just check a few floating point functions. If they are all found without
dnl -lm, then we must not need -lm.
have_cos=0
have_floor=0
AC_CHECK_FUNCS(cos, have_cos=1)
AC_CHECK_FUNCS(floor, have_floor=1)
AC_MSG_CHECKING(if floating point functions link without -lm)
if test "$have_cos" = 1 -a "$have_floor" = 1; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
    save_LIBS="$LIBS"
    LIBS="$LIBS -lm"
    dnl use different functions to avoid configure caching
    have_sin=0
    have_ceil=0
    AC_CHECK_FUNCS(sin, have_sin=1)
    AC_CHECK_FUNCS(ceil, have_ceil=1)
    AC_MSG_CHECKING(if floating point functions link with -lm)
    if test "$have_sin" = 1 -a "$have_ceil" = 1; then
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
        dnl not sure we should warn the user, crash, etc. but don't link with
        dnl -lm it might result in failure of the subsequent tests too
        LIBS="$save_LIBS"
    fi
fi

if test "$HAVE_CXX11" != "1" ; then

dnl check for C99 string to long long conversion functions, assume that if we
dnl have the unsigned variants, then we have the signed ones as well
dnl
dnl at least under SGI these functions are only available in C99 code and not
dnl in C++ so do these tests using C++ compiler
AC_LANG_PUSH(C++)
if test "wxUSE_UNICODE" = "yes"; then
    WX_CHECK_FUNCS(wcstoull)
else
    WX_CHECK_FUNCS(strtoull)
fi
AC_LANG_POP()

fi dnl End of pre-C++11 only checks section

dnl Find pkg-config outside of any conditional.  Done before any PKG_* call.
PKG_PROG_PKG_CONFIG

dnl ---------------------------------------------------------------------------
dnl Optional libraries
dnl
dnl   --with-<lib>=sys
dnl       looks for system library and fails if not found
dnl
dnl   --with-<lib>
dnl   --with-<lib>=yes
dnl       looks for system library and, if not found, prints a warning,
dnl       falls back to the builtin wx version, and continues configuration
dnl
dnl   --with-<lib>=builtin
dnl       uses builtin wx version without searching for system library
dnl
dnl   --with-<lib>=no
dnl   --without-<lib>
dnl       do not use library (neither system nor builtin wx version)
dnl
dnl ---------------------------------------------------------------------------

dnl ------------------------------------------------------------------------
dnl Check for regex libraries
dnl ------------------------------------------------------------------------

if test "$wxUSE_REGEX" != "no"; then
    AC_DEFINE(wxUSE_REGEX)

    if test "$wxUSE_UNICODE" = "yes" -a "$wxUSE_REGEX" = "yes"; then
        AC_MSG_WARN([Defaulting to the builtin regex library for Unicode build.])
        wxUSE_REGEX=builtin
    fi

    if test "$wxUSE_REGEX" = "sys" -o "$wxUSE_REGEX" = "yes" ; then
        dnl according to Unix 98 specs, regcomp() is in libc but I believe that
        dnl on some old systems it may be in libregex - check for it too?
        AC_CHECK_HEADER(regex.h, [AC_CHECK_FUNCS(regcomp re_search)],, [ ])

        if test "x$ac_cv_func_regcomp" != "xyes"; then
            if test "$wxUSE_REGEX" = "sys" ; then
                AC_MSG_ERROR([system regex library not found! Use --with-regex to use built-in version])
            else
                AC_MSG_WARN([system regex library not found, will use built-in instead])
                wxUSE_REGEX=builtin
            fi
        else
            dnl we are using the system library
            wxUSE_REGEX=sys
            dnl only the built-in supports advanced REs
            AC_DEFINE(WX_NO_REGEX_ADVANCED)
        fi
    fi
fi

dnl ------------------------------------------------------------------------
dnl Check for zlib compression library
dnl ------------------------------------------------------------------------

ZLIB_LINK=
if test "$wxUSE_ZLIB" != "no" ; then
    AC_DEFINE(wxUSE_ZLIB)

    if test "$wxUSE_ZLIB" = "sys" -o "$wxUSE_ZLIB" = "yes" ; then
        dnl we have troubles with ancient zlib versions (e.g. 1.0.4 is
        dnl known to not work) and although I don't know which is
        dnl the minimal required version it's safer to test for 1.1.4 as
        dnl it fixes a security problem in 1.1.3 -- and hopefully nobody
        dnl has anything more ancient (1.1.3 was released in July 1998)
        dnl anyhow
        AC_CACHE_CHECK([for zlib.h >= 1.1.4], ac_cv_header_zlib_h,
            [AC_TRY_RUN(
                dnl zlib.h defines ZLIB_VERSION="x.y.z"
                [
                    #include <zlib.h>
                    #include <stdio.h>

                    int main()
                    {
                        FILE *f=fopen("conftestval", "w");
                        if (!f) exit(1);
                        fprintf(f, "%s",
                                ZLIB_VERSION[0] == '1' &&
                                (ZLIB_VERSION[2] > '1' ||
                                (ZLIB_VERSION[2] == '1' &&
                                 ZLIB_VERSION[4] >= '4')) ? "yes" : "no");
                        exit(0);
                    }
                ],
                ac_cv_header_zlib_h=`cat conftestval`,
                ac_cv_header_zlib_h=no,
                dnl cross-compiling: don't have an answer, try later
                unset ac_cv_header_zlib_h
            )]
        )
        dnl If the test above did not come up with a value (e.g. cross
        dnl compiling) then this should give a definitive answer
        AC_CHECK_HEADER(zlib.h,,, [ ])

        if test "$ac_cv_header_zlib_h" = "yes"; then
            AC_CHECK_LIB(z, deflate, ZLIB_LINK=" -lz")
        fi

        if test "x$ZLIB_LINK" = "x" ; then
            if test "$wxUSE_ZLIB" = "sys" ; then
                AC_MSG_ERROR([zlib library not found or too old! Use --with-zlib=builtin to use built-in version])
            else
                AC_MSG_WARN([zlib library not found or too old, will use built-in instead])
                wxUSE_ZLIB=builtin
            fi
        else
            dnl we are using the system library
            wxUSE_ZLIB=sys
        fi
    fi
fi

dnl ------------------------------------------------------------------------
dnl Check for png library
dnl ------------------------------------------------------------------------

PNG_LINK=
if test "$wxUSE_LIBPNG" != "no" ; then
    AC_DEFINE(wxUSE_LIBPNG)

    dnl for the check below to have a chance to succeed, we must already have
    dnl libz somewhere
    if test "$wxUSE_LIBPNG" = "sys" -a "$wxUSE_ZLIB" != "sys" ; then
        AC_MSG_WARN([system png library doesn't work without system zlib, will use built-in instead])
        wxUSE_LIBPNG=builtin
    fi

    if test "$wxUSE_LIBPNG" = "sys" -o "$wxUSE_LIBPNG" = "yes" ; then
        dnl libpng version 0.9 is known to not work, if an even newer
        dnl version is required, just bump it up in the test below
        AC_CACHE_CHECK([for png.h > 0.90], ac_cv_header_png_h,
            [AC_TRY_RUN(
                dnl png.h defines PNG_LIBPNG_VER=number
                [
                    #include <png.h>
                    #include <stdio.h>

                    int main()
                    {
                        FILE *f=fopen("conftestval", "w");
                        if (!f) exit(1);
                        fprintf(f, "%s",
                                 PNG_LIBPNG_VER > 90 ? "yes" : "no");
                        exit(0);
                    }
                ],
                ac_cv_header_png_h=`cat conftestval`,
                ac_cv_header_png_h=no,
                dnl cross-compiling: test (later) if we have any png.h
                unset ac_cv_header_png_h
            )]
        )
        AC_CHECK_HEADER(png.h,,, [ ])

        if test "$ac_cv_header_png_h" = "yes"; then
            AC_CHECK_LIB(png, png_sig_cmp, PNG_LINK=" -lpng -lz", , [-lz -lm])
        fi

        if test "x$PNG_LINK" = "x" ; then
            if test "$wxUSE_LIBPNG" = "sys" ; then
                AC_MSG_ERROR([system png library not found or too old! Use --with-libpng=builtin to use built-in version])
            else
                AC_MSG_WARN([system png library not found or too old, will use built-in instead])
                wxUSE_LIBPNG=builtin
            fi
        else
            dnl we are using the system library
            wxUSE_LIBPNG=sys
        fi
    fi
fi

dnl ------------------------------------------------------------------------
dnl Check for jpeg library
dnl ------------------------------------------------------------------------

dnl this check must be done before the check for libtiff as libtiff uses
dnl libjpeg itself
JPEG_LINK=
if test "$wxUSE_LIBJPEG" != "no" ; then
    AC_DEFINE(wxUSE_LIBJPEG)

    if test "$wxUSE_LIBJPEG" = "sys" -o "$wxUSE_LIBJPEG" = "yes" ; then
        dnl can't use AC_CHECK_HEADER as jconfig.h defines things like
        dnl HAVE_STDLIB_H which are already defined and this provokes
        dnl a compiler warning which configure considers as an error...
        AC_MSG_CHECKING(for jpeglib.h)
        AC_CACHE_VAL(ac_cv_header_jpeglib_h,
            AC_TRY_COMPILE(
                [
                    #undef HAVE_STDLIB_H
                    #include <stdio.h>
                    #include <jpeglib.h>
                ],
                [
                ],
                ac_cv_header_jpeglib_h=yes,
                ac_cv_header_jpeglib_h=no
            )
        )
        AC_MSG_RESULT($ac_cv_header_jpeglib_h)

        if test "$ac_cv_header_jpeglib_h" = "yes"; then
            AC_CHECK_LIB(jpeg, jpeg_read_header, JPEG_LINK=" -ljpeg")
        fi

        if test "x$JPEG_LINK" = "x" ; then
            if test "$wxUSE_LIBJPEG" = "sys" ; then
                AC_MSG_ERROR([system jpeg library not found! Use --with-libjpeg=builtin to use built-in version])
            else
                AC_MSG_WARN([system jpeg library not found, will use built-in instead])
                wxUSE_LIBJPEG=builtin
            fi
        else
            dnl we are using the system library
            wxUSE_LIBJPEG=sys

            if test "$wxUSE_MSW" = 1; then
                dnl boolean is defined by the jpeg headers and also by the
                dnl Windows headers of some compilers. This type has been
                dnl renamed in the builtin, so it is only an issue when
                dnl using an external jpeg lib on Windows.
                AC_CHECK_TYPES(
                    [boolean],
                    [
                        AC_CHECK_SIZEOF(
                            [boolean],
                            [],
                            [
                                #undef HAVE_BOOLEAN
                                #include <stdio.h>
                                #include <jpeglib.h>
                            ])
                        AC_DEFINE_UNQUOTED(
                            [wxHACK_BOOLEAN],
                            [wxInt`expr 8 \* $ac_cv_sizeof_boolean`])
                    ],
                    [],
                    [#include <windows.h>])
            fi
        fi
    fi
fi

dnl ------------------------------------------------------------------------
dnl Check for lzma library
dnl ------------------------------------------------------------------------

if test "$wxUSE_LIBLZMA" != "no"; then
    AC_CHECK_HEADER(lzma.h,,,[])

    if test "$ac_cv_header_lzma_h" = "yes"; then
        AC_CHECK_LIB(lzma, lzma_code,
            [
                LZMA_LINK="-llzma"
                LIBS="$LZMA_LINK $LIBS"
                AC_DEFINE(wxUSE_LIBLZMA)
            ])
    fi

    if test -z "$LZMA_LINK"; then
        wxUSE_LIBLZMA=no
    fi
fi

dnl We need to disable the use of lzma in built-in libtiff explicitly, as
dnl otherwise we'd depend on the system lzma library, which is typically
dnl undesirable when using builtin libraries. We also disable the use of lzma
dnl if it's not available anyhow, just to speed up libtiff configure a little.
if test "$HAVE_LZMA" = "no" -o "$wxUSE_LIBTIFF" = "builtin"; then
    ac_configure_args="$ac_configure_args --disable-lzma"
fi

dnl ------------------------------------------------------------------------
dnl Check for jbig library
dnl ------------------------------------------------------------------------

JBIG_LINK=
if test "$wxUSE_LIBJBIG" = "yes"; then
    AC_CHECK_LIB(jbig, jbg_dec_init, JBIG_LINK=" -ljbig")
else
    ac_configure_args="$ac_configure_args --disable-jbig"
fi

dnl ------------------------------------------------------------------------
dnl Check for tiff library
dnl ------------------------------------------------------------------------

TIFF_LINK=
TIFF_PREREQ_LINKS=-lm
if test "$wxUSE_LIBTIFF" != "no" ; then
    AC_DEFINE(wxUSE_LIBTIFF)

    if test "$wxUSE_LIBTIFF" = "sys" -o "$wxUSE_LIBTIFF" = "yes" ; then
        dnl libtiff may depend on libjpeg and libz so use them in the test
        dnl below or it would fail
        if test "$wxUSE_LIBJPEG" = "sys"; then
            TIFF_PREREQ_LINKS="$TIFF_PREREQ_LINKS $JPEG_LINK"
        fi
        if test "$wxUSE_ZLIB" = "sys"; then
            TIFF_PREREQ_LINKS="$TIFF_PREREQ_LINKS $ZLIB_LINK"
        fi
        if test -n "$LZMA_LINK"; then
            TIFF_PREREQ_LINKS="$TIFF_PREREQ_LINKS $LZMA_LINK"
        fi
        if test "$wxUSE_LIBJBIG" = "yes"; then
            TIFF_PREREQ_LINKS="$TIFF_PREREQ_LINKS $JBIG_LINK"
        fi
        AC_CHECK_HEADER(tiffio.h,
                        [
                            AC_CHECK_LIB(tiff, TIFFError,
                                         TIFF_LINK=" -ltiff",
                                         ,
                                         $TIFF_PREREQ_LINKS)
                        ],
                        [],
                        [ ]
                       )

        if test "x$TIFF_LINK" = "x" ; then
            if test "$wxUSE_LIBTIFF" = "sys" ; then
                AC_MSG_ERROR([system tiff library not found! Use --with-libtiff=builtin to use built-in version])
            else
                AC_MSG_WARN([system tiff library not found, will use built-in instead])
                wxUSE_LIBTIFF=builtin
            fi
        else
            dnl we are using the system library
            wxUSE_LIBTIFF=sys
        fi
    fi
    if test "$wxUSE_LIBTIFF" = "builtin" ; then
        if test "$wxUSE_LIBJPEG" = "no"; then
            dnl we have to prevent the builtin libtiff configure from building the
            dnl library with JPEG support as this was explicitly disabled by user,
            dnl but unfortunately it needs --disable-jpeg and not --without-libjpeg
            dnl (which will be passed to it anyhow as configure passes arguments to
            dnl the top-level script to all the other ones called recursively), so
            dnl we need to hack around this
            ac_configure_args="$ac_configure_args --disable-jpeg"
        fi
        AC_CONFIG_SUBDIRS([src/tiff])
    fi
fi

dnl ------------------------------------------------------------------------
dnl Check for expat libraries
dnl ------------------------------------------------------------------------

if test "$wxUSE_EXPAT" != "no"; then
    wxUSE_XML=yes
    AC_DEFINE(wxUSE_EXPAT)
    AC_DEFINE(wxUSE_XML)

    if test "$wxUSE_EXPAT" = "sys" -o "$wxUSE_EXPAT" = "yes" ; then
        AC_CHECK_HEADER([expat.h], [found_expat_h=1],, [ ])
        if test "x$found_expat_h" = "x1"; then
            dnl Expat 1.95.6 comes with broken expat.h:
            AC_CACHE_CHECK([if expat.h is valid C++ header],
                wx_cv_expat_is_not_broken,
                [
                AC_LANG_PUSH(C++)
                AC_TRY_COMPILE([#include <expat.h>],[],
                    wx_cv_expat_is_not_broken=yes,
                    wx_cv_expat_is_not_broken=no
                )
                AC_LANG_POP()
                ]
            )
            if test "$wx_cv_expat_is_not_broken" = "yes" ; then
                AC_CHECK_LIB(expat, XML_ParserCreate, EXPAT_LINK=" -lexpat")
            fi
        fi
        if test "x$EXPAT_LINK" = "x" ; then
            if test "$wxUSE_EXPAT" = "sys" ; then
                AC_MSG_ERROR([system expat library not found! Use --with-expat=builtin to use built-in version])
            else
                AC_MSG_WARN([system expat library not found, will use built-in instead])
                wxUSE_EXPAT=builtin
            fi
        else
            dnl we are using the system library
            wxUSE_EXPAT=sys
        fi
    fi
    if test "$wxUSE_EXPAT" = "builtin" ; then
        dnl Expat needs this:
        AC_CONFIG_SUBDIRS([src/expat/expat])
    fi
fi


dnl ------------------------------------------------------------------------
dnl Check for libmspack
dnl ------------------------------------------------------------------------

if test "$wxUSE_LIBMSPACK" != "no"; then
    AC_CHECK_HEADER([mspack.h], [found_mspack_h=1],, [ ])
    if test "x$found_mspack_h" = "x1"; then
        AC_CHECK_LIB(mspack, mspack_create_chm_decompressor,
                     MSPACK_LINK=" -lmspack")
    fi
    if test "x$MSPACK_LINK" = "x" ; then
        wxUSE_LIBMSPACK=no
    fi
fi

if test "$wxUSE_LIBMSPACK" != "no"; then
    AC_DEFINE(wxUSE_LIBMSPACK)
fi


dnl ----------------------------------------------------------------
dnl search for toolkit (widget sets)
dnl ----------------------------------------------------------------

TOOLKIT=
TOOLKIT_INCLUDE=
WIDGET_SET=

dnl are we building for a win32 target environment?
dnl If so, setup common stuff needed for both GUI and Base libs.
if test "$USE_WIN32" = 1 ; then
    AC_CHECK_HEADERS(w32api.h,,, [ ])
    AC_CHECK_HEADER(windows.h,,
    [
        AC_MSG_ERROR(please set CFLAGS to contain the location of windows.h)
    ],
    [ ])

    LIBS="$LIBS -luxtheme -lwinspool -lwinmm -lshell32 -lshlwapi -lcomctl32 -lcomdlg32 -ladvapi32 -lversion -lwsock32 -lgdi32"
    case "${host}" in
        x86_64-*-mingw* )
            dnl we need to define this to embed the manifest for correct
            dnl platform from wx/msw/wx.rc (this is not needed for x86 which is
            dnl the default in wx/msw/rcdefs.h)
            WINDRES_CPU_DEFINE="--define WX_CPU_AMD64"
        ;;
    esac
    if test "$wxUSE_ACCESSIBILITY" = "yes" ; then
        LIBS="$LIBS -loleacc"
    fi

    case "${host}" in
        *-*-cygwin* )
            dnl Cygwin doesn't include these by default
            LIBS="$LIBS -lkernel32 -luser32"
    esac

    dnl Flags to be passed to windres by the applications using wxWidgets.
    WXCONFIG_RESFLAGS="--define __WIN32__ --define __GNUWIN32__ $WINDRES_CPU_DEFINE"
fi

if test "$wxUSE_GUI" = "yes"; then
    USE_GUI=1

    GUI_TK_LIBRARY=

    WXGTK1=
    WXGTK127=
    WXGTK2=
    WXGTK3=
    WXGTK4=
    WXGPE=

    if test "$wxUSE_MSW" = 1 ; then
        TOOLKIT=MSW
        GUIDIST=MSW_DIST

        dnl -mwindows causes a heap of other default gui libs to be linked in.
        case "${host}" in
            *-*-mingw* )
                WXCONFIG_LDFLAGS_GUI="$LDFLAGS -Wl,--subsystem,windows -mwindows"
        esac
    fi

    if test "$wxUSE_GTK" = 1; then
        dnl GTK+ test program must be compiled with C compiler
        AC_MSG_CHECKING([for GTK+ version])

        gtk_version_cached=1
        AC_CACHE_VAL(wx_cv_lib_gtk,
            [
                dnl stupid GTK+ AM macros produce their own messages, so we
                dnl have to pass to the next line
                gtk_version_cached=0
                AC_MSG_RESULT()

                dnl we must link against lgthread unless the user
                dnl used --disable-threads
                GTK_MODULES=
                if test "$wxUSE_THREADS" = "yes"; then
                    GTK_MODULES=gthread
                fi

                if test -z "$wxGTK_VERSION"; then
                    wxGTK_VERSION=any
                fi

                dnl detect GTK2
                wx_cv_lib_gtk=
                if test "x$wxGTK_VERSION" != "x1"
                then
                    dnl The gthread.pc that ships with Solaris returns '-mt',
                    dnl it's correct for Sun CC, but gcc requires '-pthreads'.
                    dnl So disable the compile check and remove the -mt below.
                    case "${host}" in
                        *-*-solaris2* )
                            if test "$wxUSE_THREADS" = "yes" -a "$GCC" = yes; then
                                enable_gtktest=no
                            fi
                    esac

                    if test "$wxGTK_VERSION" != 4 -a "$wxGTK_VERSION" != 3; then
                        AM_PATH_GTK_2_0(2.6.0, wx_cv_lib_gtk=2.0, , $GTK_MODULES)
                    fi
                    if test -z "$wx_cv_lib_gtk"; then
                        if test "$wxGTK_VERSION" = 3 -o "$wxGTK_VERSION" = any; then
                            AM_PATH_GTK_3_0(, wx_cv_lib_gtk=3, , $GTK_MODULES)
                        elif test "$wxGTK_VERSION" = 4 -o "$wxGTK_VERSION" = any; then
                            AM_PATH_GTK_4_0(, wx_cv_lib_gtk=4, , $GTK_MODULES)
                        fi
                    fi
                fi

                dnl detect GTK1.x
                if test -z "$wx_cv_lib_gtk"; then
                    if test "x$wxGTK_VERSION" = "x1" -o "x$wxGTK_VERSION" = "xany" ; then
                        AM_PATH_GTK(1.2.7, wx_cv_lib_gtk=1.2.7, , $GTK_MODULES)

                        if test -z "$wx_cv_lib_gtk"; then
                            AM_PATH_GTK(1.2.3, wx_cv_lib_gtk=1.2.3, , $GTK_MODULES)
                        fi
                    fi
                fi

                if test -z "$wx_cv_lib_gtk"; then
                    dnl looks better in AC_MSG_RESULT
                    wx_cv_lib_gtk=none
                else
                    if test "$USE_WIN32" != 1 ; then
                        dnl we use symbols from X11 directly so we should link with it
                        GTK_LIBS="$GTK_LIBS -lX11"
                    fi

                    dnl we need to cache GTK_CFLAGS and GTK_LIBS for the
                    dnl subsequent runs
                    wx_cv_cflags_gtk=$GTK_CFLAGS
                    wx_cv_libs_gtk=$GTK_LIBS
                fi
            ]
        )

        dnl if it wasn't cached, the messages from AM_PATH_GTK() above are
        dnl enough
        if test "$gtk_version_cached" = 1; then
            AC_MSG_RESULT($wx_cv_lib_gtk)
        fi

        case "$wx_cv_lib_gtk" in
            4)      WXGTK4=1
                    WXGTK3=1
                    TOOLKIT_VERSION=4
                    ;;
            3)      WXGTK3=1
                    TOOLKIT_VERSION=3
                    ;;
            2.0)    WXGTK2=1
                    TOOLKIT_VERSION=2
                    ;;
            1.2.7)  WXGTK127=1
                    WXGTK1=1
                    ;;
            1.2*)   WXGTK1=1 ;;
            *)      AC_MSG_ERROR([
The development files for GTK+ were not found. For GTK+ 2, please
ensure that pkg-config is in the path and that gtk+-2.0.pc is
installed. For GTK+ 1.2 please check that gtk-config is in the path,
and that the version is 1.2.3 or above. Also check that the
libraries returned by 'pkg-config gtk+-2.0 --libs' or 'gtk-config
--libs' are in the LD_LIBRARY_PATH or equivalent.
                            ])
                    ;;
        esac

        if test "$WXGTK3" = 1; then
            AC_DEFINE(__WXGTK220__)
            AC_DEFINE(__WXGTK218__)
            AC_DEFINE(__WXGTK210__)
        elif test "$WXGTK2" = 1; then
            save_CFLAGS="$CFLAGS"
            save_LIBS="$LIBS"
            CFLAGS="$wx_cv_cflags_gtk $CFLAGS"
            LIBS="$LIBS $wx_cv_libs_gtk"

            dnl We need to define __WXGTK2xx__ symbols for a few specific
            dnl versions in order to be able to test for them (and hence for
            dnl the availability of the controls which appeared only in these
            dnl versions) from our public headers, without having to include
            dnl gtk/gtk.h from them.

            AC_CACHE_CHECK([if GTK+ is version >= 2.20], wx_cv_gtk220, [
                AC_TRY_COMPILE([
                                #include <gtk/gtk.h>
                               ],
                               [
                                #if !GTK_CHECK_VERSION(2,20,0)
                                Not GTK+ 2.20
                                #endif
                               ],
                               wx_cv_gtk220=yes,
                               wx_cv_gtk220=no
                               )
            ])

            if test "$wx_cv_gtk220" = "yes"; then
                AC_DEFINE(__WXGTK220__)
                wx_cv_gtk218=yes
            else
                AC_CACHE_CHECK([if GTK+ is version >= 2.18], wx_cv_gtk218, [
                    AC_TRY_COMPILE([
                                    #include <gtk/gtk.h>
                                   ],
                                   [
                                    #if !GTK_CHECK_VERSION(2,18,0)
                                    Not GTK+ 2.18
                                    #endif
                                   ],
                                   wx_cv_gtk218=yes,
                                   wx_cv_gtk218=no
                                   )
                ])
            fi

            if test "$wx_cv_gtk218" = "yes"; then
                AC_DEFINE(__WXGTK218__)
                wx_cv_gtk210=yes
            else
                AC_CACHE_CHECK([if GTK+ is version >= 2.10], wx_cv_gtk210, [
                    AC_TRY_COMPILE([
                                    #include <gtk/gtk.h>
                                   ],
                                   [
                                    #if !GTK_CHECK_VERSION(2,10,0)
                                    Not GTK+ 2.10
                                    #endif
                                   ],
                                   wx_cv_gtk210=yes,
                                   wx_cv_gtk210=no
                                   )
                ])
            fi

            if test "$wx_cv_gtk210" = "yes"; then
                AC_DEFINE(__WXGTK210__)
            fi

            CFLAGS="$save_CFLAGS"
            LIBS="$save_LIBS"
        else
            if test "$wxUSE_UNICODE" = "yes"; then
                AC_MSG_WARN([Unicode configuration not supported with GTK+ 1.x])
                wxUSE_UNICODE=no
            fi

            dnl test for XIM support in libgdk
            AC_CHECK_LIB(gdk, gdk_im_open, AC_DEFINE(HAVE_XIM))

            dnl we need poll() in src/gtk1/app.cpp (we know that Darwin doesn't
            dnl have it but we do the check for the others)
            if test "$USE_DARWIN" != 1; then
                AC_CHECK_FUNCS(poll)
            fi
        fi

        TOOLKIT_INCLUDE="$wx_cv_cflags_gtk"
        GUI_TK_LIBRARY="$wx_cv_libs_gtk $GUI_TK_LIBRARY"
        TOOLKIT=GTK
        GUIDIST=GTK_DIST

        dnl test for external libxpm if we're configured to use it
        if test "$wxUSE_GPE" = "yes"; then
            AC_MSG_CHECKING(for gpewidget library)
            WX_PATH_FIND_LIBRARIES(gpewidget)
            if test "$ac_find_libraries" != "" ; then
                WX_LINK_PATH_EXIST($ac_find_libraries,$GUI_TK_LIBRARY)
                dnl -lgpewidget must be before all GTK libs and
                dnl we guess its path from the prefix
                GUI_TK_LIBRARY="-L${prefix}/lib -lgpewidget $GUI_TK_LIBRARY"
                WXGPE=1
                AC_MSG_RESULT([found in $ac_find_libraries])
            else
                AC_MSG_RESULT(not found)
            fi

            dnl AC_MSG_CHECKING(for gpe library)
            dnl WX_PATH_FIND_LIBRARIES(gpe)
            dnl if test "$ac_find_libraries" != "" ; then
            dnl     WX_LINK_PATH_EXIST($ac_find_libraries,$GUI_TK_LIBRARY)
            dnl     GUI_TK_LIBRARY="$GUI_TK_LIBRARY -lgpe"
            dnl     AC_MSG_RESULT(found in $ac_find_libraries)
            dnl else
            dnl     AC_MSG_RESULT(not found)
            dnl fi
        fi
    fi

    if test "$wxUSE_DFB" = 1; then
       PKG_CHECK_MODULES(DIRECTFB,
                         [directfb >= 0.9.23],
                         [
                           wxUSE_UNIVERSAL="yes"
                           TOOLKIT_INCLUDE="$DIRECTFB_CFLAGS"
                           GUI_TK_LIBRARY="$DIRECTFB_LIBS"
                           TOOLKIT=DFB
                           GUIDIST=DFB_DIST
                         ],
                         [
                           AC_MSG_ERROR([DirectFB not found.])
                         ]
                         )
    fi

    dnl common part of X11 and Motif port checks
    if test "$wxUSE_X11" = 1 -o "$wxUSE_MOTIF" = 1; then
        dnl use standard macros to check for X headers/libs, this brings
        dnl support for the standard configure options --x-includes,
        dnl --x-libraries and --no-x
        AC_PATH_XTRA

        if test "$no_x" = "yes"; then
          AC_MSG_ERROR([X11 not found, please use --x-includes and/or --x-libraries options (see config.log for details)])
        fi

        dnl for some reason AC_PATH_XTRA seems to add -INONE and -LNONE (and
        dnl also sometimes -RNONE) to X_CFLAGS and X_LIBS respectively, filter
        dnl this junk out
        GUI_TK_LIBRARY=`echo $X_LIBS | sed 's/ -LNONE//' | sed 's/ -RNONE//'`
        TOOLKIT_INCLUDE=`echo $X_CFLAGS | sed 's/ -INONE//'`
        COMPILED_X_PROGRAM=0

    fi

    if test "$wxUSE_X11" = 1; then
        if test "$wxUSE_NANOX" = "yes"; then
            AC_MSG_CHECKING(for MicroWindows/NanoX distribution)
            if test "x$MICROWIN" = x ; then
                AC_MSG_RESULT(not found)
                AC_MSG_ERROR([Cannot find MicroWindows library. Make sure MICROWIN is set.])
            else
                AC_MSG_RESULT($MICROWIN)
                AC_DEFINE(wxUSE_NANOX)
            fi
        fi

        if test "$wxUSE_UNICODE" = "yes"; then
            PKG_CHECK_MODULES(PANGOXFT, pangoxft,
                [
                    AC_DEFINE(HAVE_PANGO_XFT)
                    CFLAGS="$PANGOXFT_CFLAGS $CFLAGS"
                    CXXFLAGS="$PANGOXFT_CFLAGS $CXXFLAGS"
                    GUI_TK_LIBRARY="$GUI_TK_LIBRARY $PANGOXFT_LIBS"
                ],
                [
                    AC_MSG_ERROR([pangoxft library not found, library cannot be compiled in Unicode mode])
                ]
            )
            PKG_CHECK_MODULES(PANGOFT2, pangoft2,
                [
                    CFLAGS="$PANGOFT2_CFLAGS $CFLAGS"
                    CXXFLAGS="$PANGOFT2_CFLAGS $CXXFLAGS"
                    GUI_TK_LIBRARY="$GUI_TK_LIBRARY $PANGOFT2_LIBS"
                ],
                [
                    AC_MSG_WARN([pangoft2 library not found, library will be compiled without printing support])
                    wxUSE_PRINTING_ARCHITECTURE="no"
                ]
            )

            AC_CHECK_FUNCS([pango_font_family_is_monospace])
        fi

        wxUSE_UNIVERSAL="yes"

        if test "$wxUSE_NANOX" = "yes"; then
            TOOLKIT_INCLUDE="-I\$(top_srcdir)/include/wx/x11/nanox -I\$(MICROWIN)/src/include $TOOLKIT_INCLUDE"
            TOOLCHAIN_DEFS="${TOOLCHAIN_DEFS} -D__NANOX__ -DMWPIXEL_FORMAT=MWPF_TRUECOLOR0888 -DHAVE_FILEIO -DHAVE_BMP_SUPPORT=1 -DHAVE_GIF_SUPPORT=1 -DHAVE_PNM_SUPPORT=1 -DHAVE_XPM_SUPPORT=1 -DUNIX=1 -DUSE_EXPOSURE -DSCREEN_HEIGHT=480 -DSCREEN_WIDTH=640 -DSCREEN_DEPTH=4 -DX11=1"
            GUI_TK_LIBRARY="$GUI_TK_LIBRARY \$(MICROWIN)/src/lib/libnano-X.a"
        else
            GUI_TK_LIBRARY="$GUI_TK_LIBRARY -lX11"
        fi

        TOOLKIT=X11
        GUIDIST=X11_DIST
    fi

    if test "$wxUSE_MOTIF" = 1; then
        AC_MSG_CHECKING(for Motif/Lesstif headers)
        WX_PATH_FIND_INCLUDES($SEARCH_INCLUDE, Xm/Xm.h)
        if test "$ac_find_includes" != "" ; then
            AC_MSG_RESULT(found in $ac_find_includes)
            WX_INCLUDE_PATH_EXIST($ac_find_includes, $TOOLKIT_INCLUDE)
            TOOLKIT_INCLUDE="$TOOLKIT_INCLUDE $ac_path_to_include"
        else
            save_CFLAGS=$CFLAGS
            CFLAGS="$TOOLKIT_INCLUDE $CFLAGS"

            AC_TRY_COMPILE(
                [
                    #include <Xm/Xm.h>
                ],
                [
                    int version;
                    version = xmUseVersion;
                ],
                [
                    AC_MSG_RESULT(found in default search path)
                    COMPILED_X_PROGRAM=1
                ],
                [
                    AC_MSG_RESULT(no)
                    AC_MSG_ERROR(please set CPPFLAGS to contain the location of Xm/Xm.h)
                ]
            )

            CFLAGS=$save_CFLAGS
        fi


        AC_MSG_CHECKING(for Motif/Lesstif library)
        WX_PATH_FIND_LIBRARIES(Xm)

        if test "x$ac_find_libraries" != "x" ; then
            AC_MSG_RESULT(found in $ac_find_libraries)

            WX_LINK_PATH_EXIST($ac_find_libraries, $GUI_TK_LIBRARY)
            GUI_TK_LIBRARY="$GUI_TK_LIBRARY $ac_path_to_link"
        else
            dnl it might happen that we found headers in one of the standard
            dnl paths but the libs are elsewhere but still in default (linker)
            dnl path -- try to compile a test program to check for this
            save_CFLAGS=$CFLAGS
            CFLAGS="$TOOLKIT_INCLUDE $CFLAGS"
            save_LIBS="$LIBS"
            LIBS="$GUI_TK_LIBRARY -lXm -lXmu -lXext -lX11"

            AC_TRY_LINK(
                [
                    #include <Xm/Xm.h>
                ],
                [
                    int version;
                    version = xmUseVersion;
                ],
                [
                    AC_MSG_RESULT(found in default search path)
                    COMPILED_X_PROGRAM=1
                ],
                [
                    AC_MSG_RESULT(no)
                    AC_MSG_ERROR(please set LDFLAGS to contain the location of libXm)
                ]
            )

            CFLAGS=$save_CFLAGS
            LIBS="$save_LIBS"
        fi

        AC_MSG_CHECKING([if we need -lXp and/or -lSM -lICE])
        libp_link=""
        libsm_ice_link=""
        libs_found=0
        for libp in "" " -lXp"; do
            if test "$libs_found" = 0; then
                for libsm_ice in "" " -lSM -lICE"; do
                    if test "$libs_found" = 0; then
                        save_LIBS="$LIBS"
                        LIBS="$GUI_TK_LIBRARY -lXm ${libp} -lXmu -lXext -lXt ${libsm_ice} -lX11"
                        save_CFLAGS=$CFLAGS
                        CFLAGS="$TOOLKIT_INCLUDE $CFLAGS"

                        AC_TRY_LINK(
                            [
                                #include <Xm/Xm.h>
                                #include <Xm/List.h>
                            ],
                            [
                                XmString string = NULL;
                                Widget w = NULL;
                                int position = 0;
                                XmListAddItem(w, string, position);
                            ],
                            [
                                libp_link="$libp"
                                libsm_ice_link="$libsm_ice"
                                AC_MSG_RESULT(
                                    [need ${libp_link} ${libsm_ice_link}])
                                libs_found=1
                            ], []
                        )

                        LIBS="$save_LIBS"
                        CFLAGS=$save_CFLAGS
                    fi
                done
            fi
        done

        if test "$libs_found" = 0; then
            AC_MSG_RESULT([can't find the right libraries])
            AC_MSG_ERROR([can't link a simple motif program])
        fi

        dnl this seems to be needed under IRIX and shouldn't do any harm
        dnl elsewhere
        AC_CHECK_LIB(Sgm, [SgCreateList], [libsgm_link=" -lSgm"])

        save_CFLAGS=$CFLAGS
        CFLAGS="$TOOLKIT_INCLUDE $CFLAGS"

        AC_CACHE_CHECK([for Motif 2],
            wx_cv_lib_motif2,
            AC_TRY_COMPILE([
                            #include <Xm/Xm.h>
                           ],
                           [
                            #if XmVersion < 2000
                            Not Motif 2
                            #endif
                           ],
                           wx_cv_lib_motif2="yes",
                           wx_cv_lib_motif2="no"))
        if test "$wx_cv_lib_motif2" = "yes"; then
            AC_DEFINE(__WXMOTIF20__,1)
        else
            AC_DEFINE(__WXMOTIF20__,0)
        fi

        AC_CACHE_CHECK([whether Motif is Lesstif],
            wx_cv_lib_lesstif,
            AC_TRY_COMPILE([
                            #include <Xm/Xm.h>
                           ],
                           [
                            #if !defined(LesstifVersion) || LesstifVersion <= 0
                            Not Lesstif
                            #endif
                           ],
                           wx_cv_lib_lesstif="yes",
                           wx_cv_lib_lesstif="no")
        )
        if test "$wx_cv_lib_lesstif" = "yes"; then
            AC_DEFINE(__WXLESSTIF__,1)
        else
            AC_DEFINE(__WXLESSTIF__,0)
        fi

        CFLAGS=$save_CFLAGS

        GUI_TK_LIBRARY="$GUI_TK_LIBRARY ${libsgm_link} -lXm ${libp_link} -lXmu -lXext -lXt ${libsm_ice_link} -lX11"
        TOOLKIT=MOTIF
        GUIDIST=MOTIF_DIST
    fi

    dnl more tests common to X11 and Motif:
    if test "$wxUSE_X11" = 1 -o "$wxUSE_MOTIF" = 1; then
        dnl test for external libxpm if we're configured to use it
        if test "$wxUSE_LIBXPM" = "sys"; then
            AC_MSG_CHECKING(for Xpm library)
            WX_PATH_FIND_LIBRARIES(Xpm)
            if test "$ac_find_libraries" != "" ; then
                WX_LINK_PATH_EXIST($ac_find_libraries,$GUI_TK_LIBRARY)
                GUI_TK_LIBRARY="$GUI_TK_LIBRARY $ac_path_to_link"
                AC_MSG_RESULT(found in $ac_find_libraries)

                AC_CACHE_CHECK([for X11/xpm.h],
                    wx_cv_x11_xpm_h,
                    [
                        save_CFLAGS=$CFLAGS
                        CFLAGS="$TOOLKIT_INCLUDE $CFLAGS"

                        AC_TRY_COMPILE(
                            [
                                #include <X11/xpm.h>
                            ],
                            [
                                int version;
                                version = XpmLibraryVersion();
                            ],
                            wx_cv_x11_xpm_h=yes,
                            wx_cv_x11_xpm_h=no
                        )

                        CFLAGS=$save_CFLAGS
                    ]
                )

                if test $wx_cv_x11_xpm_h = "yes"; then
                    GUI_TK_LIBRARY="$GUI_TK_LIBRARY -lXpm"
                    AC_DEFINE(wxHAVE_LIB_XPM)
                else
                    AC_MSG_WARN([built-in less efficient XPM decoder will be used])
                fi
            fi

        fi

        dnl XShapeQueryExtension checks: first the library, then prototype
        AC_CHECK_LIB([Xext], [XShapeQueryExtension],
                     [
                      GUI_TK_LIBRARY="$GUI_TK_LIBRARY -lXext"
                      wxHAVE_XEXT_LIB=1
                     ],
                     [], [$GUI_TK_LIBRARY -lX11])

        if test "$wxHAVE_XEXT_LIB" = 1; then
            save_CFLAGS="$CFLAGS"
            CFLAGS="$TOOLKIT_INCLUDE $CFLAGS"

            AC_MSG_CHECKING([for X11/extensions/shape.h])
            AC_TRY_COMPILE([
                            #include <X11/Xlib.h>
                            #include <X11/extensions/shape.h>
                           ],
                           [
                            int dummy1, dummy2;
                            XShapeQueryExtension((Display*)NULL,
                                                 (int*)NULL, (int*)NULL);
                           ],
                           [
                            AC_DEFINE(HAVE_XSHAPE)
                            AC_MSG_RESULT([found])
                           ],
                           [
                            AC_MSG_RESULT([not found])
                           ])
            CFLAGS="$save_CFLAGS"

        fi
    fi

    if test "$wxUSE_OSX_COCOA" = 1; then
        TOOLKIT=OSX_COCOA
        GUIDIST=OSX_COCOA_DIST

        TOOLCHAIN_DEFS="${TOOLCHAIN_DEFS} -D__WXMAC__ -D__WXOSX__"
    fi

    if test "$wxUSE_OSX_IPHONE" = 1; then
        TOOLKIT=OSX_IPHONE
    fi


    if test "$wxUSE_QT" = 1; then
        TOOLKIT=QT
        GUIDIST=QT_DIST
        TOOLKIT_DIR="qt"

        if test -n "$QT5_CUSTOM_DIR" ; then
            dnl the name of the directory where the files for this toolkit live
            TOOLKIT_INCLUDE="${TOOLKIT_INCLUDE} -I${QT5_CUSTOM_DIR}/include"
            GUI_TK_LIBRARY="${GUI_TK_LIBRARY} -L${QT5_CUSTOM_DIR}/lib \
                            -lQt5Core -lQt5Widgets -lQt5Gui -lQt5OpenGL -lQt5Test \
                            -Wl,-rpath,${QT5_CUSTOM_DIR}/lib"

        elif test -z "$PKG_CONFIG" ; then
            AC_MSG_ERROR([specify QT5_CUSTOM_DIR or make sure pkg-config is available to search for Qt5 libraries])

        else
            PKG_CHECK_MODULES(QT5,
                          [Qt5Core Qt5Widgets Qt5Gui Qt5OpenGL Qt5Test],
                [
                TOOLKIT_INCLUDE="${TOOLKIT_INCLUDE} ${QT5_CFLAGS}"
                GUI_TK_LIBRARY="${GUI_TK_LIBRARY} ${QT5_LIBS}"
                if `pkg-config --variable qt_config Qt5Core | grep "reduce_relocations" >/dev/null`; then
                    dnl build with position independent code if Qt needs it
                    SAMPLES_CXXFLAGS="-fPIC $SAMPLES_CXXFLAGS"
                    WXCONFIG_CXXFLAGS="-fPIC $WXCONFIG_CXXFLAGS"
                fi
                ],
                [
                    AC_MSG_ERROR([Qt5 libraries are not available])
                ]
            )
        fi
    fi
    dnl the name of the directory where the files for this toolkit live
    TOOLKIT_DIR=`echo ${TOOLKIT} | tr '[[A-Z]]' '[[a-z]]'`

    if test "$wxUSE_UNIVERSAL" = "yes"; then
        TOOLCHAIN_DEFS="${TOOLCHAIN_DEFS} -D__WXUNIVERSAL__"
        WIDGET_SET=univ
    fi

    dnl distribute samples/demos/utils with GUI versions
    GUIDIST="${GUIDIST} SAMPLES_DIST DEMOS_DIST UTILS_DIST MISC_DIST"
    DISTDIR="wx\$(TOOLKIT)"
else
    USE_GUI=0

    dnl this doesn't quite work right for wxBase, but the places
    dnl where it is wrong aren't fatal (yet) though.
    TOOLKIT_DIR="base"

    dnl the sources, their dependenices and the headers
    if test "$USE_WIN32" = 1 ; then
        dnl yes, the toolkit for wxBase on win32 is actually MSW
        dnl wxBase on unix does not need a 'TOOLKIT' defined.
        TOOLKIT="MSW"
    fi

    dnl distribute only wxBase sources/headers
    GUIDIST="BASE_DIST"
    DISTDIR="wxBase"
fi


dnl ---------------------------------------------------------------------------
dnl Optional libraries included when system library is not used
dnl ---------------------------------------------------------------------------

dnl do this after test for X11 above so that we have a chance of finding Xlib.h
if test "$wxUSE_GUI" = "yes"; then
    if test "$wxUSE_UNIX" = "yes"; then
        dnl defines HAVE_X11_XKBLIB_H
        AC_CHECK_HEADERS([X11/Xlib.h],,, [ ])
        AC_CHECK_HEADERS([X11/XKBlib.h],,,
                         [
                          #if HAVE_X11_XLIB_H
                            #include <X11/Xlib.h>
                          #endif
                         ])
    fi
fi


dnl ---------------------------------------------------------------------------
dnl wxDisplay checks
dnl ---------------------------------------------------------------------------

USE_XINERAMA=0
if test "$wxUSE_DISPLAY" = "yes"; then
    dnl Xinerama is used for wxGTK1/wxX11/wxMotif only
    if test "$wxUSE_MOTIF" = 1 -o "$wxUSE_X11" = 1 -o "$WXGTK1" = 1; then
        WX_FIND_LIB(Xinerama, XineramaQueryScreens)
        if test "$ac_find_libraries" != "" ; then
            if test "$ac_find_libraries" != "std" ; then
              WX_LINK_PATH_EXIST([$ac_find_libraries],[$LDFLAGS])
              if test "$ac_path_to_link" != " -L/usr/lib" ; then
                  LDFLAGS="$LDFLAGS $ac_path_to_link"
              fi
            fi
            USE_XINERAMA=1
            GUI_TK_LIBRARY="$GUI_TK_LIBRARY -lXinerama"
        else
            AC_MSG_WARN([Xinerama not found; disabling wxDisplay])
            wxUSE_DISPLAY="no"
        fi
    elif test "$wxUSE_MSW" = 1; then
        dnl DirectDraw for MSW - optionally used by WxDisplay.
        AC_CHECK_HEADER([ddraw.h], [], [], [#include <windows.h>])
    fi
fi

if test "$wxUSE_DISPLAY" = "yes"; then
    dnl wxGTK2 needs Xxf86vm as well as Xinerama-using ports from above
    if test "$USE_XINERAMA" = 1 -o "$wxUSE_GTK" = 1; then
        WX_FIND_LIB(Xxf86vm, XF86VidModeQueryExtension)
        if test "$ac_find_libraries" != "" ; then
            AC_CHECK_HEADERS([X11/extensions/xf86vmode.h],
                             [
                              GUI_TK_LIBRARY="$GUI_TK_LIBRARY -lXxf86vm"
                             ],
                             [],
                             [
                                  #if HAVE_X11_XLIB_H
                                    #include <X11/Xlib.h>
                                  #endif
                             ])
        fi
    fi
fi

dnl ---------------------------------------------------------------------------
dnl X11 session management
dnl ---------------------------------------------------------------------------
if test "$wxUSE_DETECT_SM" = "yes"; then
    if test "$wxUSE_UNIX" = "yes" -a "$wxUSE_MAC" != 1; then
        WX_FIND_LIB(SM, SmcOpenConnection)
        if test "$ac_find_libraries" != "" ; then
            if test "$ac_find_libraries" != "std" ; then
              WX_LINK_PATH_EXIST([$ac_find_libraries],[$LDFLAGS])
              if test "$ac_path_to_link" != " -L/usr/lib" ; then
                LDFLAGS="$LDFLAGS $ac_path_to_link"
              fi
            fi
            GUI_TK_LIBRARY="$GUI_TK_LIBRARY -lSM"
        else
            AC_MSG_WARN([libSM not found; disabling session management detection])
            wxUSE_DETECT_SM="no"
        fi
    else
        wxUSE_DETECT_SM="no"
    fi
fi


dnl ---------------------------------------------------------------------------
dnl OpenGL libraries
dnl ---------------------------------------------------------------------------

USE_OPENGL=0
if test "$wxUSE_OPENGL" = "yes" -o "$wxUSE_OPENGL" = "auto"; then

    dnl look in glcanvas.h for the list of platforms supported by wxGlCanvas:

    if test "$wxUSE_OSX_COCOA" = 1; then
        OPENGL_LIBS="-framework OpenGL -framework AGL"
    elif test "$wxUSE_MSW" = 1; then
        OPENGL_LIBS="-lopengl32 -lglu32"
    elif test "$wxUSE_MOTIF" = 1 -o "$wxUSE_X11" = 1 -o "$wxUSE_GTK" = 1 -o "$wxUSE_QT" = 1; then

        dnl adjust CPPFLAGS to include GL/gl.h location if necessary
        dnl (/opt/graphics/OpenGL is for HP-UX systems, bug 925307)
        AC_MSG_CHECKING([for OpenGL headers])
        WX_PATH_FIND_INCLUDES([$SEARCH_INCLUDE /opt/graphics/OpenGL/include], GL/gl.h)
        if test "$ac_find_includes" != "" ; then
            AC_MSG_RESULT(found in $ac_find_includes)
            WX_INCLUDE_PATH_EXIST($ac_find_includes, $CPPFLAGS)
            CPPFLAGS="$ac_path_to_include $CPPFLAGS"
        else
            AC_MSG_RESULT([not found])
        fi

        AC_CHECK_HEADER(GL/gl.h, [
            AC_CHECK_HEADER(GL/glu.h, [
                found_gl=0

                WX_FIND_LIB(GL, glBegin, [/opt/graphics/OpenGL/lib])
                if test "$ac_find_libraries" != "" ; then
                    if test "$ac_find_libraries" != "std" ; then
                      WX_LINK_PATH_EXIST([$ac_find_libraries],[$LDFLAGS])
                      if test "$ac_path_to_link" != " -L/usr/lib" ; then
                        LDFLAGS_GL="$ac_path_to_link"
                      fi
                    fi

                    dnl don't suppose that libGL and libGLU are always in the
                    dnl same directory -- this is not true for some common
                    dnl distributions
                    WX_FIND_LIB(GLU, gluBeginCurve, [/opt/graphics/OpenGL/lib])
                    if test "$ac_find_libraries" != "" ; then
                      if test "$ac_find_libraries" != "std" ; then
                        WX_LINK_PATH_EXIST([$ac_find_libraries],[$LDFLAGS])
                        if test "$ac_path_to_link" != " -L/usr/lib" -a \
                                "$ac_path_to_link" != "$LDFLAGS_GL" ; then
                          LDFLAGS_GL="$LDFLAGS_GL $ac_path_to_link"
                        fi
                      fi

                        found_gl=1
                        OPENGL_LIBS="-lGL -lGLU"
                    fi
                fi

                if test "$found_gl" != 1; then
                    WX_FIND_LIB(MesaGL, glEnable, [/opt/graphics/OpenGL/lib])
                    if test "$ac_find_libraries" != "" ; then
                      if test "$ac_find_libraries" != "std" ; then
                        WX_LINK_PATH_EXIST([$ac_find_libraries],[$LDFLAGS])
                        if test "$ac_path_to_link" != " -L/usr/lib" ; then
                          LDFLAGS_GL="$LDFLAGS_GL $ac_path_to_link"
                        fi
                      fi
                      OPENGL_LIBS="-lMesaGL -lMesaGLU"
                    fi
                fi
            ],, [ ])
        ],
        [],
        [ ])

        if test "x$OPENGL_LIBS" = "x"; then
            if test "$wxUSE_OPENGL" = "yes"; then
                AC_MSG_ERROR([OpenGL libraries not available])
            else
                dnl case wxUSE_OPENGL=auto
                AC_MSG_WARN([OpenGL libraries not available, disabling support for OpenGL])
                wxUSE_OPENGL=no
                USE_OPENGL=0
            fi
        fi
    else
        AC_MSG_WARN([wxGLCanvas not implemented for this port, library will be compiled without it.])
        wxUSE_OPENGL="no"
    fi

    if test "$wxUSE_OPENGL" = "auto"; then
        dnl if the OpenGL libraries were unavailable, this would have been
        dnl changed to "no" above, if it wasn't, change it to "yes" as we've
        dnl verified that we can indeed use OpenGL
        wxUSE_OPENGL=yes
    fi

    if test "$wxUSE_OPENGL" = "yes"; then
        USE_OPENGL=1
        AC_DEFINE(wxUSE_OPENGL)
        AC_DEFINE(wxUSE_GLCANVAS)
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS opengl opengl/cube opengl/penguin opengl/isosurf opengl/pyramid"
    fi
fi


dnl the symbol which allows conditional compilation for the given toolkit
if test -n "$TOOLKIT" ; then
    TOOLCHAIN_DEFS="${TOOLCHAIN_DEFS} -D__WX${TOOLKIT}__"
fi


dnl --- the marker for quick search, leave it here: SHARED_LIB_SETUP ---

if test "$wxUSE_SHARED" = "yes"; then

    dnl use versioned symbols if available on the platform
    WX_VERSIONED_SYMBOLS([\$(wx_top_builddir)/version-script])

    dnl test for GCC's visibility support (sets CFLAGS_VISIBILITY, which is
    dnl assigned to CFLAGS and CXXFLAGS below)
    if test "$wxUSE_VISIBILITY" != "no"; then
        WX_VISIBILITY
    fi

    dnl test for Sun CC which can be used under both Solaris and Linux
    if test "x$SUNCXX" = xyes; then
        SAMPLES_RPATH_FLAG="-R\$(wx_top_builddir)/lib"
        WXCONFIG_RPATH="-R\$libdir"
    else
    case "${host}" in
      *-*-linux* | *-*-gnu* )
        SAMPLES_RPATH_FLAG="-Wl,-rpath,\$(wx_top_builddir)/lib"
        WXCONFIG_RPATH="-Wl,-rpath,\$libdir"
        ;;

      *-*-solaris2* )
        dnl here we know that Sun CC is not used as we tested for it above,
        dnl hence we must be using gcc

        dnl newer versions of gcc need -isystem to compile X headers on
        dnl Solaris (which use old style C syntax)
        CPPFLAGS="-isystem /usr/openwin/include $CPPFLAGS"

        dnl gcc may use Sun's ld, in which case -rpath gives a confusing
        dnl error message. We have to try both -Wl,-rpath and -Wl,-R:
        saveLdflags="$LDFLAGS"
        LDFLAGS="$saveLdflags -Wl,-rpath,/"
        AC_MSG_CHECKING([if the linker accepts -rpath])
        AC_TRY_LINK(
            [],[],
            [
                AC_MSG_RESULT([yes])
                SAMPLES_RPATH_FLAG="-Wl,-rpath,\$(wx_top_builddir)/lib"
                WXCONFIG_RPATH="-Wl,-rpath,\$libdir"
            ],[
                AC_MSG_RESULT([no])
                AC_MSG_CHECKING([if the linker accepts -R])
                LDFLAGS="$saveLdflags -Wl,-R,/"
                AC_TRY_LINK(
                    [],[],
                    [
                        AC_MSG_RESULT([yes])
                        SAMPLES_RPATH_FLAG="-Wl,-R,\$(wx_top_builddir)/lib"
                        WXCONFIG_RPATH="-Wl,-R,\$libdir"
                    ],[
                        AC_MSG_RESULT([no])
                    ])
            ])
        LDFLAGS="$saveLdflags"
      ;;

      *-*-darwin* )
        install_name_tool=`which ${HOST_PREFIX}install_name_tool`
        if test "$install_name_tool" -a -x "$install_name_tool"; then
            DYLIB_RPATH_POSTLINK="${HOST_PREFIX}install_name_tool -id \$@ \$@"
            cat <<EOF >change-install-names
#!/bin/sh
libnames=\`cd \${1} ; ls -1 | grep '\.[[0-9]][[0-9]]*\.dylib\$'\`
changes=''
for dep in \${libnames} ; do
    changes="\${changes} -change \${4}/\${dep} \${3}/\${dep}"
done
for i in \${libnames} ; do
    ${HOST_PREFIX}install_name_tool \${changes} -id \${3}/\${i} \${1}/\${i}
done
EOF
            chmod +x change-install-names
            DYLIB_RPATH_INSTALL="\$(wx_top_builddir)/change-install-names \${DESTDIR}\${libdir} \${DESTDIR}\${bindir} \${libdir} \$(wx_top_builddir)/lib"
        fi

        dnl the HEADER_PAD_OPTION is required by some wx samples to avoid the error:
        dnl "install_name_tool: changing install names can't be redone for: the_exe_name
        dnl (for architecture ppc) because larger updated load commands do not fit
        dnl (the program must be relinked)"
        HEADER_PAD_OPTION="-headerpad_max_install_names"
      ;;

      *-*-cygwin* | *-*-mingw32* | *-*-mingw64* )
        ;;

      *-*-hpux* )
        SAMPLES_RPATH_FLAG="-Wl,+b,\$(wx_top_builddir)/lib"
        WXCONFIG_RPATH="-Wl,+b,\$libdir"
        ;;

    esac
    fi

    dnl this one shouldn't be used for the library build so put it in a
    dnl separate variable from WXCONFIG_CPPFLAGS
    WXCONFIG_ONLY_CPPFLAGS="$WXCONFIG_ONLY_CPPFLAGS -DWXUSINGDLL"

    if test $wxUSE_RPATH = "no"; then
        SAMPLES_RPATH_FLAG=''
        DYLIB_PATH_POSTLINK=''
        WXCONFIG_RPATH=''
    fi

    SHARED=1

else

    config_linkage_component="-static"
    SHARED=0

fi


UNICODE=0
lib_unicode_suffix=
WX_CHARTYPE="ansi"
if test "$wxUSE_UNICODE" = "yes"; then
    lib_unicode_suffix=u
    WX_CHARTYPE="unicode"
    UNICODE=1
fi

WX_FLAVOUR=${WX_FLAVOUR:+-$WX_FLAVOUR}
WX_LIB_FLAVOUR=`echo $WX_FLAVOUR | tr '-' '_'`

DEBUG_INFO=0
if test "$wxUSE_DEBUG_INFO" = "yes"; then
    DEBUG_INFO=1
fi

WX_VERSION_TAG=`echo WX${lib_unicode_suffix}${WX_LIB_FLAVOUR}_${WX_RELEASE} | tr '[[a-z]]' '[[A-Z]]'`

TOOLCHAIN_NAME="${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}${lib_unicode_suffix}${WX_LIB_FLAVOUR}-${WX_RELEASE}${HOST_SUFFIX}"

TOOLCHAIN_FULLNAME="${HOST_PREFIX}${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}-${WX_CHARTYPE}${config_linkage_component}-${WX_RELEASE}${WX_FLAVOUR}"

dnl library link name
dnl These just save us from exporting lib_{unicode,flavour}_suffix.
dnl If we ever need to do that, we won't need to keep these.

if test "$wxUSE_OSX_COCOA" = 1; then
    WX_LIBRARY_BASENAME_NOGUI="wx_base${lib_unicode_suffix}${WX_LIB_FLAVOUR}"
else
    WX_LIBRARY_BASENAME_NOGUI="wx_base${WXBASEPORT}${lib_unicode_suffix}${WX_LIB_FLAVOUR}"
fi
WX_LIBRARY_BASENAME_GUI="wx_${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}${lib_unicode_suffix}${WX_LIB_FLAVOUR}"



dnl ---------------------------------------------------------------------------
dnl Checks for typedefs
dnl ---------------------------------------------------------------------------

dnl   defines mode_t if not already defined
AC_TYPE_MODE_T
dnl   defines off_t if not already defined
AC_TYPE_OFF_T
dnl   defines pid_t if not already defined
AC_TYPE_PID_T
dnl   defines size_t if not already defined
AC_TYPE_SIZE_T

dnl sets HAVE_SSIZE_T if ssize_t is defined
AC_CHECK_TYPES(ssize_t)

dnl check what exactly size_t is on this machine - this is necessary to avoid
dnl ambiguous overloads in several places, notably wx/string.h and wx/array.h
AC_LANG_PUSH(C++) dnl tests below use overloaded functions and so need C++
AC_CACHE_CHECK([if size_t is unsigned int],
    wx_cv_size_t_is_uint,
    [
    dnl an obvious check like AC_TRY_COMPILE[struct Foo { ... };] doesn't work
    dnl with egcs (at least) up to 1.1.1 as it allows you to compile duplicate
    dnl methods in a local class (i.e. class inside a function) declaration
    dnl without any objections!!
    dnl
    dnl hence the hack below: we must have Foo at global scope!
    AC_TRY_COMPILE([#include <stddef.h>],
        [
            return 0; }

            struct Foo { void foo(size_t); void foo(unsigned int); };

            int bar() {
        ],
        wx_cv_size_t_is_uint=no,
        wx_cv_size_t_is_uint=yes
    )
    ]
)

if test "$wx_cv_size_t_is_uint" = "yes"; then
    AC_DEFINE(wxSIZE_T_IS_UINT)
else
    AC_CACHE_CHECK([if size_t is unsigned long],
        wx_cv_size_t_is_ulong,
        AC_TRY_COMPILE([#include <stddef.h>],
            [
                return 0; }

                struct Foo { void foo(size_t); void foo(unsigned long); };

                int bar() {
            ],
            wx_cv_size_t_is_ulong=no,
            wx_cv_size_t_is_ulong=yes
        )
    )

    if test "$wx_cv_size_t_is_ulong" = "yes"; then
        AC_DEFINE(wxSIZE_T_IS_ULONG)
    fi
fi

AC_CACHE_CHECK([if wchar_t is separate type],
    wx_cv_wchar_t_is_separate_type,
    AC_TRY_COMPILE([#include <wchar.h>],
        [
            return 0; }

            struct Foo { void foo(wchar_t);
                         void foo(unsigned short);
                         void foo(unsigned int);
                         void foo(unsigned long); };

            int bar() {
        ],
        wx_cv_wchar_t_is_separate_type=yes,
        wx_cv_wchar_t_is_separate_type=no
    )
)

if test "$wx_cv_wchar_t_is_separate_type" = "yes"; then
    AC_DEFINE(wxWCHAR_T_IS_REAL_TYPE, 1)
else
    AC_DEFINE(wxWCHAR_T_IS_REAL_TYPE, 0)
fi

AC_LANG_POP() dnl C++

dnl ---------------------------------------------------------------------------
dnl Checks for structures
dnl ---------------------------------------------------------------------------

dnl does passwd struct has the pw_gecos field?
AC_CACHE_CHECK([for pw_gecos in struct passwd], wx_cv_struct_pw_gecos,
    [
        AC_TRY_COMPILE([#include <pwd.h>],
             [
                char *p;
                struct passwd *pw;
                p = pw->pw_gecos;
             ],
             [
                wx_cv_struct_pw_gecos=yes
             ],
             [
                wx_cv_struct_pw_gecos=no
             ]
        )
    ]
)

if test "$wx_cv_struct_pw_gecos" = "yes"; then
    AC_DEFINE(HAVE_PW_GECOS)
fi

dnl ---------------------------------------------------------------------------
dnl Check for functions
dnl ---------------------------------------------------------------------------

dnl check for wcslen in all possible places
WCSLEN_FOUND=0
WCHAR_LINK=
AC_CHECK_FUNCS(wcslen, WCSLEN_FOUND=1)

if test "$WCSLEN_FOUND" = 0; then
    if test "$TOOLKIT" = "MSW"; then
        AC_CHECK_LIB(msvcrt, wcslen, WCHAR_OK=1)
    else
        AC_CHECK_LIB(w, wcslen, [
                        WCHAR_LINK=" -lw"
                        WCSLEN_FOUND=1
                    ])
    fi
fi

if test "$WCSLEN_FOUND" = 1; then
    AC_DEFINE(HAVE_WCSLEN)
fi

dnl Notice that unlike the functions below, this one seems to be present in all
dnl support OS X versions so it's OK to test for it here.
AC_CHECK_FUNCS(wcsftime)

dnl OS X provides the wide character functions (and also strnlen(), for some
dnl reason) only starting from 10.7 so our tests would succeed if we're
dnl configuring under 10.7 or later, yet the compiled programs would fail if
dnl ran under 10.6 or earlier. To avoid this problem, define the corresponding
dnl HAVE_XXX in wx/osx/config_xcode.h instead of testing for them here.
if test "$wxUSE_MAC" != 1; then
    AC_CHECK_FUNCS([strnlen wcsdup wcsnlen wcscasecmp wcsncasecmp])
fi

dnl On HP-UX aCC need this define to find mbstrtowcs() &c
dnl Can't be used for g++ since the mbstate_t in wchar.h can conflict
dnl with g++'s in <cwchar> (unless -D_INCLUDE__STDC_A1_SOURCE is in the
dnl flags when g++ is configured, it will declare its own).
if test "$USE_HPUX" = 1 -a "$GCC" != "yes"; then
    CPPFLAGS="-D_INCLUDE__STDC_A1_SOURCE $CPPFLAGS"
fi

dnl Try to use wcsrtombs instead of wcstombs which is buggy in old GNU
dnl libc versions if possible. AC_CHECK_FUNCS only checks it's in the
dnl library, not the header, so do a header check for mbstate_t first.
AC_CHECK_TYPES([mbstate_t],
               [AC_CHECK_FUNCS(wcsrtombs)],
               [],
               [#include <wchar.h>])

dnl check for vsnprintf() -- a safe version of vsprintf())
dnl
dnl the trouble here is that on some systems (e.g. HP-UX 10) this function is
dnl present in libc but not in the system headers and so AC_CHECK_FUNCS (which,
dnl stupidly, provides a dummy function declaration inside its extension)
dnl succeeds, even with C++ compiler, but the compilation of wxWidgets fails
dnl
dnl so we first check if the function is in the library
dnl
dnl FIXME: replace this mess with WX_CHECK_FUNCS()
AC_CHECK_FUNCS(snprintf vsnprintf vsscanf)

AC_LANG_PUSH(C++)
if test "$ac_cv_func_vsnprintf" = "yes"; then
    dnl yes it is -- now check if it is in the headers
    AC_CACHE_CHECK([for vsnprintf declaration], wx_cv_func_vsnprintf_decl,
        [
            dnl our troubles are not over: HP-UX 11 prototypes vsnprintf() as
            dnl taking "char *" and not "const char *" so test for this too
            AC_TRY_COMPILE(
                [
                    #include <stdio.h>
                    #include <stdarg.h>
                ],
                [
                    char *buf;
                    va_list ap;
                    vsnprintf(buf, 10u, "%s", ap);
                ],
                wx_cv_func_vsnprintf_decl=yes,
                wx_cv_func_vsnprintf_decl=no
            )
        ]
    )

    if test "$wx_cv_func_vsnprintf_decl" = "yes"; then
        AC_DEFINE(HAVE_VSNPRINTF_DECL)

        dnl we know there is a vsnprintf declaration, but some old headers
        dnl may have one taking a "char *" format instead of "const char *"
        AC_CACHE_CHECK([if vsnprintf declaration is broken], wx_cv_func_broken_vsnprintf_decl,
            [
                AC_TRY_COMPILE(
                    [
                        #include <stdio.h>
                        #include <stdarg.h>
                        #ifdef __MSL__
                        #if __MSL__ >= 0x6000
                        namespace std {}
                        using namespace std;
                        #endif
                        #endif
                    ],
                    [
                        char *buf;
                        va_list ap;
                        const char *fmt = "%s";
                        vsnprintf(buf, 10u, fmt, ap);
                    ],
                    wx_cv_func_broken_vsnprintf_decl=no,
                    wx_cv_func_broken_vsnprintf_decl=yes
                )
            ]
        )

        if test "$wx_cv_func_broken_vsnprintf_decl" = "yes"; then
            AC_DEFINE(HAVE_BROKEN_VSNPRINTF_DECL)
        fi
    fi
fi

dnl the same as above but for snprintf() now: it's not present in at least AIX
dnl 4.2 headers
if test "$ac_cv_func_snprintf" = "yes"; then
    AC_CACHE_CHECK([for snprintf declaration], wx_cv_func_snprintf_decl,
        [
            AC_TRY_COMPILE(
                [
                    #include <stdio.h>
                    #include <stdarg.h>
                    #ifdef __MSL__
                    #if __MSL__ >= 0x6000
                    namespace std {}
                    using namespace std;
                    #endif
                    #endif
                ],
                [
                    char *buf;
                    snprintf(buf, 10u, "%s", "wx");
                ],
                wx_cv_func_snprintf_decl=yes,
                wx_cv_func_snprintf_decl=no
            )
        ]
    )

    if test "$wx_cv_func_snprintf_decl" = "yes"; then
        AC_DEFINE(HAVE_SNPRINTF_DECL)
    fi

    if test "$wxUSE_PRINTF_POS_PARAMS" = "yes"; then

        dnl check if snprintf() has support for positional arguments
        dnl NB: if snprintf() has positional support we can safely suppose that also
        dnl     other *printf() functions support them as they all belong to the same
        dnl     family and they all fallback to the same implementation
        AC_CACHE_CHECK([if snprintf supports positional arguments], wx_cv_func_snprintf_pos_params,
            [
                AC_TRY_RUN(
                    [
                        #include <stdio.h>

                        int main (void)
                        {
                            char buffer[128];
                            snprintf (buffer, 128, "%2$d %3$d %1$d", 1, 2, 3);
                            if (strcmp ("2 3 1", buffer) == 0)
                                exit (0);
                            exit (1);
                        }
                    ],
                    wx_cv_func_snprintf_pos_params=no,
                    wx_cv_func_snprintf_pos_params=yes,
                    dnl be pessimistic when cross-compiling
                    [
                        AC_MSG_WARN([Assuming Unix98 printf() is not available,
define HAVE_UNIX98_PRINTF as 1 in setup.h if it is available.])
                        wx_cv_func_snprintf_pos_params=no
                    ]
                )
            ]
        )

        if test "$wx_cv_func_snprintf_pos_params" = "yes"; then
            AC_DEFINE(HAVE_UNIX98_PRINTF)
        fi
    fi
fi

dnl the same as above but for vsscanf() now: it's not present in at least
dnl Solaris 9 headers for gcc-3.4 (due to fixinclude's processing of stdio.h)
if test "$ac_cv_func_vsscanf" = "yes"; then
    AC_CACHE_CHECK([for vsscanf declaration], wx_cv_func_vsscanf_decl,
        [
            AC_TRY_COMPILE(
                [
                    #include <stdio.h>
                    #include <stdarg.h>
                    #ifdef __MSL__
                    #if __MSL__ >= 0x6000
                    namespace std {}
                    using namespace std;
                    #endif
                    #endif
                ],
                [
                    char *buf;
                    va_list args;
                    vsscanf(buf, "%s", args);
                ],
                wx_cv_func_vsscanf_decl=yes,
                wx_cv_func_vsscanf_decl=no
            )
        ]
    )

    if test "$wx_cv_func_vsscanf_decl" = "yes"; then
        AC_DEFINE(HAVE_VSSCANF_DECL)

        dnl we know there is a vsscanf() declaration, but it can be broken by
        dnl declaring vsscanf() as taking a non-const first argument (this
        dnl happens at least under HP-UX 11.31, see #15638).
        AC_CACHE_CHECK([if vsscanf() declaration is broken], wx_cv_func_broken_vsscanf_decl,
            [
                AC_TRY_COMPILE(
                    [
                        #include <stdio.h>
                        #include <stdarg.h>
                        #ifdef __MSL__
                        #if __MSL__ >= 0x6000
                        namespace std {}
                        using namespace std;
                        #endif
                        #endif
                    ],
                    [
                        const char *buf;
                        va_list args;
                        vsscanf(buf, "%s", args);
                    ],
                    wx_cv_func_broken_vsscanf_decl=no,
                    wx_cv_func_broken_vsscanf_decl=yes
                )
            ]
        )

        if test "$wx_cv_func_broken_vsscanf_decl" = "yes"; then
            AC_DEFINE(HAVE_BROKEN_VSSCANF_DECL)
        fi
    fi
fi
AC_LANG_POP()

dnl also look if we have wide char IO functions, notice that [f]putws are
dnl declared in special widec.h under Solaris
wchar_headers="#include <stdio.h>
#include <wchar.h>"
case "${host}" in
    *-*-solaris2* )
        AC_CHECK_HEADERS(widec.h,,, [AC_INCLUDES_DEFAULT()])
        if test "$ac_cv_header_widec_h" = "yes"; then
            wchar_headers="$wchar_headers
#include <widec.h>"
        fi
esac

WX_CHECK_FUNCS(putws fputws wprintf vswprintf vswscanf,,,
               [$wchar_headers])

dnl MinGW has a vswprintf with a different prototype, and
dnl a _vsnwprintf with the correct prototype, but AC_CHECK_FUNCS
dnl finds it even if it is not declared in some versions...
AC_MSG_CHECKING([for _vsnwprintf])
AC_TRY_COMPILE([#include <wchar.h>],
               [&_vsnwprintf;],
               [AC_MSG_RESULT([yes])
                AC_DEFINE(HAVE__VSNWPRINTF)],
               [AC_MSG_RESULT([no])]);

if test "$wxUSE_FILE" = "yes"; then
    WX_CHECK_FUNCS(fsync)
fi

dnl at least under IRIX with mipsPro the C99 round() function is available when
dnl building using the C compiler but not when using C++ one
AC_CACHE_CHECK([for round], wx_cv_func_round, [
AC_LANG_PUSH(C++)
AC_TRY_LINK(
    [#include <math.h>],
    [return int(round(0.0))],
    wx_cv_func_round=yes, wx_cv_func_round=no)
AC_LANG_POP()
])
if test "$wx_cv_func_round" = yes; then
    AC_DEFINE(HAVE_ROUND)
fi

dnl the following tests are for Unix(like) systems only
if test "$TOOLKIT" != "MSW"; then

dnl check for available version of iconv()
if test "$wxUSE_LIBICONV" != "no" ; then
    AC_LANG_PUSH(C++)
    AM_ICONV
    AC_LANG_POP()
    LIBS="$LIBICONV $LIBS"
fi

dnl check for POSIX signals if we need them
if test "$wxUSE_ON_FATAL_EXCEPTION" = "yes" -a "$wxUSE_UNIX" = "yes"; then
    AC_CHECK_FUNCS(sigaction)

    if test "$ac_cv_func_sigaction" = "no"; then
        AC_MSG_WARN([No POSIX signal functions on this system, wxApp::OnFatalException will not be called])
        wxUSE_ON_FATAL_EXCEPTION=no
    fi

    if test "$wxUSE_ON_FATAL_EXCEPTION" = "yes"; then
      AC_CACHE_CHECK([for sa_handler type], wx_cv_type_sa_handler,
      [
        dnl C compiler happily compiles the code even if there is type mismatch
        AC_LANG_PUSH(C++)
        AC_TRY_COMPILE([#include <signal.h>],
                     [
                        extern void testSigHandler(int);

                        struct sigaction sa;
                        sa.sa_handler = testSigHandler;
                     ], [
                        wx_cv_type_sa_handler=int
                     ], [
                        wx_cv_type_sa_handler=void
                     ])
        AC_LANG_POP()
      ])

      AC_DEFINE_UNQUOTED(wxTYPE_SA_HANDLER, $wx_cv_type_sa_handler)
    fi
fi

dnl backtrace() and backtrace_symbols() for wxStackWalker
if test "$wxUSE_STACKWALKER" = "yes" -a "$wxUSE_UNIX" = "yes"; then
    AC_CACHE_CHECK([for backtrace()], wx_cv_func_backtrace,
        [
            AC_LANG_PUSH(C++)
            AC_TRY_COMPILE([#include <execinfo.h>],
                [
                    void *trace[1];
                    char **messages;
                    backtrace(trace, 1);
                    messages = backtrace_symbols(trace, 1);
                ],
                wx_cv_func_backtrace=yes,
                wx_cv_func_backtrace=no
            )
            AC_LANG_POP()
        ]
    )

    dnl Under BSD it can require linking with libexecinfo.
    AC_SEARCH_LIBS(backtrace, execinfo, , [wx_cv_func_backtrace=no])

    if test "$wx_cv_func_backtrace" = "no"; then
        AC_MSG_WARN([backtrace() is not available, wxStackWalker will not be available])
        wxUSE_STACKWALKER=no
    else
        if test "$ac_cv_header_cxxabi_h" = "yes"; then
            AC_CACHE_CHECK([for __cxa_demangle() in <cxxabi.h>], wx_cv_func_cxa_demangle,
                [
                    AC_LANG_PUSH(C++)
                    AC_TRY_LINK([#include <cxxabi.h>],
                        [
                            int rc;
                            __cxxabiv1::__cxa_demangle("foo", 0, 0, &rc);
                        ],
                        wx_cv_func_cxa_demangle=yes,
                        wx_cv_func_cxa_demangle=no
                    )
                    AC_LANG_POP()
                ]
            )
        else
            wx_cv_func_cxa_demangle=no
        fi

        if test "$wx_cv_func_cxa_demangle" = "yes"; then
            AC_DEFINE(HAVE_CXA_DEMANGLE)
        fi
    fi
fi

if test "$wxUSE_STACKWALKER" = "yes" -a "$USE_WIN32" != 1 -a "$USE_UNIX" != 1; then
    AC_MSG_WARN([wxStackWalker is only available on Win32 and UNIX... disabled])
    wxUSE_STACKWALKER=no
fi


dnl check for the function for temp files creation
AC_CHECK_FUNCS(mkstemp mktemp, break)

dnl get the library function to use for wxGetDiskSpace(): it is statfs() under
dnl Linux and *BSD and statvfs() under Solaris
AC_CACHE_CHECK(for statfs, wx_cv_func_statfs,
    AC_TRY_COMPILE(
        [
             #if defined(__BSD__)
             #include <sys/param.h>
             #include <sys/mount.h>
             #else
             #include <sys/vfs.h>
             #endif
        ],
        [
             long l;
             struct statfs fs;
             statfs("/", &fs);
             l = fs.f_bsize;
             l += fs.f_blocks;
             l += fs.f_bavail;
        ],
         wx_cv_func_statfs=yes,
         wx_cv_func_statfs=no
    )
)

if test "$wx_cv_func_statfs" = "yes"; then
    dnl check whether we have its dcelaration too: some systems (AIX 4) lack it
    AC_CACHE_CHECK(for statfs declaration, wx_cv_func_statfs_decl,
        AC_LANG_PUSH(C++)
        AC_TRY_COMPILE(
            [
                 #if defined(__BSD__)
                 #include <sys/param.h>
                 #include <sys/mount.h>
                 #else
                 #include <sys/vfs.h>
                 #endif
            ],
            [
                struct statfs fs;
                statfs("", &fs);
            ],
            wx_cv_func_statfs_decl=yes,
            wx_cv_func_statfs_decl=no
        )
        AC_LANG_POP()
    )

    if test "$wx_cv_func_statfs_decl" = "yes"; then
        AC_DEFINE(HAVE_STATFS_DECL)
    fi

    wx_cv_type_statvfs_t="struct statfs"
    AC_DEFINE(HAVE_STATFS)
else
    AC_CACHE_CHECK(for statvfs, wx_cv_func_statvfs,
        AC_TRY_COMPILE(
            [
                #include <stddef.h>
                #include <sys/statvfs.h>
            ],
            [
                statvfs("/", NULL);
            ],
            wx_cv_func_statvfs=yes,
            wx_cv_func_statvfs=no
        )
    )

    if test "$wx_cv_func_statvfs" = "yes"; then
        dnl we also have to check whether we should use statvfs_t (works under
        dnl Solaris 8, doesn't work under Solaris 7) or "struct statvfs" (vice
        dnl versa) as the argument for statvfs in 64 bit off_t mode (in 32 bit
        dnl mode both work fine)
        dnl
        dnl for this check C++ compiler has to be used as passing incompatible
        dnl pointers is just a warning and not an error in C
        AC_CACHE_CHECK(for statvfs argument type, wx_cv_type_statvfs_t,
            AC_LANG_PUSH(C++)
            AC_TRY_COMPILE(
                [
                    #include <sys/statvfs.h>
                ],
                [
                    long l;
                    statvfs_t fs;
                    statvfs("/", &fs);
                    l = fs.f_bsize;
                    l += fs.f_blocks;
                    l += fs.f_bavail;
                ],
                wx_cv_type_statvfs_t=statvfs_t,
                [
                    AC_TRY_COMPILE(
                        [
                            #include <sys/statvfs.h>
                        ],
                        [
                            long l;
                            struct statvfs fs;
                            statvfs("/", &fs);
                            l = fs.f_bsize;
                            l += fs.f_blocks;
                            l += fs.f_bavail;
                        ],
                        wx_cv_type_statvfs_t="struct statvfs",
                        wx_cv_type_statvfs_t="unknown"
                    )
                ]
            )
            AC_LANG_POP()
        )

        if test "$wx_cv_type_statvfs_t" != "unknown"; then
            AC_DEFINE(HAVE_STATVFS)
        fi
    else
        dnl set it for the test below
        wx_cv_type_statvfs_t="unknown"
    fi
fi

if test "$wx_cv_type_statvfs_t" != "unknown"; then
    AC_DEFINE_UNQUOTED(WX_STATFS_T, $wx_cv_type_statvfs_t)
else
    AC_MSG_WARN([wxGetDiskSpace() function won't work without statfs()])
fi

dnl check for fcntl() or at least flock() needed by Unix implementation of
dnl wxSingleInstanceChecker
if test "$wxUSE_SNGLINST_CHECKER" = "yes" -a "$USE_WIN32" != 1 ; then
    AC_CHECK_FUNCS(fcntl flock, break)

    if test "$ac_cv_func_fcntl" != "yes" -a "$ac_cv_func_flock" != "yes"; then
        AC_MSG_WARN(wxSingleInstanceChecker not available)
        wxUSE_SNGLINST_CHECKER=no
    fi
fi

dnl look for a function to modify the environment
AC_CHECK_FUNCS(setenv putenv, break)
if test "$ac_cv_func_setenv" = "yes"; then
    AC_CHECK_FUNCS(unsetenv)
fi

HAVE_SOME_SLEEP_FUNC=0
if test "$USE_BEOS" = 1; then
    dnl BeOS has its own (wonder where did they get it from) sleep() function
    dnl in unistd.h
    AC_DEFINE(HAVE_SLEEP)
    HAVE_SOME_SLEEP_FUNC=1
fi

if test "$USE_DARWIN" = 1; then
    dnl Mac OS X/Darwin has both nanosleep and usleep
    dnl but only usleep is defined in unistd.h
    AC_DEFINE(HAVE_USLEEP)
    HAVE_SOME_SLEEP_FUNC=1
fi

if test "$HAVE_SOME_SLEEP_FUNC" != 1; then
    dnl try nanosleep() in libc and libposix4, if this fails - usleep()
    POSIX4_LINK=
    AC_CHECK_FUNCS(nanosleep,
        AC_DEFINE(HAVE_NANOSLEEP),
        [
            AC_CHECK_LIB(posix4, nanosleep,
                [
                    AC_DEFINE(HAVE_NANOSLEEP)
                    POSIX4_LINK=" -lposix4"
                ],
                [
                    WX_CHECK_FUNCS(usleep,,
                                    AC_MSG_WARN([wxSleep() function will not work])
                    )
                ]
            )
        ]
    )
fi

dnl check for uname (POSIX) and gethostname (BSD)
WX_CHECK_FUNCS(uname,,,[#include <sys/utsname.h>])
if test "$wx_cv_func_uname" != yes; then
    WX_CHECK_FUNCS(gethostname)
fi

WX_CHECK_FUNCS(strtok_r, [], [], [#define _REENTRANT])

dnl check for inet_addr and inet_aton (these may live either in libc, or in
dnl libnsl or libresolv or libsocket or libnetwork under Haiku)
INET_LINK=
AC_CHECK_FUNCS(inet_addr,
    AC_DEFINE(HAVE_INET_ADDR),
    [
        AC_CHECK_LIB(nsl, inet_addr,
            INET_LINK="nsl",
            [
                AC_CHECK_LIB(resolv, inet_addr,
                    INET_LINK="resolv",
                    [
                        AC_CHECK_LIB(socket, inet_addr,
                            INET_LINK="socket",
                            [
				AC_CHECK_LIB(network, inet_addr,
                                   INET_LINK="network"
                                )
                            ]
                        )
                    ]
                )
            ]
        )
    ]
)

AC_CHECK_FUNCS(inet_aton,
        AC_DEFINE(HAVE_INET_ATON),
        [
            dnl only check it in the same lib
            AC_CHECK_LIB($INET_LINK, inet_aton, AC_DEFINE(HAVE_INET_ATON))
        ])

if test "x$INET_LINK" != "x"; then
    AC_DEFINE(HAVE_INET_ADDR)
    INET_LINK=" -l$INET_LINK"
fi

WX_CHECK_FUNCS(fdopen)

if test "$wxUSE_TARSTREAM" = "yes"; then
    WX_CHECK_FUNCS(sysconf)

    WX_CHECK_FUNCS(getpwuid_r, [], [],
                   [
                    #define _REENTRANT
                    #include <pwd.h>
                   ],
                   [[
                    struct passwd pw, *ppw;
                    char buf[1024];
                    getpwuid_r(0, &pw, buf, sizeof(buf), &ppw)
                   ]])

    WX_CHECK_FUNCS(getgrgid_r, [], [],
                   [
                    #define _REENTRANT
                    #include <grp.h>
                   ],
                   [[
                    struct group grp, *pgrp;
                    char buf[1024];
                    getgrgid_r(0, &grp, buf, sizeof(buf), &pgrp)
                   ]])
fi

fi


dnl ===========================================================================
dnl Now we have all the info we need - use it!
dnl ===========================================================================

dnl flush the cache
AC_CACHE_SAVE

dnl ---------------------------------------------------------------------------
dnl thread support for Unix (for Win32 and OS/2 see past
dnl                          the next matching "else")
dnl ---------------------------------------------------------------------------

dnl under MSW (except mingw32) we always have thread support
if test "$TOOLKIT" != "MSW"; then

    dnl the code below:
    dnl
    dnl   defines THREADS_LINK and THREADS_CFLAGS which are the options
    dnl   necessary to build the MT programs for the linker and compiler
    dnl   respectively
    dnl
    dnl   sets wxUSE_THREADS=1 if thread support is activated

    THREADS_LINK=
    THREADS_CFLAGS=

    if test "$wxUSE_THREADS" = "yes" ; then
        if test "$USE_BEOS" = 1; then
            AC_MSG_WARN([BeOS threads are not yet supported... disabled])
            wxUSE_THREADS="no"
        fi
    fi

    if test "$wxUSE_THREADS" = "yes" ; then
        dnl find if POSIX threads are available
        dnl
        dnl the tests here are based on ACX_PTHREAD macro from autoconf macro
        dnl archive from http://ac-archive.sourceforge.net/
        dnl
        dnl thanks to Steven G. Johnson <stevenj@alum.mit.edu> and Alejandro
        dnl Forero Cuervo <bachue@bachue.com> for the original code

        dnl TODO: cache the result

        dnl define the list of the thread options to try in the loop below
        dnl with the convention that anything starting with '-' is a cpp flag
        dnl while anything else is a library (i.e. there is an implicit "-l")
        THREAD_OPTS="-pthread"
        if test "x$SUNCXX" = xyes; then
            THREAD_OPTS="-mt lthread $THREAD_OPTS"
        fi

        case "${host}" in
          *-*-solaris2* | *-*-sunos4* )
                if test "x$GCC" = "xyes"; then
                    dnl Solaris/gcc combination use this one for some reason
                    THREAD_OPTS="-pthreads $THREAD_OPTS"
                fi
                ;;
          *-*-freebsd*)
                dnl look, in order, for the kernel threads, then Linux threads
                dnl and finally the userland threads
                THREAD_OPTS="-kthread lthread $THREAD_OPTS c_r"
                ;;
          *-*-darwin* | *-*-cygwin* )
                dnl Darwin / Mac OS X just uses -lpthread tested below
                dnl and so does Cygwin
                THREAD_OPTS=""
                ;;
          *-*-aix*)
                dnl AIX calls the library libpthreads - thanks IBM!
                THREAD_OPTS="pthreads"
                ;;
          *-hp-hpux* )
                if test "x$GCC" = "xyes"; then
                    dnl g++ versions before 3.3.2 don't support -pthread.
                    $CXX -dumpspecs | grep 'pthread:' >/dev/null ||
                        THREAD_OPTS=""
                else
                    dnl HP-UX aCC (tested with version B3910B A.06.05 [Jul 25
                    dnl 2005]) supports -mt
                    THREAD_OPTS="-mt"
                fi
                ;;

          *-*-irix* )
                dnl gcc under IRIX doesn't seem to like -pthread, but it
                dnl doesn't give an error for it neither, just a warning
                dnl message -- but this is still very annoying
                if test "x$GCC" = "xyes"; then
                    THREAD_OPTS=""
                fi
                ;;

          *-*-qnx*)
                dnl under QNX thread functions are in libc so we don't need any
                dnl special options to link with them
                THREAD_OPTS=""
                ;;

          *-*-*UnixWare*)
                dnl flying by man pages here: Caldera online docs use this
                if test "x$GCC" != "xyes"; then
                    THREAD_OPTS="-Ethread"
                fi
                ;;
        esac

        case "${host}" in
            *-*-qnx*)
                dnl -lpthread works, i.e. AC_TRY_LINK() would pass, but results
                dnl in warnings and is not needed under QNX so try without it
                dnl first
                THREAD_OPTS="none pthread"
                ;;

            *)
                dnl simply linking with libpthread should make the test below
                dnl work but it's far from certain that the threaded programs
                dnl compiled without any special switches actually work, so try
                dnl it after all the others
                THREAD_OPTS="$THREAD_OPTS pthread none"
                ;;
        esac

        dnl now test for all possibilities
        THREADS_OK=no
        for flag in $THREAD_OPTS; do
            case $flag in
                none)
                    AC_MSG_CHECKING([whether pthreads work without any flags])
                    ;;

                -*)
                    AC_MSG_CHECKING([whether pthreads work with $flag])
                    THREADS_CFLAGS="$flag"
                    ;;

                *)
                    AC_MSG_CHECKING([for the pthreads library -l$flag])
                    THREADS_LINK="-l$flag"
                    ;;
              esac

              save_LIBS="$LIBS"
              save_CFLAGS="$CFLAGS"
              LIBS="$THREADS_LINK $LIBS"
              CFLAGS="$THREADS_CFLAGS $CFLAGS"

              AC_TRY_LINK([#include <pthread.h>],
                          [pthread_create(0,0,0,0);],
                          THREADS_OK=yes)

              LIBS="$save_LIBS"
              CFLAGS="$save_CFLAGS"

              AC_MSG_RESULT($THREADS_OK)
              if test "x$THREADS_OK" = "xyes"; then
                      break;
              fi

              THREADS_LINK=""
              THREADS_CFLAGS=""
      done

      if test "x$THREADS_OK" != "xyes"; then
          wxUSE_THREADS=no
          AC_MSG_WARN([No thread support on this system... disabled])
      else
          dnl yes, these special compiler flags should be used with the
          dnl linker as well
          dnl
          dnl NB: add them to LDFLAGS immediately because we need them to be
          dnl     used for the subsequent tests some of which can fail without
          dnl     MT support, hence the reason for the duplication below:
          dnl     adding them just to WXCONFIG_LDFLAGS and adding the entire
          dnl     contents of the latter to LDFLAGS in the end is not enough.
          LDFLAGS="$THREADS_CFLAGS $LDFLAGS"
          WXCONFIG_LDFLAGS="$THREADS_CFLAGS $WXCONFIG_LDFLAGS"
          LIBS="$THREADS_LINK $LIBS"

          AC_MSG_CHECKING([if more special flags are required for pthreads])
          flag=no
          case "${host}" in
            *-aix*)
                dnl again quoting from
                dnl http://www-1.ibm.com/servers/esdd/articles/gnu.html:
                dnl
                dnl     When compiling and linking with -pthread, the library
                dnl     search path should include -L/usr/lib/threads at the
                dnl     beginning of the path.
                LDFLAGS="-L/usr/lib/threads $LDFLAGS"
                WXCONFIG_LDFLAGS="-L/usr/lib/threads $WXCONFIG_LDFLAGS"
                flag="-D_THREAD_SAFE"
                ;;
            *-freebsd*)
                flag="-D_THREAD_SAFE"
                ;;
            *-hp-hpux* )
                flag="-D_REENTRANT"
                if test "x$GCC" != "xyes"; then
                    dnl see http://docs.hp.com/hpux/onlinedocs/2213/threads.htm
                    flag="$flag -D_RWSTD_MULTI_THREAD"
                fi
                ;;
            *solaris* | alpha*-osf*)
                flag="-D_REENTRANT"
                ;;
          esac
          AC_MSG_RESULT(${flag})
          if test "x$flag" != xno; then
              THREADS_CFLAGS="$THREADS_CFLAGS $flag"
          fi

          dnl don't add these options to CPPFLAGS as cpp might not know them
          WXCONFIG_CFLAGS="$WXCONFIG_CFLAGS $THREADS_CFLAGS"
      fi
    fi

    dnl do other tests only if we are using threads
    if test "$wxUSE_THREADS" = "yes" ; then
        AC_CHECK_FUNCS(pthread_setconcurrency,
            AC_DEFINE(HAVE_PTHREAD_SET_CONCURRENCY),
            [
                AC_CHECK_FUNCS(thr_setconcurrency,
                    AC_DEFINE(HAVE_THR_SETCONCURRENCY),
                    AC_MSG_WARN(Setting thread concurrency will not work properly))
            ])

      dnl can't use AC_CHECK_FUNCS for this one as it's usually a macro and so
      dnl wouldn't be found by it
      AC_CACHE_CHECK([for pthread_cleanup_push/pop], wx_cv_func_pthread_cleanup,
      [
        dnl C compiler may treat pthread_cleanup_push() as an undeclared
        dnl function and not give a warning even if it's unavailable, so use
        dnl the C++ one for this test
        AC_LANG_PUSH(C++)
        AC_TRY_COMPILE([#include <pthread.h>
               void ThreadCleanupFunc(void *p);
            ],
            [
                void *p;
                pthread_cleanup_push(ThreadCleanupFunc, p);
                pthread_cleanup_pop(0);
            ], [
               wx_cv_func_pthread_cleanup=yes
            ], [
               wx_cv_func_pthread_cleanup=no
            ]
        )
        AC_LANG_POP()
      ])
      if test "x$wx_cv_func_pthread_cleanup" = "xyes"; then
        AC_DEFINE(wxHAVE_PTHREAD_CLEANUP)
      fi

      AC_CHECK_HEADERS(sched.h,,, [AC_INCLUDES_DEFAULT()])
      if test "$ac_cv_header_sched_h" = "yes"; then
          AC_CHECK_FUNC(sched_yield,
            AC_DEFINE(HAVE_SCHED_YIELD),
            [
                AC_CHECK_LIB(posix4,
                    sched_yield,
                    [AC_DEFINE(HAVE_SCHED_YIELD) POSIX4_LINK=" -lposix4"],
                    AC_MSG_WARN(wxThread::Yield will not work properly)
                )
            ]
          )
      fi

      dnl to be able to set the thread priority, we need to have all of the
      dnl following functions:
      dnl   1. pthread_attr_getschedpolicy
      dnl   2. sched_get_priority_min and sched_get_priority_max
      dnl      (this one can be in either libpthread or libposix4 (under Solaris))
      dnl   3. pthread_attr_getschedparam and pthread_attr_setschedparam
      HAVE_PRIOR_FUNCS=0
      AC_CHECK_FUNC(pthread_attr_getschedpolicy,
                     [AC_CHECK_FUNC(pthread_attr_setschedparam,
                       [AC_CHECK_FUNC(sched_get_priority_max,
                           HAVE_PRIOR_FUNCS=1,
                           [AC_CHECK_LIB([posix4], sched_get_priority_max,
                             [
                                HAVE_PRIOR_FUNCS=1
                                POSIX4_LINK=" -lposix4"
                             ],
                           )]
                       )]
                     )]
                   )

      if test "$HAVE_PRIOR_FUNCS" = 1; then
        AC_DEFINE(HAVE_THREAD_PRIORITY_FUNCTIONS)
      else
        AC_MSG_WARN(Setting thread priority will not work)
      fi

      AC_CHECK_FUNC(pthread_cancel,
                    AC_DEFINE(HAVE_PTHREAD_CANCEL),
                    AC_MSG_WARN([wxThread::Kill() will not work properly]))

      AC_CHECK_FUNC(pthread_mutex_timedlock,
                    AC_DEFINE(HAVE_PTHREAD_MUTEX_TIMEDLOCK),
                    AC_MSG_WARN([wxMutex::LockTimeout() will not work]))

      AC_CHECK_FUNC(pthread_attr_setstacksize,
                    AC_DEFINE(HAVE_PTHREAD_ATTR_SETSTACKSIZE))

      dnl mutexattr_t initialization is done in quite different ways on different
      dnl platforms, so check for a few things:
      dnl
      dnl HAVE_MUTEX_RECURSIVE means that we can create recursive mutexes
      dnl HAVE_MUTEXATTR_SETTYPE means that we do it using
      dnl pthread_mutexattr_settype(PTHREAD_MUTEX_RECURSIVE) and if it is not
      dnl defined, we do it by directly assigned
      dnl PTHREAD_MUTEX_RECURSIVE_MUTEX_INITIALIZER_NP to attr

      AC_CACHE_CHECK([for pthread_mutexattr_t], wx_cv_type_pthread_mutexattr_t,
      [
        AC_TRY_COMPILE([#include <pthread.h>],
            [
               pthread_mutexattr_t attr;
               pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);
            ],
            wx_cv_type_pthread_mutexattr_t=yes,
            wx_cv_type_pthread_mutexattr_t=no
        )
      ])

      if test "$wx_cv_type_pthread_mutexattr_t" = "yes"; then
        AC_DEFINE(HAVE_PTHREAD_MUTEXATTR_T)

        dnl check if we already have the declaration we need, it is not
        dnl present in some systems' headers
        AC_CACHE_CHECK([for pthread_mutexattr_settype declaration],
                       wx_cv_func_pthread_mutexattr_settype_decl, [
                       AC_TRY_COMPILE([#include <pthread.h>],
                           [
                               pthread_mutexattr_t attr;
                               pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);
                           ],
                           wx_cv_func_pthread_mutexattr_settype_decl=yes,
                           wx_cv_func_pthread_mutexattr_settype_decl=no
                       )
        ])
        if test "$wx_cv_func_pthread_mutexattr_settype_decl" = "yes"; then
            AC_DEFINE(HAVE_PTHREAD_MUTEXATTR_SETTYPE_DECL)
        fi
      else
        dnl don't despair, there may be another way to do it
        AC_CACHE_CHECK([for PTHREAD_RECURSIVE_MUTEX_INITIALIZER],
                       wx_cv_type_pthread_rec_mutex_init,
        [
            AC_TRY_COMPILE([#include <pthread.h>],
                [
                    pthread_mutex_t attr = PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP;
                ], [
                    wx_cv_type_pthread_rec_mutex_init=yes
                ], [
                    wx_cv_type_pthread_rec_mutex_init=no
                ]
            )
        ])
        if test "$wx_cv_type_pthread_rec_mutex_init" = "yes"; then
          AC_DEFINE(HAVE_PTHREAD_RECURSIVE_MUTEX_INITIALIZER)
        else
          dnl this may break code working elsewhere, so at least warn about it
          AC_MSG_WARN([wxMutex won't be recursive on this platform])
        fi
      fi

      if test "$wxUSE_COMPILER_TLS" = "yes"; then
          dnl test for compiler thread-specific variables support
          AC_CACHE_CHECK([for __thread keyword],
                         wx_cv_cc___thread,
              [
                  AC_TRY_COMPILE([#include <pthread.h>],
                      [
                          static __thread int n = 0;
                          static __thread int *p = 0;
                      ],
                      wx_cv_cc___thread=yes,
                      wx_cv_cc___thread=no
                  )
              ]
          )

          if test "$wx_cv_cc___thread" = "yes"; then
              AX_GXX_VERSION
              if test -n "$ax_cv_gxx_version"; then
                  dnl g++ supports __thread since at least version 3.3 but its support
                  dnl seems to be broken until 4.1, see
                  dnl   http://thread.gmane.org/gmane.comp.lib.wxwidgets.devel/108388
                  dnl
                  dnl NB: we still need to test __thread support with
                  dnl     AC_TRY_COMPILE above even for g++ 4 as it doesn't
                  dnl     support it for all architectures (e.g. it doesn't
                  dnl     work under OS X)
                  AC_MSG_CHECKING([whether __thread support in g++ is usable])
                  case "$ax_cv_gxx_version" in
                    1.* | 2.* | 3.* )
                        AC_MSG_RESULT([no, it's broken])
                        wx_cv_cc___thread=no
                        ;;
                    *)
                        AC_MSG_RESULT([yes, it works])
                        ;;
                  esac
              fi
          fi

          if test "$wx_cv_cc___thread" = "yes"; then
            AC_DEFINE(HAVE___THREAD_KEYWORD)
          fi
        fi

        if test "$ac_cv_header_cxxabi_h" = "yes"; then
            AC_CACHE_CHECK([for abi::__forced_unwind() in <cxxabi.h>],
                wx_cv_type_abi_forced_unwind,
                [
                    AC_LANG_PUSH(C++)
                    AC_TRY_COMPILE([#include <cxxabi.h>],
                        [
                            void foo(abi::__forced_unwind&);
                        ],
                        wx_cv_type_abi_forced_unwind=yes,
                        wx_cv_type_abi_forced_unwind=no
                    )
                    AC_LANG_POP()
                ]
            )
        else
            wx_cv_type_abi_forced_unwind=no
        fi

        if test "$wx_cv_type_abi_forced_unwind" = "yes"; then
            AC_DEFINE(HAVE_ABI_FORCEDUNWIND)
        fi
    fi

dnl from if !MSW
else
    if test "$wxUSE_THREADS" = "yes" ; then
      case "${host}" in
        x86_64-*-mingw* )
        ;;
        *-*-mingw32* )
            dnl check if the compiler accepts -mthreads
            AC_CACHE_CHECK([if compiler supports -mthreads],
                wx_cv_cflags_mthread,
                [
                    CFLAGS_OLD="$CFLAGS"
                    CFLAGS="-mthreads $CFLAGS"
                    AC_TRY_COMPILE([], [],
                        wx_cv_cflags_mthread=yes,
                        wx_cv_cflags_mthread=no
                    )
                ]
            )

            if test "$wx_cv_cflags_mthread" = "yes"; then
                dnl it does, use it
                WXCONFIG_CFLAGS="$WXCONFIG_CFLAGS -mthreads"
                LDFLAGS="$LDFLAGS -mthreads"
            else
                dnl it doesn't
                CFLAGS="$CFLAGS_OLD"
            fi
        ;;
      esac
    fi
fi

AC_CHECK_FUNC(localtime_r, [ AC_DEFINE(HAVE_LOCALTIME_R) ])
AC_CHECK_FUNC(gmtime_r, [ AC_DEFINE(HAVE_GMTIME_R) ])
dnl By preference, we probably should use getaddrinfo which avoids thread
dnl safety issues and supports IPv6, however there currently is no code
dnl for it, so testing for it is temporarily disabled and we are restricted
dnl to gethostbyname_r/gethostbyaddr_r  and getservbyname_r

dnl AC_CHECK_FUNC(getaddrinfo, AC_DEFINE(HAVE_GETADDRINFO), [
    dnl no getaddrinfo, so check for gethostbyname_r and
    dnl related functions (taken from python's configure.in)
    dnl sigh -- gethostbyname_r is a mess; it can have 3, 5 or 6 arguments
      AX_FUNC_WHICH_GETHOSTBYNAME_R
      if test "x$ac_cv_func_which_gethostbyname_r" = "xno" -o \
              "x$ac_cv_func_which_gethostbyname_r" = "xunknown" ; then
          AC_CHECK_FUNC(gethostbyname, [ AC_DEFINE(HAVE_GETHOSTBYNAME) ],
              [
                  dnl Under HaikuOS it is not yet detected
                  case "${host}" in
                  *-*-haiku* )
                    AC_DEFINE(HAVE_GETHOSTBYNAME)
                    AC_MSG_WARN([Defining HAVE_GETHOSTBYNAME unconditionally under ${host}.])
                    ;;
                  esac
              ]
           )
      fi
      dnl A similar test for getservbyname_r
      dnl I'm tempted to just not do this test which is taking much time and
      dnl do something similar as for gethostbyaddr_r, but OTOH the macro
      dnl doing the test already exists, so using it is easy enough.     - SN
      AC_raf_FUNC_WHICH_GETSERVBYNAME_R
      if test "x$ac_cv_func_which_getservbyname_r" = "xno" -o \
              "x$ac_cv_func_which_getservbyname_r" = "xunknown" ; then
          AC_CHECK_FUNCS(getservbyname,[ AC_DEFINE(HAVE_GETSERVBYNAME) ],
              [
                  dnl Under HaikuOS it is not yet detected
                  case "${host}" in
                  *-*-haiku* )
                    AC_DEFINE(HAVE_GETSERVBYNAME)
                    AC_MSG_WARN([Defining HAVE_GETSERVBYNAME unconditionally under ${host}.])
                    ;;
                  esac
              ]
           )
      fi
      dnl For gethostbyaddr_r, we currently do no separate test, instead, we
      dnl silently assume it's available exactly if gethostbyname_r is
      dnl available and always requires two more arguments than
      dnl gethostbyname_r.
      dnl (also, I'm lazy and there no m4 file that's ready for use for this
      dnl  function, although it should be easy to rewrite the gethostbyname_r
      dnl  check to fit this case, if it's really needed.                - SN )
dnl    ]
dnl )

dnl This is currently always defined under Unix, there is no reason to ever
dnl disable compiler TLS support there.
AC_DEFINE(wxUSE_COMPILER_TLS)

if test "$wxUSE_THREADS" = "yes"; then
  AC_DEFINE(wxUSE_THREADS)

  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS thread"
else
  dnl on some systems, _REENTRANT should be defined if we want to use any _r()
  dnl functions - add tests for other functions here as well
  if test "$wx_cv_func_strtok_r" = "yes"; then
    AC_MSG_CHECKING(if -D_REENTRANT is needed)
    if test "$NEEDS_D_REENTRANT_FOR_R_FUNCS" = 1; then
        WXCONFIG_CPPFLAGS="$WXCONFIG_CPPFLAGS -D_REENTRANT"
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
    fi
  fi
fi

if test "$WXGTK4" = 1 ; then
    AC_DEFINE_UNQUOTED(__WXGTK4__, 1)
fi
if test "$WXGTK3" = 1 ; then
    AC_DEFINE_UNQUOTED(__WXGTK3__, 1)
    WXGTK2=1
fi
if test "$WXGTK2" = 1 ; then
  AC_DEFINE_UNQUOTED(__WXGTK20__,$WXGTK2)
fi

if test "$WXGTK127" = 1 ; then
  AC_DEFINE_UNQUOTED(__WXGTK127__,$WXGTK127)
fi

if test "$WXGPE" = 1 ; then
  AC_DEFINE_UNQUOTED(__WXGPE__,$WXGPE)
fi

if test "$WXQT" = 1 ; then
  AC_DEFINE_UNQUOTED(__WXQT__,$WXQT)
fi
dnl DEBUG_CFLAGS contains debugging options (supposed to be the same for C and C++
dnl compilers: we'd need a separate DEBUG_CXXFLAGS if this is ever not the case)
DEBUG_CFLAGS=
if `echo $CXXFLAGS $CFLAGS | grep " -g" >/dev/null`; then
    dnl the CXXFLAGS or the CFLAGS variable already contains the -g flag
    dnl (e.g. it was specified by the user before running configure); since
    dnl later they will be merged with DEBUG_CFLAGS, don't set the -g option
    dnl in DEBUG_CFLAGS to avoid (possibly different) flag duplicates
    AC_MSG_WARN([CXXFLAGS/CFLAGS already contains -g flag; ignoring the --enable-debug_info option])
elif test "$wxUSE_DEBUG_INFO" = "yes" ; then
    DEBUG_CFLAGS="-g"
fi

if test "$wxUSE_DEBUG_GDB" = "yes" ; then
    wxUSE_DEBUG_INFO=yes
    if test "$GCC" = yes; then
        DEBUG_CFLAGS="-ggdb"
    fi
fi

if test "$wxUSE_DEBUG_FLAG" = "no" ; then
    WXCONFIG_CPPFLAGS="$WXCONFIG_CPPFLAGS -DwxDEBUG_LEVEL=0"

    if test "$wxUSE_GTK" = 1 ; then
        if test "$WXGTK2" = 1 ; then
            CPPFLAGS="$CPPFLAGS -DG_DISABLE_CAST_CHECKS"
        else
            CPPFLAGS="-DGTK_NO_CHECK_CASTS $CPPFLAGS"
        fi
    fi
fi

if test "$wxUSE_MEM_TRACING" = "yes" ; then
    AC_DEFINE(wxUSE_MEMORY_TRACING)
    AC_DEFINE(wxUSE_GLOBAL_MEMORY_OPERATORS)
    AC_DEFINE(wxUSE_DEBUG_NEW_ALWAYS)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS memcheck"
fi

if test "$wxUSE_DMALLOC" = "yes" ; then
    DMALLOC_LIBS="-ldmallocthcxx"
fi

dnl cc/cxx/ld option for profiling
PROFILE_FLAGS=
if test "$wxUSE_PROFILE" = "yes" ; then
    PROFILE_FLAGS=" -pg"
fi

if test "$GCC" = "yes" ; then
    if test "$wxUSE_NO_RTTI" = "yes" ; then
        dnl Define wxNO_RTTI on the command line because only g++ 4.3 and later
        dnl define __GXX_RTTI which allows us to detect the use of -fno-rtti
        dnl switch but we need to do it manually for the older versions.
        WXCONFIG_CXXFLAGS="$WXCONFIG_CXXFLAGS -DwxNO_RTTI -fno-rtti"
    fi
    if test "$wxUSE_NO_EXCEPTIONS" = "yes" ; then
        WXCONFIG_CXXFLAGS="$WXCONFIG_CXXFLAGS -fno-exceptions"
    fi
    if test "$wxUSE_PERMISSIVE" = "yes" ; then
        WXCONFIG_CFLAGS="$WXCONFIG_CFLAGS -fpermissive"
    fi

    dnl Ian Brown <ian.brown@printsoft.de> reports that versions of gcc before
    dnl 3.0 overflow the table of contents on rs6000 as they create an entry
    dnl for each subroutine by default -- using the switch below only creates
    dnl one entry per file instead at the price of minor performance penalty
    dnl
    dnl As of wx2.4 a bug in the hppa gcc compiler causes a similar problem
    dnl without -ffunction-sections.  No idea how long we'll need to maintain
    dnl this, or even the extent of gcc/wx version combinations affected, but
    dnl also as above, this 'fix' does not come without side effects.
    dnl
    dnl TODO: test for the gcc version here (how?)
    case "${host}" in
      powerpc*-*-aix* )
        WXCONFIG_CFLAGS="$WXCONFIG_CFLAGS -mminimal-toc"
        ;;
      *-hppa* )
        WXCONFIG_CFLAGS="$WXCONFIG_CFLAGS -ffunction-sections"
        ;;
    esac
fi

dnl C/C++ compiler option for optimization (supposed to be the same for both)
OPTIMISE_CFLAGS=
if `echo $CXXFLAGS $CFLAGS | grep " -O" >/dev/null`; then
    dnl the CXXFLAGS or the CFLAGS variable already contains -O optimization flag
    dnl (e.g. it was specified by the user before running configure); since
    dnl later they will be merged with OPTIMISE_CFLAGS, don't set the -O option
    dnl in OPTIMISE_CFLAGS to avoid (possibly different) flag duplicates
    AC_MSG_WARN([CXXFLAGS/CFLAGS already contains -O flag; ignoring the --disable-optimise option])
else
    if test "$wxUSE_OPTIMISE" = "no" ; then
        if test "$GCC" = yes ; then
            dnl use -O0 because compiling with it is faster than compiling with no
            dnl optimization options at all (at least with g++ 3.2)
            OPTIMISE_CFLAGS="-O0"
        fi
    else
        if test "$GCC" = yes ; then
            OPTIMISE_CFLAGS="-O2"
        else
            OPTIMISE_CFLAGS="-O"
        fi
    fi
fi

if test "x$wxUSE_REPRODUCIBLE_BUILD" = "xyes"; then
    AC_DEFINE(wxUSE_REPRODUCIBLE_BUILD)
fi

dnl ---------------------------------------------------------------------------
dnl compatibility level
dnl ---------------------------------------------------------------------------

if test "x$WXWIN_COMPATIBILITY_2_8" = "xyes"; then
    AC_DEFINE(WXWIN_COMPATIBILITY_2_8)

    WXWIN_COMPATIBILITY_3_0="yes"
fi

if test "x$WXWIN_COMPATIBILITY_3_0" != "xno"; then
    AC_DEFINE(WXWIN_COMPATIBILITY_3_0)
fi

dnl ---------------------------------------------------------------------------
dnl the library may be built without GUI classes at all
dnl ---------------------------------------------------------------------------

if test "$wxUSE_GUI" = "yes"; then
    AC_DEFINE(wxUSE_GUI)

    dnl the things we always pull in the GUI version of the library:
    dnl 1. basic things like wxApp, wxWindow, wxControl, wxFrame, wxDialog (the
    dnl    library really can't be built without those)
    dnl 2. basic controls: wxButton, wxStaticText, wxTextCtrl (these are used in
    dnl    almost any program and the first 2 are needed to show a message box
    dnl    which want to be always able to do)
    dnl 3. GDI stuff: icon, cursors and all that. Although it would be very nice
    dnl    to compile without them (if the app doesn't do any drawing, it doesn't
    dnl    need the dcs, pens, brushes, ...), this just can't be done now
    dnl 4. menu stuff: wxMenu, wxMenuBar, wxMenuItem
    dnl 5. misc stuff: timers, settings, message box
fi

dnl ---------------------------------------------------------------------------
dnl Unix/Windows
dnl ---------------------------------------------------------------------------

if test "$wxUSE_UNIX" = "yes"; then
  AC_DEFINE(wxUSE_UNIX)
fi

dnl ------------------------------------------------------------------------
dnl DLL support
dnl ------------------------------------------------------------------------

dnl under MSW we always have LoadLibrary/GetProcAddress
if test "$TOOLKIT" != "MSW"; then

    HAVE_DL_FUNCS=0
    HAVE_SHL_FUNCS=0
    if test "$wxUSE_DYNAMIC_LOADER" = "yes" -o "$wxUSE_DYNLIB_CLASS" = "yes" ; then
        if test "$USE_DOS" = 1; then
            HAVE_DL_FUNCS=0
        else
            dnl the test is a bit complicated because we check for dlopen() both with
            dnl and without -ldl and we also try to find shl_load() if there is no
            dnl dlopen() on this system
            AC_CHECK_FUNCS(dlopen,
            [
                AC_DEFINE(HAVE_DLOPEN)
                HAVE_DL_FUNCS=1
            ],
            [
                AC_CHECK_LIB(dl, dlopen,
                            [
                                AC_DEFINE(HAVE_DLOPEN)
                                HAVE_DL_FUNCS=1
                                DL_LINK="-ldl $DL_LINK"
                            ],
                            [
                                AC_CHECK_FUNCS(shl_load,
                                              [
                                                AC_DEFINE(HAVE_SHL_LOAD)
                                                HAVE_SHL_FUNCS=1
                                              ],
                                              [
                                                AC_CHECK_LIB(shl_load, dld,
                                                             [
                                                                HAVE_SHL_FUNCS=1
                                                                DL_LINK="-ldld $DL_LINK"
                                                             ])
                                              ])
                            ])
            ])

            dnl check also for dlerror()
            if test "$HAVE_DL_FUNCS" = 1; then
                AC_CHECK_FUNCS(dlerror,
                    AC_DEFINE(HAVE_DLERROR),
                    [
                        AC_CHECK_LIB(dl, dlerror, AC_DEFINE(HAVE_DLERROR))
                    ]
                )
                AC_CHECK_FUNCS(dladdr,
                    AC_DEFINE(HAVE_DLADDR),
                    [
                        AC_CHECK_LIB(dl, dladdr, AC_DEFINE(HAVE_DLADDR))
                    ]
                )
            fi
        fi

        dnl Force HAVE_DL_FUNCS on for Darwin, even if the tests failed (e.g. pre-10.3)
        if test "$USE_DARWIN" = 1; then
            dnl dlopen/dlerror is implemented in dynlib.cpp for Darwin/Mac OS X
            HAVE_DL_FUNCS=1
        fi

        if test "$HAVE_DL_FUNCS" = 0; then
            if test "$HAVE_SHL_FUNCS" = 0; then
              if test "$USE_UNIX" = 1 -o "$USE_DOS" = 1; then
                  AC_MSG_WARN([Missing dynamic loading support, several features will be disabled])
                  wxUSE_DYNAMIC_LOADER=no
                  wxUSE_DYNLIB_CLASS=no
              else
                  AC_MSG_WARN([Assuming wxLibrary class works on this platform])
              fi
            fi
        fi
    fi
fi

if test "$wxUSE_DYNAMIC_LOADER" = "yes" ; then
    AC_DEFINE(wxUSE_DYNAMIC_LOADER)
fi
if test "$wxUSE_DYNLIB_CLASS" = "yes" ; then
    AC_DEFINE(wxUSE_DYNLIB_CLASS)
fi


dnl ---------------------------------------------------------------------------
dnl Verify consistency of plugins/monolithic/shared settings:
dnl ---------------------------------------------------------------------------

if test "$wxUSE_PLUGINS" = "yes" ; then
    if test "$wxUSE_SHARED" = "no" ; then
        AC_MSG_WARN([plugins supported only in shared build, disabling])
        wxUSE_PLUGINS=no
    fi
    if test "$wxUSE_MONOLITHIC" = "yes" ; then
        AC_MSG_WARN([plugins not supported monolithic build, disabling])
        wxUSE_PLUGINS=no
    fi
    if test "$wxUSE_DYNLIB_CLASS" = "no" ; then
        AC_MSG_WARN([plugins require wxDynamicLibrary, disabling])
        wxUSE_PLUGINS=no
    fi
    if test "$wxUSE_PLUGINS" = "yes" ; then
        AC_DEFINE(wxUSE_PLUGINS)
    fi
fi

dnl ---------------------------------------------------------------------------
dnl File system watcher checks
dnl ---------------------------------------------------------------------------

if test "$wxUSE_FSWATCHER" = "yes"; then
    dnl wxFileSystemWatcher is always available under Windows but we need either
    dnl inotify or kqueue support in the system for it under Unix (this
    dnl includes OS X which does have kqueue but no other platforms)
    if test "$USE_WIN32" != 1; then
        if test "$wxUSE_UNIX" = "yes"; then
            AC_CHECK_HEADERS(sys/inotify.h,,, [AC_INCLUDES_DEFAULT()])
            if test "$ac_cv_header_sys_inotify_h" = "yes"; then
                AC_DEFINE(wxHAS_INOTIFY)
            else
                AC_CHECK_HEADERS(sys/event.h,,, [AC_INCLUDES_DEFAULT()])
                if test "$ac_cv_header_sys_event_h" = "yes"; then
                    AC_DEFINE(wxHAS_KQUEUE)
                else
                    wxUSE_FSWATCHER=no
                fi
            fi
        else
            wxUSE_FSWATCHER=no
        fi
    else
        if test "$wxUSE_THREADS" != "yes"; then
            AC_MSG_WARN([wxFileSystemWatcher disabled due to --disable-threads])
            wxUSE_FSWATCHER=no
        fi
    fi

    if test "$wxUSE_FSWATCHER" = "yes"; then
        AC_DEFINE(wxUSE_FSWATCHER)
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS fswatcher"
    else
        AC_MSG_WARN([wxFileSystemWatcher won't be available on this platform])
    fi
fi

dnl ---------------------------------------------------------------------------
dnl Secret storage
dnl ---------------------------------------------------------------------------

if test "$wxUSE_SECRETSTORE" = "yes"; then
    dnl The required APIs are always available under MSW and OS X but we must
    dnl have GNOME libsecret under Unix to be able to compile this class.
    if test "$WXGTK1" = "1"; then
        AC_MSG_WARN([libsecret is incompatible with GTK+ 1, disabled])
        wxUSE_SECRETSTORE=no
    elif test "$wxUSE_MSW" != "1" -a "$wxUSE_OSX_COCOA" != 1; then
        PKG_CHECK_MODULES(LIBSECRET, [libsecret-1],
            [
                CXXFLAGS="$LIBSECRET_CFLAGS $CXXFLAGS"
                LIBS="$LIBSECRET_LIBS $LIBS"
            ],
            [
                AC_MSG_WARN([libsecret not found, wxSecretStore won't be available])
                wxUSE_SECRETSTORE=no
            ]
        )
    fi

    if test "$wxUSE_SECRETSTORE" = "yes"; then
        if test "$USE_DARWIN" = 1; then
            LIBS="-framework Security $LIBS"
        fi

        AC_DEFINE(wxUSE_SECRETSTORE)
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS secretstore"
    fi
fi

dnl ---------------------------------------------------------------------------
dnl Register non-GUI class options for makefiles and setup.h
dnl ---------------------------------------------------------------------------

if test "$wxUSE_STL" = "yes"; then
  AC_DEFINE(wxUSE_STL)
fi

if test "$wxUSE_EXTENDED_RTTI" = "yes"; then
  AC_DEFINE(wxUSE_EXTENDED_RTTI)
fi

if test "$wxUSE_ANY" = "yes"; then
    AC_DEFINE(wxUSE_ANY)
fi

if test "$wxUSE_APPLE_IEEE" = "yes"; then
  AC_DEFINE(wxUSE_APPLE_IEEE)
fi

if test "$wxUSE_TIMER" = "yes"; then
  AC_DEFINE(wxUSE_TIMER)
fi

dnl Unix implementation needs additional checks because audio support
dnl comes in many favours:
if test "$USE_UNIX" = 1 ; then
    dnl it's not enough to check for just the header because OSS under NetBSD
    dnl redefines ioctl as oss_ioctrl inside it and so we also need to test
    dnl whether we need -lossaudio at link-time
    AC_CACHE_CHECK([for SNDCTL_DSP_SPEED in sys/soundcard.h], ac_cv_header_sys_soundcard, [
        AC_TRY_LINK([
                #include <sys/ioctl.h>
                #include <sys/soundcard.h>
            ],
            [
                ioctl(0, SNDCTL_DSP_SPEED, 0);
            ],
            ac_cv_header_sys_soundcard=yes,
            [
                saveLibs="$LIBS"
                LIBS="$saveLibs -lossaudio"
                AC_TRY_LINK([
                        #include <sys/ioctl.h>
                        #include <sys/soundcard.h>
                    ],
                    [
                        ioctl(0, SNDCTL_DSP_SPEED, 0);
                    ],
                    ac_cv_header_sys_soundcard=yes,
                    [
                        LIBS="$saveLibs"
                        ac_cv_header_sys_soundcard=no
                    ]
                )
            ]
        )
    ])

    if test "$ac_cv_header_sys_soundcard" = "yes"; then
        AC_DEFINE(HAVE_SYS_SOUNDCARD_H)
    fi
fi

WITH_PLUGIN_SDL=0
if test "$wxUSE_SOUND" = "yes"; then
  if test "$USE_UNIX" = 1 ; then
    if test "$wxUSE_LIBSDL" != "no"; then
      PKG_CHECK_MODULES([SDL], [sdl2 >= 2.0.0],
                  [
                    EXTRALIBS_SDL="$SDL_LIBS"
                    CFLAGS="$SDL_CFLAGS $CFLAGS"
                    CXXFLAGS="$SDL_CFLAGS $CXXFLAGS"
                    AC_DEFINE(wxUSE_LIBSDL)
                  ],
                  [
                    AC_MSG_NOTICE([SDL 2.0 not available. Falling back to 1.2.])
                    AM_PATH_SDL([1.2.0],
                                [
                                  EXTRALIBS_SDL="$SDL_LIBS"
                                  CFLAGS="$SDL_CFLAGS $CFLAGS"
                                  CXXFLAGS="$SDL_CFLAGS $CXXFLAGS"
                                  AC_DEFINE(wxUSE_LIBSDL)
                                ],
                                [wxUSE_LIBSDL="no"])
		  ])
      if test "$wxUSE_LIBSDL" = "yes" -a "$wxUSE_PLUGINS" = "yes" ; then
        WITH_PLUGIN_SDL=1
      fi
    fi
  fi
fi

if test "$wxUSE_SOUND" = "yes"; then
  AC_DEFINE(wxUSE_SOUND)
  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS sound"
fi

if test "$WXGTK2" = 1; then
    if test "$wxUSE_PRINTING_ARCHITECTURE" = "yes" ; then

        if test "$wxUSE_GTKPRINT" = "yes" ; then
            if test "$WXGTK3" = 1; then
                gtk_unix_print="gtk+-unix-print-${TOOLKIT_VERSION}.0"
            else
                gtk_unix_print="gtk+-unix-print-2.0 >= 2.10"
            fi
                PKG_CHECK_MODULES(GTKPRINT,
                                  [$gtk_unix_print],
                    [
                        GUI_TK_LIBRARY="$GUI_TK_LIBRARY $GTKPRINT_LIBS"
                        CFLAGS="$GTKPRINT_CFLAGS $CFLAGS"
                        CXXFLAGS="$GTKPRINT_CFLAGS $CXXFLAGS"
                        AC_DEFINE(wxUSE_GTKPRINT)
                    ],
                    [
                        AC_MSG_WARN([GTK printing support not found (GTK+ >= 2.10), library will use GNOME printing support or standard PostScript printing])
                        wxUSE_GTKPRINT="no"
                    ]
                )
        fi
    fi

    if test "$wxUSE_MIMETYPE" = "yes" ; then
        if test "$wxUSE_LIBGNOMEVFS" = "yes" ; then

                PKG_CHECK_MODULES(GNOMEVFS,
                                  [gnome-vfs-2.0 >= 2.0],
                    [
                        GUI_TK_LIBRARY="$GUI_TK_LIBRARY $GNOMEVFS_LIBS"
                        CFLAGS="$GNOMEVFS_CFLAGS $CFLAGS"
                        CXXFLAGS="$GNOMEVFS_CFLAGS $CXXFLAGS"
                        AC_DEFINE(wxUSE_LIBGNOMEVFS)
                    ],
                    [
                        AC_MSG_WARN([libgnomevfs not found, library won't be able to associate MIME type])
                        wxUSE_LIBGNOMEVFS="no"
                    ]
                )
        fi
    fi

    if test "$wxUSE_NOTIFICATION_MESSAGE" = "yes" ; then
        if test "$wxUSE_LIBNOTIFY" = "yes" ; then
            HAVE_LIBNOTIFY=0
            PKG_CHECK_MODULES(LIBNOTIFY, [libnotify >= 0.7],
                [
                    HAVE_LIBNOTIFY=1
                    AC_DEFINE(wxUSE_LIBNOTIFY_0_7)
                ],
                [
                    PKG_CHECK_MODULES(LIBNOTIFY, [libnotify >= 0.4],
                        [HAVE_LIBNOTIFY=1],
                        [
                            AC_MSG_WARN([libnotify not found, wxNotificationMessage will use generic implementation.])
                            wxUSE_LIBNOTIFY="no"
                        ]
                    )
                ]
            )

            if test "$HAVE_LIBNOTIFY" = "1" ; then
                GUI_TK_LIBRARY="$GUI_TK_LIBRARY $LIBNOTIFY_LIBS"
                CFLAGS="$LIBNOTIFY_CFLAGS $CFLAGS"
                CXXFLAGS="$LIBNOTIFY_CFLAGS $CXXFLAGS"
                AC_DEFINE(wxUSE_LIBNOTIFY)
            fi
        fi
    fi

fi

if test "$wxUSE_CMDLINE_PARSER" = "yes"; then
  AC_DEFINE(wxUSE_CMDLINE_PARSER)
fi

if test "$wxUSE_STOPWATCH" = "yes"; then
  AC_DEFINE(wxUSE_STOPWATCH)
fi

if test "$wxUSE_DATETIME" = "yes"; then
  AC_DEFINE(wxUSE_DATETIME)
fi

if test "$wxUSE_FILE" = "yes"; then
  AC_DEFINE(wxUSE_FILE)
fi

if test "$wxUSE_FFILE" = "yes"; then
  AC_DEFINE(wxUSE_FFILE)
fi

if test "$wxUSE_ARCHIVE_STREAMS" = "yes"; then
  if test "$wxUSE_STREAMS" != yes; then
    AC_MSG_WARN(wxArchive requires wxStreams... disabled)
    wxUSE_ARCHIVE_STREAMS=no
  else
    AC_DEFINE(wxUSE_ARCHIVE_STREAMS)
  fi
fi

if test "$wxUSE_ZIPSTREAM" = "yes"; then
  if test "$wxUSE_ARCHIVE_STREAMS" != "yes"; then
    AC_MSG_WARN(wxZip requires wxArchive... disabled)
  elif test "$wxUSE_ZLIB" = "no"; then
    AC_MSG_WARN(wxZip requires wxZlib... disabled)
  else
    AC_DEFINE(wxUSE_ZIPSTREAM)
  fi
fi

if test "$wxUSE_TARSTREAM" = "yes"; then
  if test "$wxUSE_ARCHIVE_STREAMS" != "yes"; then
    AC_MSG_WARN(wxTar requires wxArchive... disabled)
  else
    AC_DEFINE(wxUSE_TARSTREAM)
  fi
fi

if test "$wxUSE_FILE_HISTORY" = "yes"; then
  AC_DEFINE(wxUSE_FILE_HISTORY)
fi

if test "$wxUSE_FILESYSTEM" = "yes"; then
  if test "$wxUSE_STREAMS" != yes -o \( "$wxUSE_FILE" != yes -a "$wxUSE_FFILE" != yes \); then
    AC_MSG_WARN(wxFileSystem requires wxStreams and wxFile or wxFFile... disabled)
    wxUSE_FILESYSTEM=no
  else
    AC_DEFINE(wxUSE_FILESYSTEM)
  fi
fi

if test "$wxUSE_FS_ARCHIVE" = "yes"; then
  if test "$wxUSE_FILESYSTEM" != yes -o "$wxUSE_ARCHIVE_STREAMS" != yes; then
    AC_MSG_WARN(wxArchiveFSHandler requires wxArchive and wxFileSystem... disabled)
  else
    AC_DEFINE(wxUSE_FS_ARCHIVE)
  fi
fi

if test "$wxUSE_FS_ZIP" = "yes"; then
  if test "$wxUSE_FS_ARCHIVE" != yes; then
    AC_MSG_WARN(wxZipFSHandler requires wxArchiveFSHandler... disabled)
  else
    AC_DEFINE(wxUSE_FS_ZIP)
  fi
fi

if test "$wxUSE_FSVOLUME" = "yes"; then
  AC_DEFINE(wxUSE_FSVOLUME)
fi

if test "$wxUSE_ON_FATAL_EXCEPTION" = "yes"; then
  if test "$USE_UNIX" != 1; then
    AC_MSG_WARN([Catching fatal exceptions not currently supported on this system, wxApp::OnFatalException will not be called])
    wxUSE_ON_FATAL_EXCEPTION=no
  else
    AC_DEFINE(wxUSE_ON_FATAL_EXCEPTION)
  fi
fi

if test "$wxUSE_STACKWALKER" = "yes"; then
    AC_DEFINE(wxUSE_STACKWALKER)
fi

if test "$wxUSE_DEBUGREPORT" = "yes"; then
    if test "$USE_UNIX" != 1 -a "$USE_WIN32" != 1; then
        AC_MSG_WARN([Creating debug reports not currently supported on this system, disabled])
        wxUSE_DEBUGREPORT=no
    else
        AC_DEFINE(wxUSE_DEBUGREPORT)
        if test "$wxUSE_ON_FATAL_EXCEPTION" = "yes"; then
            SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS debugrpt"
        fi
    fi
fi

if test "$wxUSE_SNGLINST_CHECKER" = "yes"; then
  AC_DEFINE(wxUSE_SNGLINST_CHECKER)
fi

if test "$wxUSE_BUSYINFO" = "yes"; then
  AC_DEFINE(wxUSE_BUSYINFO)
fi

if test "$wxUSE_HOTKEY" = "yes"; then
  if test "$wxUSE_MSW" != 1 -a "$wxUSE_OSX_COCOA" != 1; then
    AC_MSG_WARN([Hot keys not supported by the current toolkit, disabled])
    wxUSE_HOTKEY=no
  fi
elif test "$wxUSE_HOTKEY" = "auto"; then
  if test "$wxUSE_MSW" = 1 -o "$wxUSE_OSX_COCOA" = 1; then
    wxUSE_HOTKEY=yes
  fi
fi
if test "$wxUSE_HOTKEY" = "yes"; then
  AC_DEFINE(wxUSE_HOTKEY)
fi

if test "$wxUSE_STD_CONTAINERS" = "yes"; then
  AC_DEFINE(wxUSE_STD_CONTAINERS)
fi

if test "$wxUSE_STD_CONTAINERS_COMPATIBLY" = "yes"; then
  AC_DEFINE(wxUSE_STD_CONTAINERS_COMPATIBLY)
fi

if test "$wxUSE_STD_IOSTREAM" = "yes"; then
  AC_DEFINE(wxUSE_STD_IOSTREAM)
fi

if test "$wxUSE_STD_STRING" = "yes"; then
  AC_DEFINE(wxUSE_STD_STRING)
fi

if test "$wxUSE_STD_STRING_CONV_IN_WXSTRING" = "yes"; then
  AC_DEFINE(wxUSE_STD_STRING_CONV_IN_WXSTRING)
fi

if test "$wxUSE_UNSAFE_WXSTRING_CONV" = "yes"; then
  AC_DEFINE(wxUSE_UNSAFE_WXSTRING_CONV)
fi

if test "$wxUSE_STDPATHS" = "yes"; then
  AC_DEFINE(wxUSE_STDPATHS)
fi

if test "$wxUSE_TEXTBUFFER" = "yes"; then
    AC_DEFINE(wxUSE_TEXTBUFFER)
fi

if test "$wxUSE_TEXTFILE" = "yes"; then
  if test "$wxUSE_FILE" != "yes" -o "$wxUSE_TEXTBUFFER" != "yes" ; then
    AC_MSG_WARN(wxTextFile requires wxFile and wxTextBuffer... disabled)
  else
    AC_DEFINE(wxUSE_TEXTFILE)
  fi
fi

if test "$wxUSE_CONFIG" = "yes" ; then
  if test "$wxUSE_TEXTFILE" != "yes"; then
    AC_MSG_WARN(wxConfig requires wxTextFile... disabled)
  else
    AC_DEFINE(wxUSE_CONFIG)
    AC_DEFINE(wxUSE_CONFIG_NATIVE)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS config"
  fi
fi

if test "$wxUSE_INTL" = "yes" ; then
  if test "$wxUSE_FILE" != "yes"; then
    AC_MSG_WARN(I18n code requires wxFile... disabled)
  else
    AC_DEFINE(wxUSE_INTL)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS internat"
    GUIDIST="$GUIDIST INTL_DIST"
  fi
fi

if test "$wxUSE_XLOCALE" = "yes" ; then
    dnl Some platforms (e.g. macOS) require an extra header, others (Linux)
    dnl don't, but it's simpler to just check for it under all of them.
    AC_CHECK_HEADERS([xlocale.h])

    AC_CACHE_CHECK([for locale_t], wx_cv_type_locale_t,
    [
        AC_LANG_PUSH(C++)
        AC_TRY_COMPILE(
        [
        #ifdef HAVE_XLOCALE_H
        #include <xlocale.h>
        #endif
        #include <locale.h>
        #include <stdlib.h>
        ],
        [
        locale_t t;
        strtod_l(NULL, NULL, t);
        ],
        wx_cv_type_locale_t=yes,
        wx_cv_type_locale_t=no
        )
        AC_LANG_POP()
    ])

    if test "$wx_cv_type_locale_t" = "yes" ; then
        AC_DEFINE(wxUSE_XLOCALE)

        dnl We don't test (just) for locale_t existence, but we still define
        dnl this symbol to avoid changing the existing code using it.
        AC_DEFINE(HAVE_LOCALE_T)
    else
        AC_MSG_WARN([No locale_t support, wxXLocale won't be available])
    fi
fi

if test "$wxUSE_LOG" = "yes"; then
  AC_DEFINE(wxUSE_LOG)

    if test "$wxUSE_LOGGUI" = "yes"; then
      AC_DEFINE(wxUSE_LOGGUI)
    fi

    if test "$wxUSE_LOGWINDOW" = "yes"; then
      AC_DEFINE(wxUSE_LOGWINDOW)
    fi

    if test "$wxUSE_LOGDIALOG" = "yes"; then
      AC_DEFINE(wxUSE_LOG_DIALOG)
    fi

    dnl the keyboard sample requires wxUSE_LOG
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS keyboard"
fi

if test "$wxUSE_LONGLONG" = "yes"; then
  AC_DEFINE(wxUSE_LONGLONG)
fi

if test "$wxUSE_GEOMETRY" = "yes"; then
  AC_DEFINE(wxUSE_GEOMETRY)
fi

if test "$wxUSE_BASE64" = "yes"; then
  AC_DEFINE(wxUSE_BASE64)
fi

if test "$wxUSE_STREAMS" = "yes" ; then
  AC_DEFINE(wxUSE_STREAMS)
fi

if test "$wxUSE_PRINTF_POS_PARAMS" = "yes"; then
  AC_DEFINE(wxUSE_PRINTF_POS_PARAMS)
fi

dnl ---------------------------------------------------------------------------
dnl console event loop stuff
dnl ---------------------------------------------------------------------------

if test "$wxUSE_CONSOLE_EVENTLOOP" = "yes"; then
    AC_DEFINE(wxUSE_CONSOLE_EVENTLOOP)

    if test "$wxUSE_UNIX" = "yes"; then
        if test "$wxUSE_SELECT_DISPATCHER" = "yes"; then
            AC_DEFINE(wxUSE_SELECT_DISPATCHER)
        fi

        if test "$wxUSE_EPOLL_DISPATCHER" = "yes"; then
            AC_CHECK_HEADERS(sys/epoll.h,,, [AC_INCLUDES_DEFAULT()])
            if test "$ac_cv_header_sys_epoll_h" = "yes"; then
                AC_DEFINE(wxUSE_EPOLL_DISPATCHER)
            else
                AC_MSG_WARN([sys/epoll.h not available, wxEpollDispatcher disabled])
            fi
        fi
    fi
fi

dnl ---------------------------------------------------------------------------
dnl time/date functions
dnl ---------------------------------------------------------------------------

dnl check for gettimeofday (SVr4, BSD 4.3) and ftime (V7, BSD 4.3) for the
dnl function to be used for high resolution timers
AC_CHECK_FUNCS(gettimeofday ftime, break)

if test "$ac_cv_func_gettimeofday" = "yes"; then
    AC_CACHE_CHECK([whether gettimeofday takes two arguments],
                   wx_cv_func_gettimeofday_has_2_args,
    [
        dnl on some _really_ old systems it takes only 1 argument
        AC_TRY_COMPILE(
            [
                #include <sys/time.h>
                #include <unistd.h>
            ],
            [
                struct timeval tv;
                gettimeofday(&tv, NULL);
            ],
            wx_cv_func_gettimeofday_has_2_args=yes,
            AC_TRY_COMPILE(
                [
                    #include <sys/time.h>
                    #include <unistd.h>
                ],
                [
                    struct timeval tv;
                    gettimeofday(&tv);
                ],
                wx_cv_func_gettimeofday_has_2_args=no,
                [
                    AC_MSG_WARN([failed to determine number of gettimeofday() arguments])
                    wx_cv_func_gettimeofday_has_2_args=unknown
                ]
            )
        )
    ])

    if test "$wx_cv_func_gettimeofday_has_2_args" != "yes"; then
        AC_DEFINE(WX_GETTIMEOFDAY_NO_TZ)
    fi
fi

if test "$wxUSE_DATETIME" = "yes"; then
    dnl check for timezone variable
    dnl   doesn't exist under Darwin / Mac OS X which uses tm_gmtoff instead
    AC_CACHE_CHECK(for timezone variable in <time.h>,
                   wx_cv_var_timezone,
                   [
                        AC_LANG_PUSH(C++)
                        AC_TRY_COMPILE(
                            [
                                #include <time.h>
                            ],
                            [
                                int tz;
                                tz = timezone;
                            ],
                            [
                                wx_cv_var_timezone=timezone
                            ],
                            [
                                AC_TRY_COMPILE(
                                    [
                                        #include <time.h>
                                    ],
                                    [
                                        int tz;
                                        tz = _timezone;
                                    ],
                                    [
                                        wx_cv_var_timezone=_timezone
                                    ],
                                    [
                                        AC_TRY_COMPILE(
                                            [
                                                #include <time.h>
                                            ],
                                            [
                                                int tz;
                                                tz = __timezone;
                                            ],
                                            [
                                                wx_cv_var_timezone=__timezone
                                            ],
                                            [
                                                if test "$USE_DOS" = 0 ; then
                                                    AC_MSG_WARN(no timezone variable, will use tm_gmtoff instead)
                                                fi
                                            ]
                                        )
                                    ]
                                )
                            ]
                        )
                        AC_LANG_POP()
                   ]
    )

    dnl as we want $wx_cv_var_timezone to be expanded, use AC_DEFINE_UNQUOTED
    if test "x$wx_cv_var_timezone" != x ; then
        AC_DEFINE_UNQUOTED(WX_TIMEZONE, $wx_cv_var_timezone)
    fi

    dnl check for localtime (it's POSIX, but the check can do no harm...)
    AC_CHECK_FUNCS(localtime)

    if test "$ac_cv_func_localtime" = "yes"; then
        AC_CACHE_CHECK(for tm_gmtoff in struct tm,
                       wx_cv_struct_tm_has_gmtoff,
        [
            AC_TRY_COMPILE(
                [
                    #include <time.h>
                ],
                [
                    struct tm tm;
                    tm.tm_gmtoff++;
                ],
                [
                    wx_cv_struct_tm_has_gmtoff=yes
                ],
                wx_cv_struct_tm_has_gmtoff=no
            )
        ])
    fi

    if test "$wx_cv_struct_tm_has_gmtoff" = "yes"; then
        AC_DEFINE(WX_GMTOFF_IN_TM)
    fi

    AC_CACHE_CHECK([for _NL_TIME_FIRST_WEEKDAY in langinfo.h],
                   wx_cv_have_nl_time_first_weekday,
    [
        AC_TRY_COMPILE(
                [
                     #define _GNU_SOURCE
                     #include <langinfo.h>
                ],
                [
                     _NL_TIME_FIRST_WEEKDAY;
                ],
                [
                     wx_cv_have_nl_time_first_weekday=yes
                ],
                wx_cv_have_nl_time_first_weekday=no
        )
    ])

    if test "$wx_cv_have_nl_time_first_weekday" = "yes"; then
        AC_DEFINE(HAVE_NL_TIME_FIRST_WEEKDAY)
    fi

    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS typetest"
fi

dnl ------------------------------------------------------------------------
dnl wxProcess
dnl ------------------------------------------------------------------------

AC_CHECK_FUNCS(setpriority)

dnl ------------------------------------------------------------------------
dnl wxSocket
dnl ------------------------------------------------------------------------

if test "$wxUSE_SOCKETS" = "yes"; then
    dnl under Windows we always have sockets
    if test "$USE_WIN32" != 1 ; then
        dnl under Solaris and OS/2, socket functions live in -lsocket
        AC_CHECK_FUNC(socket,,
            [
                AC_CHECK_LIB(socket, socket,
                    if test "$INET_LINK" != " -lsocket"; then
                        INET_LINK="$INET_LINK -lsocket"
                    fi,
                    [
                        dnl under Haiku, socket is in libnetwork
                        AC_CHECK_LIB(network, socket,
                            if test "$INET_LINK" != " -lnetwork"; then
                                INET_LINK="$INET_LINK -lnetwork"
                            fi,
                            [
                                AC_MSG_WARN([socket library not found - sockets will be disabled])
                                wxUSE_SOCKETS=no
                            ]
                        )
                    ]
                )
            ]
        )
    fi
fi

if test "$wxUSE_SOCKETS" = "yes" ; then
    dnl under Windows we do not use getsockname
    if test "$USE_WIN32" != 1 ; then
        dnl determine the type of third argument for getsockname
        dnl This test needs to be done in C++ mode since gsocket.cpp now
        dnl is C++ code and pointer cast that are possible even without
        dnl warning in C still fail in C++.
        AC_CACHE_CHECK([what is the type of the third argument of getsockname],
                       wx_cv_type_getsockname3,
            [
                AC_LANG_PUSH(C++)
                AC_TRY_COMPILE(
                    [
                        #include <sys/types.h>
                        #include <sys/socket.h>
                    ],
                    [
                        socklen_t len;
                        getsockname(0, 0, &len);
                    ],
                    wx_cv_type_getsockname3=socklen_t,
                    [
                        dnl the compiler will compile the version with size_t
                        dnl even if the real type of the last parameter is int
                        dnl but it should give at least a warning about
                        dnl converting between incompatible pointer types, so
                        dnl try to use it to get the correct behaviour at
                        dnl least with gcc (otherwise we'd always use size_t)
                        CFLAGS_OLD="$CFLAGS"
                        if test "$GCC" = yes ; then
                            CFLAGS="-Werror $CFLAGS"
                        fi

                        AC_TRY_COMPILE(
                            [
                                #include <sys/types.h>
                                #include <sys/socket.h>
                            ],
                            [
                                size_t len;
                                getsockname(0, 0, &len);
                            ],
                            wx_cv_type_getsockname3=size_t,
                            AC_TRY_COMPILE(
                                [
                                    #include <sys/types.h>
                                    #include <sys/socket.h>
                                ],
                                [
                                    int len;
                                    getsockname(0, 0, &len);
                                ],
                                wx_cv_type_getsockname3=int,
                                wx_cv_type_getsockname3=unknown
                            )
                        )

                        CFLAGS="$CFLAGS_OLD"
                    ]
                )
                AC_LANG_POP()
            ])

        if test "$wx_cv_type_getsockname3" = "unknown"; then
            wxUSE_SOCKETS=no
            AC_MSG_WARN([Couldn't find socklen_t synonym for this system])
        else
            AC_DEFINE_UNQUOTED(WX_SOCKLEN_T, $wx_cv_type_getsockname3)
        fi
        dnl Do this again for getsockopt as it may be different
        AC_CACHE_CHECK([what is the type of the fifth argument of getsockopt],
                       wx_cv_type_getsockopt5,
            [
                dnl Note that the rules for compatibility of pointers
                dnl are somewhat different between C and C++, so code
                dnl that fails in C++ may not even give a warning about
                dnl converting between incompatible pointer types in C.
                dnl So this test needs to be done in C++ mode.
                AC_LANG_PUSH(C++)
                AC_TRY_COMPILE(
                    [
                        #include <sys/types.h>
                        #include <sys/socket.h>
                    ],
                    [
                        socklen_t len;
                        getsockopt(0, 0, 0, 0, &len);
                    ],
                    wx_cv_type_getsockopt5=socklen_t,
                    [
                        AC_TRY_COMPILE(
                            [
                                #include <sys/types.h>
                                #include <sys/socket.h>
                            ],
                            [
                                size_t len;
                                getsockopt(0, 0, 0, 0, &len);
                            ],
                            wx_cv_type_getsockopt5=size_t,
                            AC_TRY_COMPILE(
                                [
                                    #include <sys/types.h>
                                    #include <sys/socket.h>
                                ],
                                [
                                    int len;
                                    getsockopt(0, 0, 0, 0, &len);
                                ],
                                wx_cv_type_getsockopt5=int,
                                wx_cv_type_getsockopt5=unknown
                            )
                        )
                    ]
                )
                AC_LANG_POP()
            ])

        if test "$wx_cv_type_getsockopt5" = "unknown"; then
            wxUSE_SOCKETS=no
            AC_MSG_WARN([Couldn't find socklen_t synonym for this system])
        else
            AC_DEFINE_UNQUOTED(SOCKOPTLEN_T, $wx_cv_type_getsockopt5)
        fi
    fi
fi

if test "$wxUSE_SOCKETS" = "yes" ; then
    if test "$wxUSE_IPV6" = "yes"; then
        AC_CACHE_CHECK(
            [whether we have sockaddr_in6],
            [wx_cv_type_sockaddr_in6],
            [
                AC_TRY_COMPILE(
                    [
                        #include <sys/types.h>
                        #include <sys/socket.h>
                        #include <netinet/in.h>
                    ],
                    [
                        struct sockaddr_in6 sa6;
                    ],
                    wx_cv_type_sockaddr_in6=yes,
                    wx_cv_type_sockaddr_in6=no
                )
            ]
        )

        if test "$wx_cv_type_sockaddr_in6"="yes"; then
            AC_DEFINE(wxUSE_IPV6)
        else
            AC_MSG_WARN([IPv6 support not available... disabled])
        fi
    fi

    AC_DEFINE(wxUSE_SOCKETS)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS sockets"
fi

if test "$wxUSE_PROTOCOL" = "yes"; then
    if test "$wxUSE_SOCKETS" != "yes"; then
        AC_MSG_WARN(Protocol classes require sockets... disabled)
        wxUSE_PROTOCOL=no
    fi
fi

if test "$wxUSE_PROTOCOL" = "yes"; then
    AC_DEFINE(wxUSE_PROTOCOL)

    if test "$wxUSE_PROTOCOL_HTTP" = "yes"; then
        AC_DEFINE(wxUSE_PROTOCOL_HTTP)
    fi
    if test "$wxUSE_PROTOCOL_FTP" = "yes"; then
        AC_DEFINE(wxUSE_PROTOCOL_FTP)
    fi
    if test "$wxUSE_PROTOCOL_FILE" = "yes"; then
        AC_DEFINE(wxUSE_PROTOCOL_FILE)
    fi
else
    if test "$wxUSE_FS_INET" = "yes"; then
        AC_MSG_WARN([HTTP filesystem require protocol classes... disabled])
        wxUSE_FS_INET="no"
    fi
fi

if test "$wxUSE_URL" = "yes"; then
    if test "$wxUSE_PROTOCOL" != "yes"; then
        AC_MSG_WARN(wxURL class requires wxProtocol... disabled)
        wxUSE_URL=no
    fi
    if test "$wxUSE_URL" = "yes"; then
        AC_DEFINE(wxUSE_URL)
    fi
fi

if test "$wxUSE_VARIANT" = "yes"; then
    AC_DEFINE(wxUSE_VARIANT)
fi

if test "$wxUSE_FS_INET" = "yes"; then
  AC_DEFINE(wxUSE_FS_INET)
fi

dnl ---------------------------------------------------------------------------
dnl Joystick support
dnl ---------------------------------------------------------------------------

if test "$wxUSE_GUI" = "yes" -a "$wxUSE_JOYSTICK" = "yes"; then
    wxUSE_JOYSTICK=no

    dnl under MSW and OS X we always have joystick support
    if test "$TOOLKIT" = "MSW" -o "$TOOLKIT" = "OSX_COCOA" -o "$TOOLKIT" = "COCOA"; then
        wxUSE_JOYSTICK=yes

    dnl joystick support is only for Linux 2.1.x or greater
    else
        dnl notice the dummy includes argument: without it, AC_CHECK_HEADER
        dnl checks only whether the header can be preprocessed, not that it
        dnl can be compiled and in Linux 2.6.16 joystick.h is present but
        dnl can't be compiled because of an error and with the default
        dnl AC_CHECK_HEADER semantics we'd still detect it in this case and
        dnl build would fail later
        AC_CHECK_HEADERS([linux/joystick.h], [wxUSE_JOYSTICK=yes],, [AC_INCLUDES_DEFAULT()])
    fi

    if test "$wxUSE_JOYSTICK" = "yes"; then
        AC_DEFINE(wxUSE_JOYSTICK)
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS joytest"
    else
        AC_MSG_WARN(Joystick not supported by this system... disabled)
    fi
fi


dnl ---------------------------------------------------------------------------
dnl String stuff
dnl ---------------------------------------------------------------------------

if test "$wxUSE_FONTENUM" = "yes" ; then
  AC_DEFINE(wxUSE_FONTENUM)
fi

if test "$wxUSE_FONTMAP" = "yes" ; then
  AC_DEFINE(wxUSE_FONTMAP)
fi

if test "$wxUSE_UNICODE" = "yes" ; then
  AC_DEFINE(wxUSE_UNICODE)
fi

if test "$wxUSE_UNICODE" = "yes" -a "$wxUSE_UNICODE_UTF8" = "yes"; then
    AC_DEFINE(wxUSE_UNICODE_UTF8)

    if test "$wxUSE_UNICODE_UTF8_LOCALE" = "yes"; then
        AC_DEFINE(wxUSE_UTF8_LOCALE_ONLY)
    fi
fi

dnl ---------------------------------------------------------------------------
dnl big GUI components: MDI, doc/view, printing, help, ...
dnl ---------------------------------------------------------------------------

if test "$wxUSE_CONSTRAINTS" = "yes"; then
    AC_DEFINE(wxUSE_CONSTRAINTS)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS layout"
fi

if test "$wxUSE_MDI" = "yes"; then
    AC_DEFINE(wxUSE_MDI)

    if test "$wxUSE_MDI_ARCHITECTURE" = "yes"; then
        AC_DEFINE(wxUSE_MDI_ARCHITECTURE)
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS mdi"
    fi
fi

if test "$wxUSE_DOC_VIEW_ARCHITECTURE" = "yes" ; then
    AC_DEFINE(wxUSE_DOC_VIEW_ARCHITECTURE)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS docview"
fi

if test "$wxUSE_HELP" = "yes"; then
    AC_DEFINE(wxUSE_HELP)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS help"

    if test "$wxUSE_MSW" = 1; then
      if test "$wxUSE_MS_HTML_HELP" = "yes"; then
        AC_DEFINE(wxUSE_MS_HTML_HELP)
      fi
    fi

    if test "$wxUSE_WXHTML_HELP" = "yes"; then
      if test "$wxUSE_HTML" = "yes"; then
        AC_DEFINE(wxUSE_WXHTML_HELP)
      else
        AC_MSG_WARN(Cannot use wxHTML-based help without wxHTML so it won't be compiled)
        wxUSE_WXHTML_HELP=no
      fi
    fi
fi

if test "$wxUSE_PRINTING_ARCHITECTURE" = "yes" ; then
    AC_DEFINE(wxUSE_PRINTING_ARCHITECTURE)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS printing"
fi

if test "$wxUSE_POSTSCRIPT" = "yes" ; then
  AC_DEFINE(wxUSE_POSTSCRIPT)
fi

AC_DEFINE(wxUSE_AFM_FOR_POSTSCRIPT)

if test "$wxUSE_SVG" = "yes"; then
    AC_DEFINE(wxUSE_SVG)
fi

dnl ---------------------------------------------------------------------------
dnl wxMetafile
dnl ---------------------------------------------------------------------------

if test "$wxUSE_METAFILE" = "yes"; then
    if test "$wxUSE_MSW" != 1 -a "$wxUSE_MAC" != 1; then
        AC_MSG_WARN([wxMetafile is not available on this system... disabled])
        wxUSE_METAFILE=no
    fi
elif test "$wxUSE_METAFILE" = "auto"; then
    if test "$wxUSE_MSW" = 1 -o "$wxUSE_MAC" = 1; then
        wxUSE_METAFILE=yes
    fi
fi

if test "$wxUSE_METAFILE" = "yes"; then
    AC_DEFINE(wxUSE_METAFILE)
    if test "$wxUSE_MSW" = 1; then
        dnl this one should probably be made separately configurable
        AC_DEFINE(wxUSE_ENH_METAFILE)
    fi
fi

dnl ---------------------------------------------------------------------------
dnl IPC: IPC, Drag'n'Drop, Clipboard, ...
dnl ---------------------------------------------------------------------------

dnl check for ole headers and disable a few features requiring it if not
dnl present (earlier versions of mingw32 don't have ole2.h)
if test "$USE_WIN32" = 1 -a \( "$wxUSE_DATAOBJ"       = "yes" \
                          -o "$wxUSE_CLIPBOARD"     = "yes" \
                          -o "$wxUSE_OLE"     = "yes" \
                          -o "$wxUSE_DRAG_AND_DROP" = "yes" \) ; then
    AC_CHECK_HEADER(ole2.h,,, [ ])

    if test "$ac_cv_header_ole2_h" = "yes" ; then
        if test "$GCC" = yes ; then
            AC_MSG_CHECKING([if g++ requires -fvtable-thunks])
            AC_TRY_COMPILE([#include <windows.h>
                            #include <ole2.h>],
                           [],
                           [AC_MSG_RESULT(no)],
                           [AC_MSG_RESULT(yes)
                            WXCONFIG_CXXFLAGS="$WXCONFIG_CXXFLAGS -fvtable-thunks"])
            LIBS="-lrpcrt4 -loleaut32 -lole32 -luuid $LIBS"
            if test "$wxUSE_OLE" = "yes" ; then
                AC_DEFINE(wxUSE_OLE)
                AC_DEFINE(wxUSE_OLE_AUTOMATION)
                AC_DEFINE(wxUSE_ACTIVEX)
                SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS oleauto"
            fi
        fi

        dnl for OLE clipboard and dnd
        if test "$wxUSE_DATAOBJ" = "yes" ; then
            AC_DEFINE(wxUSE_DATAOBJ)
        fi
    else
        AC_MSG_WARN([Some features disabled because OLE headers not found])

        wxUSE_CLIPBOARD=no
        wxUSE_DRAG_AND_DROP=no
        wxUSE_DATAOBJ=no
        wxUSE_OLE=no
    fi
fi

if test "$wxUSE_IPC" = "yes"; then
    if test "$wxUSE_SOCKETS" != "yes" -a "$USE_WIN32" != 1; then
        AC_MSG_WARN(wxWidgets IPC classes require sockets... disabled)
        wxUSE_IPC=no
    fi

    if test "$wxUSE_IPC" = "yes"; then
        AC_DEFINE(wxUSE_IPC)
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS ipc"
    fi
fi

if test "$wxUSE_DATAOBJ" = "yes"; then
    if test "$wxUSE_DFB" = 1; then
        AC_MSG_WARN([wxDataObject not yet supported under $TOOLKIT... disabled])
        wxUSE_DATAOBJ=no
    else
        AC_DEFINE(wxUSE_DATAOBJ)
    fi
else
    AC_MSG_WARN([Clipboard and drag-and-drop require wxDataObject -- disabled])
    wxUSE_CLIPBOARD=no
    wxUSE_DRAG_AND_DROP=no
fi

if test "$wxUSE_CLIPBOARD" = "yes"; then
    if test "$wxUSE_DFB" = 1; then
        AC_MSG_WARN([Clipboard not yet supported under $TOOLKIT... disabled])
        wxUSE_CLIPBOARD=no
    fi

    if test "$wxUSE_CLIPBOARD" = "yes"; then
        AC_DEFINE(wxUSE_CLIPBOARD)
    fi
fi

if test "$wxUSE_DRAG_AND_DROP" = "yes" ; then
    if test "$wxUSE_MOTIF" = 1 -o "$wxUSE_X11" = 1 -o "$wxUSE_DFB" = 1; then
        AC_MSG_WARN([Drag and drop not yet supported under $TOOLKIT... disabled])
        wxUSE_DRAG_AND_DROP=no
    fi

    if test "$wxUSE_DRAG_AND_DROP" = "yes"; then
        AC_DEFINE(wxUSE_DRAG_AND_DROP)
    fi

fi

if test "$wxUSE_DRAG_AND_DROP" = "yes" -o "$wxUSE_CLIPBOARD" = "yes"; then
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS dnd"
fi

if test "$wxUSE_CLIPBOARD" = "yes"; then
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS clipboard"
fi

if test "$wxUSE_SPLINES" = "yes" ; then
  AC_DEFINE(wxUSE_SPLINES)
fi

if test "$wxUSE_MOUSEWHEEL" = "yes" ; then
  AC_DEFINE(wxUSE_MOUSEWHEEL)
fi

if test "$wxUSE_UIACTIONSIMULATOR" = "yes" ; then
    if test "$wxUSE_GTK" = 1 -o "$wxUSE_MOTIF" = 1 -o "$wxUSE_X11" = 1; then
        if test "$wxUSE_XTEST" = "yes" ; then
            PKG_CHECK_MODULES(XTST, xtst,
                [
                    GUI_TK_LIBRARY="$GUI_TK_LIBRARY $XTST_LIBS"
                    CFLAGS="$XTST_CFLAGS $CFLAGS"
                    CXXFLAGS="$XTST_CFLAGS $CXXFLAGS"
                    AC_DEFINE(wxUSE_XTEST)
                ],
                [
                    if test "$WXGTK3" = 1; then
                        dnl This class can't work without XTest with GTK+ 3
                        dnl which uses XInput2 and so ignores XSendEvent().
                        AC_MSG_WARN([XTest not found, disabling wxUIActionSimulator])
                        wxUSE_UIACTIONSIMULATOR=no
                    fi
                    dnl The other ports can use XSendEvent(), so don't warn
                    wxUSE_XTEST="no"
                ]
            )
        elif test "$WXGTK3" = 1; then
            dnl As per above, wxUIActionSimulator can't be used in this case,
            dnl but there is no need to warn, presumably the user knows what
            dnl he's doing if --without-xtest was explicitly specified.
            wxUSE_UIACTIONSIMULATOR=no
        fi
    elif test "$wxUSE_DFB" = 1; then
        AC_MSG_WARN([wxUIActionSimulator not yet supported under $TOOLKIT... disabled])
        wxUSE_UIACTIONSIMULATOR=no
    fi

    if test "$wxUSE_UIACTIONSIMULATOR" = "yes" ; then
        AC_DEFINE(wxUSE_UIACTIONSIMULATOR)
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS uiaction"
    fi
fi

if test "$wxUSE_DC_TRANSFORM_MATRIX" = "yes" ; then
    AC_DEFINE(wxUSE_DC_TRANSFORM_MATRIX)
fi

dnl ---------------------------------------------------------------------------
dnl GUI controls
dnl ---------------------------------------------------------------------------

USES_CONTROLS=0
if test "$wxUSE_CONTROLS" = "yes"; then
  USES_CONTROLS=1
fi

if test "$wxUSE_MARKUP" = "yes"; then
  AC_DEFINE(wxUSE_MARKUP)
fi

if test "$wxUSE_ACCEL" = "yes"; then
  AC_DEFINE(wxUSE_ACCEL)
  USES_CONTROLS=1
fi

if test "$wxUSE_ACTIVITYINDICATOR" = "yes"; then
  AC_DEFINE(wxUSE_ACTIVITYINDICATOR)
fi

if test "$wxUSE_ADDREMOVECTRL" = "yes"; then
  AC_DEFINE(wxUSE_ADDREMOVECTRL)
fi

if test "$wxUSE_ANIMATIONCTRL" = "yes"; then
  AC_DEFINE(wxUSE_ANIMATIONCTRL)
  USES_CONTROLS=1
  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS animate"
fi

if test "$wxUSE_BANNERWINDOW" = "yes"; then
  AC_DEFINE(wxUSE_BANNERWINDOW)
fi

if test "$wxUSE_BUTTON" = "yes"; then
  AC_DEFINE(wxUSE_BUTTON)
  USES_CONTROLS=1
fi

if test "$wxUSE_BMPBUTTON" = "yes"; then
  AC_DEFINE(wxUSE_BMPBUTTON)
  USES_CONTROLS=1
fi

if test "$wxUSE_CALCTRL" = "yes"; then
  AC_DEFINE(wxUSE_CALENDARCTRL)
  USES_CONTROLS=1
  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS calendar"
fi

if test "$wxUSE_CARET" = "yes"; then
  AC_DEFINE(wxUSE_CARET)
  USES_CONTROLS=1
  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS caret"
fi

if test "$wxUSE_COLLPANE" = "yes"; then
    AC_DEFINE(wxUSE_COLLPANE)
    USES_CONTROLS=1
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS collpane"
fi

if test "$wxUSE_COMBOBOX" = "yes"; then
  AC_DEFINE(wxUSE_COMBOBOX)
  USES_CONTROLS=1
fi

if test "$wxUSE_COMBOCTRL" = "yes"; then
  AC_DEFINE(wxUSE_COMBOCTRL)
  USES_CONTROLS=1
fi

if test "$wxUSE_COMMANDLINKBUTTON" = "yes"; then
  AC_DEFINE(wxUSE_COMMANDLINKBUTTON)
  USES_CONTROLS=1
fi

if test "$wxUSE_CHOICE" = "yes"; then
  AC_DEFINE(wxUSE_CHOICE)
  USES_CONTROLS=1
fi

if test "$wxUSE_CHOICEBOOK" = "yes"; then
    AC_DEFINE(wxUSE_CHOICEBOOK)
    USES_CONTROLS=1
fi

if test "$wxUSE_CHECKBOX" = "yes"; then
  AC_DEFINE(wxUSE_CHECKBOX)
  USES_CONTROLS=1
fi

if test "$wxUSE_CHECKLST" = "yes"; then
  AC_DEFINE(wxUSE_CHECKLISTBOX)
  USES_CONTROLS=1
fi

if test "$wxUSE_COLOURPICKERCTRL" = "yes"; then
  AC_DEFINE(wxUSE_COLOURPICKERCTRL)
  USES_CONTROLS=1
fi

if test "$wxUSE_DATEPICKCTRL" = "yes"; then
  AC_DEFINE(wxUSE_DATEPICKCTRL)
  USES_CONTROLS=1
fi

if test "$wxUSE_DIRPICKERCTRL" = "yes"; then
  AC_DEFINE(wxUSE_DIRPICKERCTRL)
  USES_CONTROLS=1
fi

if test "$wxUSE_FILECTRL" = "yes"; then
  AC_DEFINE(wxUSE_FILECTRL)
  USES_CONTROLS=1
fi

if test "$wxUSE_FILEPICKERCTRL" = "yes"; then
  AC_DEFINE(wxUSE_FILEPICKERCTRL)
  USES_CONTROLS=1
fi

if test "$wxUSE_FONTPICKERCTRL" = "yes"; then
  AC_DEFINE(wxUSE_FONTPICKERCTRL)
  USES_CONTROLS=1
fi

if test "$wxUSE_DISPLAY" = "yes"; then
    if test "$wxUSE_DFB" = 1; then
        AC_MSG_WARN([wxDisplay not yet supported under $TOOLKIT... disabled])
        wxUSE_DISPLAY=no
    else
        AC_DEFINE(wxUSE_DISPLAY)
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS display"
    fi
fi

if test "$wxUSE_DETECT_SM" = "yes"; then
    AC_DEFINE(wxUSE_DETECT_SM)
fi

if test "$wxUSE_GAUGE" = "yes"; then
  AC_DEFINE(wxUSE_GAUGE)
  USES_CONTROLS=1
fi

if test "$wxUSE_GRID" = "yes"; then
  AC_DEFINE(wxUSE_GRID)
  USES_CONTROLS=1
  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS grid"
fi

if test "$wxUSE_HEADERCTRL" = "yes"; then
  AC_DEFINE(wxUSE_HEADERCTRL)
  USES_CONTROLS=1
fi

if test "$wxUSE_HYPERLINKCTRL" = "yes"; then
  AC_DEFINE(wxUSE_HYPERLINKCTRL)
  USES_CONTROLS=1
fi

if test "$wxUSE_BITMAPCOMBOBOX" = "yes"; then
  AC_DEFINE(wxUSE_BITMAPCOMBOBOX)
  USES_CONTROLS=1
fi

if test "$wxUSE_DATAVIEWCTRL" = "yes"; then
  AC_DEFINE(wxUSE_DATAVIEWCTRL)
  USES_CONTROLS=1
  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS dataview"
fi

if test "$wxUSE_IMAGLIST" = "yes"; then
    AC_DEFINE(wxUSE_IMAGLIST)
fi

if test "$wxUSE_INFOBAR" = "yes"; then
    AC_DEFINE(wxUSE_INFOBAR)
fi

if test "$wxUSE_LISTBOOK" = "yes"; then
    AC_DEFINE(wxUSE_LISTBOOK)
    USES_CONTROLS=1
fi

if test "$wxUSE_LISTBOX" = "yes"; then
    AC_DEFINE(wxUSE_LISTBOX)
    USES_CONTROLS=1
fi

if test "$wxUSE_LISTCTRL" = "yes"; then
    if test "$wxUSE_IMAGLIST" = "yes"; then
        AC_DEFINE(wxUSE_LISTCTRL)
        USES_CONTROLS=1
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS listctrl"
    else
        AC_MSG_WARN([wxListCtrl requires wxImageList and won't be compiled without it])
    fi
fi

if test "$wxUSE_EDITABLELISTBOX" = "yes"; then
    AC_DEFINE(wxUSE_EDITABLELISTBOX)
    USES_CONTROLS=1
fi

if test "$wxUSE_NOTEBOOK" = "yes"; then
    AC_DEFINE(wxUSE_NOTEBOOK)
    USES_CONTROLS=1
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS notebook"
fi

if test "$wxUSE_NOTIFICATION_MESSAGE" = "yes"; then
    AC_DEFINE(wxUSE_NOTIFICATION_MESSAGE)
fi

if test "$wxUSE_ODCOMBOBOX" = "yes"; then
  AC_DEFINE(wxUSE_ODCOMBOBOX)
  USES_CONTROLS=1
  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS combo"
fi

if test "$wxUSE_RADIOBOX" = "yes"; then
    AC_DEFINE(wxUSE_RADIOBOX)
    USES_CONTROLS=1
fi

if test "$wxUSE_RADIOBTN" = "yes"; then
    AC_DEFINE(wxUSE_RADIOBTN)
    USES_CONTROLS=1
fi

if test "$wxUSE_REARRANGECTRL" = "yes"; then
    AC_DEFINE(wxUSE_REARRANGECTRL)
fi

if test "$wxUSE_RICHMSGDLG" = "yes"; then
    AC_DEFINE(wxUSE_RICHMSGDLG)
fi

if test "$wxUSE_RICHTOOLTIP" = "yes"; then
    AC_DEFINE(wxUSE_RICHTOOLTIP)
fi

if test "$wxUSE_SASH" = "yes"; then
    AC_DEFINE(wxUSE_SASH)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS sashtest"
fi

if test "$wxUSE_SCROLLBAR" = "yes"; then
    AC_DEFINE(wxUSE_SCROLLBAR)
    USES_CONTROLS=1
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS scroll"
fi

if test "$wxUSE_SEARCHCTRL" = "yes"; then
    AC_DEFINE(wxUSE_SEARCHCTRL)
    USES_CONTROLS=1
fi

if test "$wxUSE_SLIDER" = "yes"; then
    AC_DEFINE(wxUSE_SLIDER)
    USES_CONTROLS=1
fi

if test "$wxUSE_SPINBTN" = "yes"; then
    AC_DEFINE(wxUSE_SPINBTN)
    USES_CONTROLS=1
fi

if test "$wxUSE_SPINCTRL" = "yes"; then
    AC_DEFINE(wxUSE_SPINCTRL)
    USES_CONTROLS=1
fi

if test "$wxUSE_SPLITTER" = "yes"; then
    AC_DEFINE(wxUSE_SPLITTER)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS splitter"
fi

if test "$wxUSE_STATBMP" = "yes"; then
    AC_DEFINE(wxUSE_STATBMP)
    USES_CONTROLS=1
fi

if test "$wxUSE_STATBOX" = "yes"; then
    AC_DEFINE(wxUSE_STATBOX)
    USES_CONTROLS=1
fi

if test "$wxUSE_STATTEXT" = "yes"; then
    AC_DEFINE(wxUSE_STATTEXT)
    USES_CONTROLS=1
fi

if test "$wxUSE_STATLINE" = "yes"; then
    AC_DEFINE(wxUSE_STATLINE)
    USES_CONTROLS=1
fi

if test "$wxUSE_STATUSBAR" = "yes"; then
    dnl this will get undefined in wx/chkconf.h if it's not supported
    AC_DEFINE(wxUSE_NATIVE_STATUSBAR)
    AC_DEFINE(wxUSE_STATUSBAR)
    USES_CONTROLS=1

    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS statbar"
fi

if test "$wxUSE_TEXTCTRL" = "yes"; then
    AC_DEFINE(wxUSE_TEXTCTRL)
    USES_CONTROLS=1
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS text"

    dnl we don't have special switches to disable wxUSE_RICHEDIT[2], it doesn't
    dnl seem useful to allow disabling them
    AC_DEFINE(wxUSE_RICHEDIT)
    AC_DEFINE(wxUSE_RICHEDIT2)
fi

if test "$wxUSE_TIMEPICKCTRL" = "yes"; then
  AC_DEFINE(wxUSE_TIMEPICKCTRL)
  USES_CONTROLS=1
fi

if test "$wxUSE_TOGGLEBTN" = "yes"; then
    AC_DEFINE(wxUSE_TOGGLEBTN)
    USES_CONTROLS=1
fi

if test "$wxUSE_TOOLBAR" = "yes"; then
    AC_DEFINE(wxUSE_TOOLBAR)
    USES_CONTROLS=1

    if test "$wxUSE_UNIVERSAL" = "yes"; then
        wxUSE_TOOLBAR_NATIVE="no"
    else
        wxUSE_TOOLBAR_NATIVE="yes"
        AC_DEFINE(wxUSE_TOOLBAR_NATIVE)
    fi

    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS toolbar"
fi

if test "$wxUSE_TOOLTIPS" = "yes"; then
    if test "$wxUSE_MOTIF" = 1; then
        AC_MSG_WARN([wxTooltip not supported yet under Motif... disabled])
    else
        if test "$wxUSE_UNIVERSAL" = "yes"; then
            AC_MSG_WARN([wxTooltip not supported yet in $TOOLKIT... disabled])
        else
            AC_DEFINE(wxUSE_TOOLTIPS)
        fi
    fi
fi

if test "$wxUSE_TREEBOOK" = "yes"; then
    AC_DEFINE(wxUSE_TREEBOOK)
    USES_CONTROLS=1
fi

if test "$wxUSE_TOOLBOOK" = "yes"; then
    AC_DEFINE(wxUSE_TOOLBOOK)
    USES_CONTROLS=1
fi

if test "$wxUSE_TREECTRL" = "yes"; then
    if test "$wxUSE_IMAGLIST" = "yes"; then
        AC_DEFINE(wxUSE_TREECTRL)
        USES_CONTROLS=1
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS treectrl"
    else
        AC_MSG_WARN([wxTreeCtrl requires wxImageList and won't be compiled without it])
    fi
fi

if test "$wxUSE_TREELISTCTRL" = "yes"; then
    AC_DEFINE(wxUSE_TREELISTCTRL)
    USES_CONTROLS=1
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS treelist"
fi

if test "$wxUSE_POPUPWIN" = "yes"; then
    AC_DEFINE(wxUSE_POPUPWIN)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS popup"

    USES_CONTROLS=1
fi

if test "$wxUSE_PREFERENCES_EDITOR" = "yes"; then
    AC_DEFINE(wxUSE_PREFERENCES_EDITOR)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS preferences"
fi

if test "$wxUSE_PRIVATE_FONTS" = "yes"; then
    if test "$wxUSE_GTK" = 1; then
        if test "$wxUSE_PRIVATE_FONTS" = "yes"; then
            PKG_CHECK_MODULES(PRIVATE_FONTS, [fontconfig >= 2.8.0 pangoft2 >= 1.38.0],
                              [
                                AC_DEFINE(wxUSE_PRIVATE_FONTS)
                                CXXFLAGS="$PRIVATE_FONTS_CFLAGS $CXXFLAGS"
                                GUI_TK_LIBRARY="$GUI_TK_LIBRARY $PRIVATE_FONTS_LIBS"
                              ],
                              [AC_MSG_WARN([run-time font loading won't be supported by wxFont])])
        fi
    elif test "$wxUSE_MAC" = 1 -o "$wxUSE_MSW" = 1; then
        dnl In these ports we don't need anything special.
        AC_DEFINE(wxUSE_PRIVATE_FONTS)
    fi
    dnl And in the other ports wxUSE_PRIVATE_FONTS is not supported.
fi

if test "$wxUSE_DIALUP_MANAGER" = "yes"; then
    if test "$wxUSE_MAC" = 1; then
        AC_MSG_WARN([Dialup manager not supported on this platform... disabled])
    else
        AC_DEFINE(wxUSE_DIALUP_MANAGER)
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS dialup"
    fi
fi

if test "$wxUSE_TIPWINDOW" = "yes"; then
    AC_DEFINE(wxUSE_TIPWINDOW)
fi

if test "$USES_CONTROLS" = 1; then
    AC_DEFINE(wxUSE_CONTROLS)
fi

dnl ---------------------------------------------------------------------------
dnl misc options
dnl ---------------------------------------------------------------------------

dnl please keep the settings below in alphabetical order
if test "$wxUSE_ACCESSIBILITY" = "yes"; then
    AC_DEFINE(wxUSE_ACCESSIBILITY)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS access"
fi

if test "$wxUSE_ARTPROVIDER_STD" = "yes"; then
    AC_DEFINE(wxUSE_ARTPROVIDER_STD)
fi

if test "$wxUSE_ARTPROVIDER_TANGO" = "auto"; then
    dnl Tango-based art provider is not needed in GTK-based ports as the
    dnl native art provider completely replaces it.
    if test "$wxUSE_GTK" != 1; then
        dnl It also requires support for memory-mapped PNG images.
        if test "$wxUSE_LIBPNG" != no -a \
                "$wxUSE_IMAGE" = yes -a \
                "$wxUSE_STREAMS" = yes; then
            wxUSE_ARTPROVIDER_TANGO="yes"
        fi
    fi
fi

if test "$wxUSE_ARTPROVIDER_TANGO" = "yes"; then
    AC_DEFINE(wxUSE_ARTPROVIDER_TANGO)
fi

if test "$wxUSE_DRAGIMAGE" = "yes"; then
    AC_DEFINE(wxUSE_DRAGIMAGE)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS dragimag"
fi

if test "$wxUSE_EXCEPTIONS" = "yes"; then
    if test "$wxUSE_NO_EXCEPTIONS" = "yes" ; then
        AC_MSG_WARN([--enable-exceptions can't be used with --enable-no_exceptions])
    else
        AC_DEFINE(wxUSE_EXCEPTIONS)
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS except"
    fi
fi

USE_HTML=0
if test "$wxUSE_HTML" = "yes"; then
    AC_DEFINE(wxUSE_HTML)
    USE_HTML=1
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS html html/about html/help html/helpview html/printing html/test html/virtual html/widget html/zip htlbox"
fi
if test "$wxUSE_WEBKIT" = "yes"; then
    if test "$wxUSE_MAC" = 1 -a "$USE_DARWIN" = 1; then
        old_CPPFLAGS="$CPPFLAGS"
        CPPFLAGS="-x objective-c++ $CPPFLAGS"
        AC_CHECK_HEADER([WebKit/HIWebView.h],
                        [
                           AC_DEFINE(wxUSE_WEBKIT)
                           WEBKIT_LINK="-framework WebKit"
                        ],
                        [
                           AC_MSG_WARN([WebKit headers not found; disabling wxWebKit])
                           wxUSE_WEBKIT=no
                        ],
                        [
                           #include <Carbon/Carbon.h>
                           #include <WebKit/WebKit.h>
                        ])
        CPPFLAGS="$old_CPPFLAGS"
    else
        wxUSE_WEBKIT=no
    fi
    if test "$wxUSE_WEBKIT" = "yes"; then
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS html/htmlctrl"
    fi
fi

USE_XRC=0
if test "$wxUSE_XRC" = "yes"; then
    if test "$wxUSE_XML" != "yes"; then
        AC_MSG_WARN([XML library not built, XRC resources disabled])
        wxUSE_XRC=no
    else
        AC_DEFINE(wxUSE_XRC)
        USE_XRC=1
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS xrc"

        echo "${HOST_PREFIX}install_name_tool \${changes} \${2}/wxrc-${WX_RELEASE}" >> change-install-names
    fi
fi

USE_AUI=0
if test "$wxUSE_AUI" = "yes"; then
   AC_DEFINE(wxUSE_AUI)
   USE_AUI=1
   SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS aui"
fi

USE_PROPGRID=0
if test "$wxUSE_PROPGRID" = "yes"; then
   AC_DEFINE(wxUSE_PROPGRID)
   USE_PROPGRID=1
   SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS propgrid"
fi

USE_RIBBON=0
if test "$wxUSE_RIBBON" = "yes"; then
   AC_DEFINE(wxUSE_RIBBON)
   USE_RIBBON=1
   SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS ribbon"
fi

USE_STC=0
if test "$wxUSE_STC" = "yes"; then
   AC_DEFINE(wxUSE_STC)
   USE_STC=1
   SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS stc"

   dnl python is used to update src/stc.h (see build/bakefiles/scintilla.bkl)
   AC_PATH_PROG(PYTHON, python)
   if test "x$PYTHON" = "x"; then
     COND_PYTHON="#"
   fi
   AC_SUBST(COND_PYTHON)
fi

if test "$wxUSE_MENUS" = "yes"; then
    AC_DEFINE(wxUSE_MENUS)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS menu"
fi

if test "$wxUSE_MIMETYPE" = "yes"; then
    AC_DEFINE(wxUSE_MIMETYPE)
fi

if test "$wxUSE_MINIFRAME" = "yes"; then
    AC_DEFINE(wxUSE_MINIFRAME)
fi

if test "$wxUSE_SYSTEM_OPTIONS" = "yes"; then
    AC_DEFINE(wxUSE_SYSTEM_OPTIONS)
fi

if test "$wxUSE_TASKBARICON" = "yes"; then
    AC_DEFINE(wxUSE_TASKBARICON)
    dnl This is used under MSW, just enable it always without testing for the
    dnl toolkit nor providing a separate option for it because it's totally
    dnl harmless to have it defined even if it's unnecessary.
    AC_DEFINE(wxUSE_TASKBARICON_BALLOONS)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS taskbar"
fi


if test "$wxUSE_VALIDATORS" = "yes"; then
    AC_DEFINE(wxUSE_VALIDATORS)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS validate"
fi

if test "$wxUSE_PALETTE" = "yes" ; then
    if test "$wxUSE_DFB" = 1; then
        AC_MSG_WARN([wxPalette not yet supported under DFB... disabled])
        wxUSE_PALETTE=no
    else
        AC_DEFINE(wxUSE_PALETTE)
    fi
fi

USE_RICHTEXT=0
if test "$wxUSE_RICHTEXT" = "yes"; then
    AC_DEFINE(wxUSE_RICHTEXT)
    USE_RICHTEXT=1
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS richtext"
fi

if test "$wxUSE_WEBVIEW" = "yes"; then
    USE_WEBVIEW_WEBKIT=0
    USE_WEBVIEW_WEBKIT2=0
    if test "$wxUSE_WEBVIEW_WEBKIT" = "yes"; then
        if test "$wxUSE_GTK" = 1; then
            if test "$WXGTK3" = 1; then
                PKG_CHECK_MODULES([WEBKIT],
                                  [webkit2gtk-4.0],
                                  [
                                    USE_WEBVIEW_WEBKIT2=1
                                    CPPFLAGS="$CPPFLAGS $WEBKIT_CFLAGS"
                                    EXTRALIBS_WEBVIEW="$WEBKIT_LIBS"
                                  ],
                                  [
                                    AC_MSG_WARN([webkit2gtk not found, falling back to webkitgtk])
                                  ])
            fi
            if test "$USE_WEBVIEW_WEBKIT2" = 0; then
                webkitgtk=webkit-1.0
                if test "$WXGTK3" = 1; then
                    webkitgtk="webkitgtk-${TOOLKIT_VERSION}.0"
                fi
                PKG_CHECK_MODULES([WEBKIT],
                                  [$webkitgtk >= 1.3.1],
                                  [
                                    USE_WEBVIEW_WEBKIT=1
                                    CPPFLAGS="$CPPFLAGS $WEBKIT_CFLAGS"
                                    EXTRALIBS_WEBVIEW="$WEBKIT_LIBS"
                                  ],
                                  [
                                    AC_MSG_WARN([webkitgtk not found.])
                                  ])
            fi
        elif test "$wxUSE_MAC" = 1 -a "$USE_DARWIN" = 1; then
            dnl Under Mac we always have the libraries but check for the
            dnl headers
            old_CPPFLAGS="$CPPFLAGS"
            CPPFLAGS="-x objective-c++ $CPPFLAGS"
            AC_CHECK_HEADER([WebKit/HIWebView.h],
                            [
                                USE_WEBVIEW_WEBKIT=1
                                WEBKIT_LINK="-framework WebKit"
                            ],
                            [
                                AC_MSG_WARN([WebKit headers not found])
                            ],
                            [
                                #include <Carbon/Carbon.h>
                                #include <WebKit/WebKit.h>
                            ])
            CPPFLAGS="$old_CPPFLAGS"
        fi
    fi

    wxUSE_WEBVIEW="no"
    if test "$wxUSE_GTK" = 1 -o "$wxUSE_MAC" = 1; then
        if test "$USE_WEBVIEW_WEBKIT" = 1; then
            wxUSE_WEBVIEW="yes"
            AC_DEFINE(wxUSE_WEBVIEW_WEBKIT)
        elif test "$USE_WEBVIEW_WEBKIT2" = 1; then
            wxUSE_WEBVIEW="yes"
            AC_DEFINE(wxUSE_WEBVIEW_WEBKIT2)
        else
            AC_MSG_WARN([WebKit not available, disabling wxWebView])
        fi
    elif test "$wxUSE_MSW" = 1; then
        if test "$wxUSE_WEBVIEW_IE" = "yes"; then
            dnl TODO: Check for the required headers/libraries under Windows
            dnl       too and do the right thing automatically there too.
            wxUSE_WEBVIEW="yes"
            AC_DEFINE(wxUSE_WEBVIEW_IE)
        fi
    fi
fi

if test "$wxUSE_WEBVIEW" = "yes"; then
    USE_WEBVIEW=1
    AC_DEFINE(wxUSE_WEBVIEW)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS webview"
else
    USE_WEBVIEW=0
fi

dnl ---------------------------------------------------------------------------
dnl wxImage options
dnl ---------------------------------------------------------------------------

if test "$wxUSE_IMAGE" = "yes" ; then
    AC_DEFINE(wxUSE_IMAGE)

    if test "$wxUSE_GIF" = "yes" ; then
      AC_DEFINE(wxUSE_GIF)
    fi

    if test "$wxUSE_PCX" = "yes" ; then
      AC_DEFINE(wxUSE_PCX)
    fi

    if test "$wxUSE_TGA" = "yes" ; then
      AC_DEFINE(wxUSE_TGA)
    fi

    if test "$wxUSE_IFF" = "yes" ; then
      AC_DEFINE(wxUSE_IFF)
    fi

    if test "$wxUSE_PNM" = "yes" ; then
      AC_DEFINE(wxUSE_PNM)
    fi

    if test "$wxUSE_XPM" = "yes" ; then
      AC_DEFINE(wxUSE_XPM)
    fi

    if test "$wxUSE_ICO_CUR" = "yes" ; then
      AC_DEFINE(wxUSE_ICO_CUR)
    fi
fi

dnl ---------------------------------------------------------------------------
dnl common dialogs
dnl ---------------------------------------------------------------------------

if test "$wxUSE_ABOUTDLG" = "yes"; then
    AC_DEFINE(wxUSE_ABOUTDLG)
fi

if test "$wxUSE_CHOICEDLG" = "yes"; then
    AC_DEFINE(wxUSE_CHOICEDLG)
fi

if test "$wxUSE_COLOURDLG" = "yes"; then
    AC_DEFINE(wxUSE_COLOURDLG)
fi

if test "$wxUSE_FILEDLG" = "yes"; then
    AC_DEFINE(wxUSE_FILEDLG)
fi

if test "$wxUSE_FINDREPLDLG" = "yes"; then
    AC_DEFINE(wxUSE_FINDREPLDLG)
fi

if test "$wxUSE_FONTDLG" = "yes"; then
    AC_DEFINE(wxUSE_FONTDLG)
fi

if test "$wxUSE_DIRDLG" = "yes"; then
    if test "$wxUSE_TREECTRL" != "yes"; then
        AC_MSG_WARN(wxDirDialog requires wxTreeCtrl so it won't be compiled without it)
    else
        AC_DEFINE(wxUSE_DIRDLG)
    fi
fi

if test "$wxUSE_MSGDLG" = "yes"; then
    AC_DEFINE(wxUSE_MSGDLG)
fi

if test "$wxUSE_NUMBERDLG" = "yes"; then
    AC_DEFINE(wxUSE_NUMBERDLG)
fi

if test "$wxUSE_PROGRESSDLG" = "yes"; then
    AC_DEFINE(wxUSE_PROGRESSDLG)
    dnl No special option for this one yet as it's supposed to be temporary and
    dnl disappear later anyhow.
    AC_DEFINE(wxUSE_NATIVE_PROGRESSDLG)
fi

if test "$wxUSE_SPLASH" = "yes"; then
    AC_DEFINE(wxUSE_SPLASH)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS splash"
fi

if test "$wxUSE_STARTUP_TIPS" = "yes"; then
    AC_DEFINE(wxUSE_STARTUP_TIPS)
fi

if test "$wxUSE_TEXTDLG" = "yes"; then
    AC_DEFINE(wxUSE_TEXTDLG)
fi

if test "$wxUSE_WIZARDDLG" = "yes"; then
    AC_DEFINE(wxUSE_WIZARDDLG)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS wizard"
fi

dnl ---------------------------------------------------------------------------
dnl options used under wxMSW and wxPM
dnl ---------------------------------------------------------------------------

if test "$wxUSE_MSW" = 1; then
    if test "$wxUSE_OWNER_DRAWN" = "yes"; then
        AC_DEFINE(wxUSE_OWNER_DRAWN)
    fi
fi

dnl ---------------------------------------------------------------------------
dnl wxMSW-only options
dnl ---------------------------------------------------------------------------

if test "$wxUSE_MSW" = 1 ; then

    if test "$wxUSE_DC_CACHEING" = "yes"; then
        AC_DEFINE(wxUSE_DC_CACHEING)
    fi

    if test "$wxUSE_POSTSCRIPT_ARCHITECTURE_IN_MSW" = "yes"; then
        AC_DEFINE(wxUSE_POSTSCRIPT_ARCHITECTURE_IN_MSW)
    fi

    if test "$wxUSE_UXTHEME" = "yes"; then
        AC_DEFINE(wxUSE_UXTHEME)
    fi

fi
dnl wxUSE_MSW = 1

dnl not quite MSW-only although mostly useful to disable this under MSW
if test "$wxUSE_AUTOID_MANAGEMENT" = "yes"; then
    AC_DEFINE(wxUSE_AUTOID_MANAGEMENT)
fi

if test "$USE_WIN32" = 1 ; then
    if test "$wxUSE_DBGHELP" = "yes"; then
        AC_CACHE_CHECK([if debug help API is available], wx_cv_lib_debughlp,
            [
                dnl we need just the header, not the library, as we load the
                dnl DLL dynamically anyhow during run-time
                AC_LANG_PUSH(C++)
                AC_TRY_COMPILE(
                    [#include <windows.h>
                     #include <imagehlp.h>],
                    [
                        #ifndef API_VERSION_NUMBER
                        #error API_VERSION_NUMBER not defined!
                        #endif
                        #if API_VERSION_NUMBER < 9
                        #error API_VERSION_NUMBER at least 9 required.
                        #endif
                    ],
                    wx_cv_lib_debughlp=yes,
                    wx_cv_lib_debughlp=no
                )
                AC_LANG_POP()
            ]
        )

        if test "$wx_cv_lib_debughlp" = yes; then
            AC_DEFINE(wxUSE_DBGHELP)
        else
            AC_MSG_WARN([Debug help API and wxStackWalker won't be available])
        fi
    fi

    if test "$wxUSE_DIB" = "yes"; then
        AC_DEFINE(wxUSE_WXDIB)
    fi

    if test "$wxUSE_INICONF" = "yes"; then
        AC_DEFINE(wxUSE_INICONF)
    fi

    if test "$wxUSE_REGKEY" = "yes"; then
        AC_DEFINE(wxUSE_REGKEY)
    fi
fi
dnl USE_WIN32 = 1

dnl ---------------------------------------------------------------------------
dnl wxGraphicsContext
dnl ---------------------------------------------------------------------------

dnl Under Mac we don't even provide --enable-graphics_ctx switch as we always
dnl need it -- but because we don't have the option, wxUSE_GRAPHICS_CONTEXT is
dnl not defined automatically and we need to do it ourselves
if test "$wxUSE_MAC" = 1; then
    wxUSE_GRAPHICS_CONTEXT="yes"
fi

if test "$wxUSE_GRAPHICS_CONTEXT" = "yes"; then
    wx_has_graphics=0
    if test "$wxUSE_MSW" = 1; then
        AC_CACHE_CHECK([if GDI+ is available], wx_cv_lib_gdiplus,
            [
                dnl we need just the header, not the library, as we load the
                dnl GDI+ DLL dynamically anyhow during run-time
                AC_LANG_PUSH(C++)
                AC_TRY_COMPILE(
                    [#include <windows.h>
                     #include <gdiplus.h>],
                    [
                        using namespace Gdiplus;
                    ],
                    wx_cv_lib_gdiplus=yes,
                    wx_cv_lib_gdiplus=no
                )
                AC_LANG_POP()
            ]
        )
        if test "$wx_cv_lib_gdiplus" = "yes"; then
            wx_has_graphics=1
        fi
    elif test "$WXGTK1" = "1"; then
        AC_MSG_WARN([wxGraphicsContext not supported with GTK +1])
    elif test "$wxUSE_GTK" = 1 -o "$wxUSE_QT" = 1 -o "$wxUSE_X11" = 1; then
        PKG_CHECK_MODULES(CAIRO, cairo,
            [wx_has_graphics=1],
            [AC_MSG_WARN([Cairo library not found])]
        )
        if test "$wx_has_graphics" = 1; then
            dnl Check that Cairo library is new enough: wxGraphicsContext
            dnl won't compile without cairo_push_group() and
            dnl cairo_pop_group_to_source() which are new in 1.2.
            save_LIBS="$LIBS"
            LIBS="$LIBS $CAIRO_LIBS"
            AC_CHECK_FUNCS([cairo_push_group])
            LIBS="$save_LIBS"
            if test "$ac_cv_func_cairo_push_group" = "no"; then
                wx_has_graphics=0
                AC_MSG_WARN([Cairo library is too old and misses cairo_push_group()])
            else
                AC_DEFINE(wxUSE_CAIRO)

                dnl We don't need to do this for wxGTK as we already get Cairo
                dnl flags as part of GTK+ ones.
                if test "$wxUSE_GTK" != 1; then
                    CPPFLAGS="$CAIRO_CFLAGS $CPPFLAGS"
                    GUI_TK_LIBRARY="$GUI_TK_LIBRARY $CAIRO_LIBS"
                fi
            fi
        fi
    else
        dnl assume it's ok, add more checks here if needed
        wx_has_graphics=1
    fi

    if test "$wx_has_graphics" = 1; then
        AC_DEFINE(wxUSE_GRAPHICS_CONTEXT)
    else
        AC_MSG_WARN([wxGraphicsContext won't be available])
    fi
fi

dnl ---------------------------------------------------------------------------
dnl wxMediaCtrl
dnl ---------------------------------------------------------------------------

USE_MEDIA=0

if test "$wxUSE_MEDIACTRL" = "yes" -o "$wxUSE_MEDIACTRL" = "auto"; then
    USE_MEDIA=1

    dnl -----------------------------------------------------------------------
    dnl GStreamer
    dnl -----------------------------------------------------------------------
    if test "$wxUSE_GTK" = 1; then
        wxUSE_GSTREAMER="no"

        GST_VERSION_MAJOR=1
        GST_VERSION_MINOR=0
        GST_VERSION=$GST_VERSION_MAJOR.$GST_VERSION_MINOR

        PKG_CHECK_MODULES(GST,
            [gstreamer-$GST_VERSION gstreamer-video-$GST_VERSION gstreamer-player-$GST_VERSION >= 1.7.2.1],
            [
                wxUSE_GSTREAMER="yes"
                AC_DEFINE(wxUSE_GSTREAMER_PLAYER)
            ],
            [
                AC_MSG_NOTICE([GStreamer 1.7.2+ not available. Not using GstPlayer and falling back to 1.0])
            ]
        )

        if test $wxUSE_GSTREAMER = "no"; then
            PKG_CHECK_MODULES(GST,
                [gstreamer-$GST_VERSION gstreamer-video-$GST_VERSION],
                [
                    wxUSE_GSTREAMER="yes"
                ],
                [
                    AC_MSG_WARN([GStreamer 1.0 not available, falling back to 0.10])
                    GST_VERSION_MAJOR=0
                    GST_VERSION_MINOR=10
                    GST_VERSION=$GST_VERSION_MAJOR.$GST_VERSION_MINOR
                ]
            )
        fi

        if test $GST_VERSION_MINOR = "10"; then
            PKG_CHECK_MODULES(GST,
                [gstreamer-$GST_VERSION gstreamer-plugins-base-$GST_VERSION],
                [
                    wxUSE_GSTREAMER="yes"
                    GST_LIBS="$GST_LIBS -lgstinterfaces-$GST_VERSION"
                ],
                [
                    AC_MSG_WARN([GStreamer 0.10 not available])
                ]
            )
        fi

        if test "$wxUSE_GSTREAMER" = "yes"; then
            CPPFLAGS="$GST_CFLAGS $CPPFLAGS"
            EXTRALIBS_MEDIA="$GST_LIBS"

            AC_DEFINE(wxUSE_GSTREAMER)
        else
            USE_MEDIA=0
        fi

    elif test "$wxUSE_MAC" = 1; then
        dnl We always have the necessary libraries under Mac
        dnl but we need to link with it explicitly.
        GST_LIBS="-framework AVFoundation -framework CoreMedia"
        if test "$wxUSE_OSX_IPHONE" != 1; then
            dnl In addition to AVFoundation AVKit may be used when available
            dnl AVKit is only available since OS X 10.9
            old_CPPFLAGS="$CPPFLAGS"
            CPPFLAGS="-x objective-c++ $CPPFLAGS"
            AC_MSG_CHECKING([if AVKit is available])
            AC_TRY_COMPILE(
                [#include "AvailabilityMacros.h"],
                [
                    #if defined(MAC_OS_X_VERSION_10_9) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_9
                        // AVKit available
                    #else
                        choke me
                    #endif
                ],
                [GST_LIBS="$GST_LIBS -weak_framework AVKit"; AC_MSG_RESULT(yes)],
                AC_MSG_RESULT(no)
            )
            CPPFLAGS="$old_CPPFLAGS"
        fi
    fi

    if test $USE_MEDIA = 1; then
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS mediaplayer"
        AC_DEFINE(wxUSE_MEDIACTRL)
    else
        if test "$wxUSE_MEDIACTRL" = "yes"; then
            AC_MSG_ERROR([GStreamer not available])
        else
            dnl was set to 'auto'
            AC_MSG_WARN([GStreamer not available... disabling wxMediaCtrl])
        fi
    fi
fi

dnl ---------------------------------------------------------------------------
dnl define the variable containing the installation prefix (used in dcpsg.cpp)
dnl ---------------------------------------------------------------------------

if test "x$prefix" != "xNONE"; then
    wxPREFIX=$prefix
else
    wxPREFIX=$ac_default_prefix
fi

AC_DEFINE_UNQUOTED(wxINSTALL_PREFIX, "$wxPREFIX")


dnl ---------------------------------------------------------------------------
dnl define variables with all built libraries for wx-config
dnl ---------------------------------------------------------------------------

STD_BASE_LIBS="base"
STD_GUI_LIBS=""
BUILT_WX_LIBS="base"

if test "$wxUSE_SOCKETS" = "yes" ; then
    STD_BASE_LIBS="net $STD_BASE_LIBS"
    BUILT_WX_LIBS="net $BUILT_WX_LIBS"
fi
if test "$wxUSE_XML" = "yes" ; then
    STD_BASE_LIBS="xml $STD_BASE_LIBS"
    BUILT_WX_LIBS="xml $BUILT_WX_LIBS"
fi

if test "$wxUSE_GUI" = "yes"; then
    STD_GUI_LIBS="adv core"
    BUILT_WX_LIBS="$STD_GUI_LIBS $BUILT_WX_LIBS"

    if test "$wxUSE_DEBUGREPORT" = "yes" ; then
        STD_GUI_LIBS="qa $STD_GUI_LIBS"
        BUILT_WX_LIBS="qa $BUILT_WX_LIBS"
    fi
    if test "$wxUSE_HTML" = "yes" ; then
        STD_GUI_LIBS="html $STD_GUI_LIBS"
        BUILT_WX_LIBS="html $BUILT_WX_LIBS"
    fi
    if test "$wxUSE_MEDIACTRL" = "yes" ; then
        BUILT_WX_LIBS="media $BUILT_WX_LIBS"
    fi
    if test "$wxUSE_OPENGL" = "yes" ; then
        BUILT_WX_LIBS="gl $BUILT_WX_LIBS"
    fi
    if test "$wxUSE_AUI" = "yes" ; then
        BUILT_WX_LIBS="aui $BUILT_WX_LIBS"
    fi
    if test "$wxUSE_PROPGRID" = "yes" ; then
        BUILT_WX_LIBS="propgrid $BUILT_WX_LIBS"
    fi
    if test "$wxUSE_RIBBON" = "yes" ; then
        BUILT_WX_LIBS="ribbon $BUILT_WX_LIBS"
    fi
    if test "$wxUSE_RICHTEXT" = "yes" ; then
        BUILT_WX_LIBS="richtext $BUILT_WX_LIBS"
    fi
    if test "$wxUSE_STC" = "yes" ; then
        BUILT_WX_LIBS="stc $BUILT_WX_LIBS"
    fi
    if test "$wxUSE_WEBVIEW" = "yes" ; then
        BUILT_WX_LIBS="webview $BUILT_WX_LIBS"
    fi
    if test "$wxUSE_XRC" = "yes" ; then
        STD_GUI_LIBS="xrc $STD_GUI_LIBS"
        BUILT_WX_LIBS="xrc $BUILT_WX_LIBS"
    fi
fi

AC_SUBST(BUILT_WX_LIBS)
AC_SUBST(STD_BASE_LIBS)
AC_SUBST(STD_GUI_LIBS)

dnl ---------------------------------------------------------------------------
dnl Output the makefiles and such from the results found above
dnl ---------------------------------------------------------------------------

dnl all additional libraries (except wxWidgets itself) we link with
EXTRA_FRAMEWORKS=
if test "$wxUSE_MAC" = 1 ; then
    if test "$USE_DARWIN" = 1; then
        if test "$wxUSE_OSX_IPHONE" = 1; then
            EXTRA_FRAMEWORKS="-framework IOKit -framework UIKit -framework CFNetwork -framework AudioToolbox -framework CoreFoundation -framework CoreGraphics -framework OpenGLES -framework Foundation -framework QuartzCore -framework CoreText"
        else
            EXTRA_FRAMEWORKS="-framework IOKit -framework Carbon -framework Cocoa -framework AudioToolbox -framework System -framework OpenGL"

            dnl The case of QuickTime framework is special: with Cocoa, we only
            dnl need it in 32 bit builds and not in 64 bit and, moreover,
            dnl linking with it in 64 bit builds results in a warning because
            dnl the framework is not available in 64 bits itself. So make an
            dnl effort to avoid using it unnecessarily.
            if test "$wxUSE_MEDIACTRL" = "yes"; then

            if test "$cross_compiling" != "no"; then
                dnl The check below doesn't work well when cross-compiling
                dnl ("file" under non-OS X systems might not recognize
                dnl universal binaries) so assume we do build for 32 bits as
                dnl it's safer: at worst we'll get a warning when building in
                dnl 64 bits only, but at least the build will still work.
                wx_cv_target_x86_64=no
            else
                AC_CACHE_CHECK(
                    [if we target only x86_64],
                    wx_cv_target_x86_64,
                    AC_LINK_IFELSE(
                        [AC_LANG_SOURCE([int main() { return 0; }])],
                        if file conftest$ac_exeext|grep -q 'i386\|ppc'; then
                            wx_cv_target_x86_64=no
                        else
                            wx_cv_target_x86_64=yes
                        fi
                    )
                )
            fi

            if test "$wx_cv_target_x86_64" != "yes"; then
                EXTRA_FRAMEWORKS="$EXTRA_FRAMEWORKS -framework QuickTime"
            fi

            fi
        fi
    fi
fi
if test "$USE_DARWIN" = 1 -a "$wxUSE_MAC" != 1 -a "$wxUSE_OLD_COCOA" != 1 ; then
    EXTRA_FRAMEWORKS="$EXTRA_FRAMEWORKS -framework IOKit -framework CoreServices -framework System -framework ApplicationServices -framework Foundation"
fi

LDFLAGS="$LDFLAGS $EXTRA_FRAMEWORKS"
WXCONFIG_LDFLAGS="$WXCONFIG_LDFLAGS $EXTRA_FRAMEWORKS"

LIBS="$ZLIB_LINK $POSIX4_LINK $INET_LINK $WCHAR_LINK $DL_LINK $LIBS"

if test "$wxUSE_GUI" = "yes"; then

    dnl TODO add checks that these samples will really compile (i.e. all the
    dnl      library features they need are present)

    dnl TODO some samples are never built so far: mfc (requires VC++)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS archive artprov dialogs drawing \
                     erase event exec font image minimal power render \
                     shaped svg taborder vscroll widgets wrapsizer"

    if test "$wxUSE_MONOLITHIC" != "yes"; then
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS console"
    fi
    if test "$TOOLKIT" = "MSW"; then
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS regtest"
        if test "$wxUSE_UNIVERSAL" != "yes"; then
            SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS ownerdrw nativdlg dll"
        fi
    fi
else
    SAMPLES_SUBDIRS="console"
    if test "$wxUSE_SOCKETS" = "yes" ; then
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS sockets"
    fi
    if test "$wxUSE_IPC" = "yes" ; then
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS ipc"
    fi
fi


dnl C/C++ compiler options used to compile wxWidgets
dnl
dnl check for icc before gcc as icc is also recognized as gcc
if test "x$INTELCC" = "xyes" ; then
    dnl Warnings which can't be easily suppressed in C code are disabled:
    dnl
    dnl     #810: conversion from "x" to "y" may lose significant bits
    dnl     #869: parameter "foo" was never referenced
    dnl     #1572: floating-point equality and inequality comparisons
    dnl            are unreliable
    dnl     #1684: conversion from pointer to same-sized integral type
    dnl     #2259: non-pointer conversion from "x" to "y" may lose significant
    dnl            bits
    CWARNINGS="-Wall -wd810,869,981,1418,1572,1684,2259"
elif test "$GCC" = yes ; then
    CWARNINGS="-Wall -Wundef"
fi

if test "x$INTELCXX" = "xyes" ; then
    dnl Intel compiler gives some warnings which simply can't be worked
    dnl around or of which we have too many (810, 869) so it's impractical to
    dnl keep them enabled even if in theory it would be nice and some others
    dnl (279) are generated for standard macros and so there is nothing we can
    dnl do about them
    dnl
    dnl     #279: controlling expression is constant
    dnl     #383: value copied to temporary, reference to temporary used
    dnl     #444: destructor for base class "xxx" is not virtual
    dnl     #981: operands are evaluated in unspecified order
    dnl     #1418: external definition with no prior declaration
    dnl     #1419: external declaration in primary source file
    dnl     #1881: argument must be a constant null pointer value
    dnl
    dnl (for others see CWARNINGS above)
    CXXWARNINGS="-Wall -wd279,383,444,810,869,981,1418,1419,1881,2259"
elif test "$GXX" = yes ; then
    CXXWARNINGS="-Wall -Wundef -Wunused-parameter -Wno-ctor-dtor-privacy"
    AX_CXXFLAGS_GCC_OPTION(-Woverloaded-virtual, CXXWARNINGS)

    dnl there are tons of warnings when building with GTK+ 1 which are never
    dnl going to get fixed, so disable them to at least see new warnings/errors
    dnl more clearly
    if test "$WXGTK1" = "1"; then
        CXXWARNINGS="$CXXWARNINGS -Wno-deprecated-declarations -Wno-narrowing -Wno-write-strings"
    fi

    dnl when building using GTK+ 3 or Cocoa we currently get tons of deprecation
    dnl warnings from the standard headers -- disable them as we already know
    dnl that they're deprecated but we still have to use them to support older
    dnl toolkit versions and leaving this warning enabled prevents seeing any
    dnl other ones
    if test "$WXGTK4" != 1 -a \( "$WXGTK3" = 1 -o "$wxUSE_MAC" = 1 \) ; then
        CXXWARNINGS="$CXXWARNINGS -Wno-deprecated-declarations"

        dnl CXXWARNINGS is not used for Objective-C++ code compilation, but we
        dnl want to avoid these warnings in it too when building wxOSX.
        OBJCXXFLAGS="$OBJCXXFLAGS -Wno-deprecated-declarations"
    fi
fi


dnl combine everything together and remove the extra white space while doing it
WXCONFIG_CFLAGS=`echo $WXCONFIG_CFLAGS`
WXCONFIG_CXXFLAGS=`echo $WXCONFIG_CFLAGS $WXCONFIG_CXXFLAGS`


dnl add -I options we use during library compilation
dnl
dnl note that the order is somewhat important: wxWidgets headers should
dnl come first and the one with setup.h should be before $(top_srcdir)/include
dnl in case the latter contains setup.h used by non-autoconf makefiles
CPPFLAGS=`echo $WXCONFIG_CPPFLAGS \
 -I\\${wx_top_builddir}/lib/wx/include/${TOOLCHAIN_FULLNAME} \
 -I\\${top_srcdir}/include $TOOLKIT_INCLUDE \
 $CPPFLAGS `

C_AND_CXX_FLAGS="$DEBUG_CFLAGS $PROFILE_FLAGS $OPTIMISE_CFLAGS"
CFLAGS=`echo $WXCONFIG_CFLAGS $CWARNINGS $C_AND_CXX_FLAGS $CFLAGS `
CXXFLAGS=`echo $WXCONFIG_CXXFLAGS $C_AND_CXX_FLAGS $CXXFLAGS `
OBJCFLAGS=`echo $WXCONFIG_CFLAGS $CWARNINGS $C_AND_CXX_FLAGS $OBJCFLAGS `
OBJCXXFLAGS=`echo $WXCONFIG_CXXFLAGS $C_AND_CXX_FLAGS $OBJCXXFLAGS `

dnl now that we added WXCONFIG_CPPFLAGS to CPPFLAGS we can add the wx-config
dnl only stuff to it
WXCONFIG_CPPFLAGS=`echo $WXCONFIG_CPPFLAGS $WXCONFIG_ONLY_CPPFLAGS`


LIBS=`echo $LIBS`
EXTRALIBS="$LDFLAGS $LDFLAGS_VERSIONING $LIBS $DMALLOC_LIBS"
EXTRALIBS_XML="$EXPAT_LINK"
EXTRALIBS_HTML="$MSPACK_LINK"
EXTRALIBS_MEDIA="$GST_LIBS"
EXTRALIBS_STC="-lwxscintilla${WX_LIB_FLAVOUR}-${WX_RELEASE}${HOST_SUFFIX}"
if test "$wxUSE_GUI" = "yes"; then
    EXTRALIBS_GUI=`echo $GUI_TK_LIBRARY $PNG_LINK $JPEG_LINK $TIFF_LINK $LZMA_LINK $JBIG_LINK $WEBKIT_LINK`
fi
if test "$wxUSE_OPENGL" = "yes"; then
    EXTRALIBS_OPENGL="$LDFLAGS_GL $OPENGL_LIBS"
fi

LDFLAGS="$LDFLAGS $PROFILE_FLAGS"

WXCONFIG_LIBS="$LIBS"

dnl wx-config must output 3rd party libs in --libs in static build, so collect
dnl them in wxconfig_3rdparty variable
dnl
dnl Notice that the libraries must be listed in correct order whenever there
dnl are dependencies between them for linking to work when using static
dnl libraries, e.g. jpeg, used by tiff, must come after it and zlib, used by
dnl png, must come after it as well.
if test "$wxUSE_GUI" = "yes"; then
    case "$wxUSE_LIBTIFF" in
        builtin)
            wxconfig_3rdparty="tiff $wxconfig_3rdparty"
            ;;
        sys)
            WXCONFIG_LIBS="$TIFF_LINK $LZMA_LINK $JBIG_LINK $WXCONFIG_LIBS"
            ;;
    esac
    case "$wxUSE_LIBJPEG" in
        builtin)
            wxconfig_3rdparty="jpeg $wxconfig_3rdparty"
            ;;
        sys)
            WXCONFIG_LIBS="$JPEG_LINK $WXCONFIG_LIBS"
            ;;
    esac
    case "$wxUSE_LIBPNG" in
        builtin)
            wxconfig_3rdparty="png $wxconfig_3rdparty"
            ;;
        sys)
            WXCONFIG_LIBS="$PNG_LINK $WXCONFIG_LIBS"
            ;;
    esac
fi
if test "$wxUSE_REGEX" = "builtin" ; then
    wxconfig_3rdparty="regex${lib_unicode_suffix} $wxconfig_3rdparty"
fi
if test "$wxUSE_STC" = "yes" ; then
    wxconfig_3rdparty="scintilla $wxconfig_3rdparty"
fi
case "$wxUSE_EXPAT" in
    builtin)
        wxconfig_3rdparty="expat $wxconfig_3rdparty"
        ;;
    sys)
        WXCONFIG_LIBS="$EXPAT_LINK $WXCONFIG_LIBS"
        ;;
esac
if test "$wxUSE_LIBLZMA" = "yes"; then
    dnl It could be already present in WXCONFIG_LIBS as tiff dependency, avoid
    dnl adding it again in this case:
    if test "$wxUSE_GUI" != "yes" -o "$wxUSE_LIBTIFF" != "sys"; then
        WXCONFIG_LIBS="$LZMA_LINK $WXCONFIG_LIBS"
    fi
fi
case "$wxUSE_ZLIB" in
    builtin)
        wxconfig_3rdparty="zlib $wxconfig_3rdparty"
        ;;
    sys)
        WXCONFIG_LIBS="$ZLIB_LINK $WXCONFIG_LIBS"
        ;;
esac

for i in $wxconfig_3rdparty ; do
    WXCONFIG_LIBS="-lwx${i}${WX_LIB_FLAVOUR}-${WX_RELEASE}${HOST_SUFFIX} $WXCONFIG_LIBS"
done


if test "x$wxUSE_UNIVERSAL" = "xyes" ; then
    WXUNIV=1

    case "$wxUNIV_THEMES" in
        ''|all)
            AC_DEFINE(wxUSE_ALL_THEMES)
            ;;

        *)
            for t in `echo $wxUNIV_THEMES | tr , ' ' | tr '[[a-z]]' '[[A-Z]]'`; do
                AC_DEFINE_UNQUOTED(wxUSE_THEME_$t)
            done
    esac
else
    WXUNIV=0
fi

AC_SUBST(wxUSE_ZLIB)
AC_SUBST(wxUSE_REGEX)
AC_SUBST(wxUSE_EXPAT)
AC_SUBST(wxUSE_LIBJPEG)
AC_SUBST(wxUSE_LIBPNG)
AC_SUBST(wxUSE_LIBTIFF)

if test $wxUSE_MONOLITHIC = "yes" ; then
    MONOLITHIC=1
else
    MONOLITHIC=0
fi

if test $wxUSE_PLUGINS = "yes" ; then
    USE_PLUGINS=1
else
    USE_PLUGINS=0
fi

if test "$wxUSE_DEBUGREPORT" = "yes" ; then
    USE_QA=1
else
    USE_QA=0
fi

if test $wxUSE_OFFICIAL_BUILD = "yes" ; then
    OFFICIAL_BUILD=1
else
    OFFICIAL_BUILD=0
fi

AC_SUBST(VENDOR)
AC_SUBST(OFFICIAL_BUILD)
AC_SUBST(WX_FLAVOUR)
AC_SUBST(WX_LIB_FLAVOUR)

AC_SUBST(WXUNIV)
AC_SUBST(MONOLITHIC)
AC_SUBST(USE_PLUGINS)
AC_SUBST(LIBS)
AC_SUBST(CXXWARNINGS)
AC_SUBST(EXTRALIBS)
AC_SUBST(EXTRALIBS_XML)
AC_SUBST(EXTRALIBS_HTML)
AC_SUBST(EXTRALIBS_MEDIA)
AC_SUBST(EXTRALIBS_GUI)
AC_SUBST(EXTRALIBS_OPENGL)
AC_SUBST(EXTRALIBS_SDL)
AC_SUBST(EXTRALIBS_STC)
AC_SUBST(EXTRALIBS_WEBVIEW)
AC_SUBST(WITH_PLUGIN_SDL)
AC_SUBST(UNICODE)
AC_SUBST(DEBUG_INFO)
AC_SUBST(DEBUG_FLAG)
TOOLKIT_LOWERCASE=`echo $TOOLKIT | tr '[[A-Z]]' '[[a-z]]'`
AC_SUBST(TOOLKIT_LOWERCASE)
AC_SUBST(TOOLKIT_VERSION)
AC_SUBST(DYLIB_RPATH_INSTALL)
AC_SUBST(DYLIB_RPATH_POSTLINK)
AC_SUBST(SAMPLES_RPATH_FLAG)
AC_SUBST(SAMPLES_CXXFLAGS)
AC_SUBST(HEADER_PAD_OPTION)
AC_SUBST(HOST_SUFFIX)

case "$TOOLKIT" in
    GTK)
        TOOLKIT_DESC="GTK+"
        if test "$WXGTK2" = 1; then
            if test "$WXGTK3" = 1; then
                TOOLKIT_DESC="$TOOLKIT_DESC ${TOOLKIT_VERSION}"
            else
                TOOLKIT_DESC="$TOOLKIT_DESC 2"
            fi
            if test "$wxUSE_GTKPRINT" = "yes" ; then
                TOOLKIT_EXTRA="$TOOLKIT_EXTRA GTK+ printing";
            fi
            if test "$wxUSE_LIBGNOMEVFS" = "yes" ; then
                TOOLKIT_EXTRA="$TOOLKIT_EXTRA gnomevfs"
            fi
            if test "$wxUSE_LIBNOTIFY" = "yes" ; then
                TOOLKIT_EXTRA="$TOOLKIT_EXTRA libnotify"
            fi

            if test "$TOOLKIT_EXTRA" != ""; then
                TOOLKIT_DESC="$TOOLKIT_DESC with support for `echo $TOOLKIT_EXTRA | tr -s ' '`"
            fi
        fi
        ;;

    ?*)
        TOOLKIT_DESC=$TOOLKIT_LOWERCASE
        ;;

    *)
        TOOLKIT_DESC="base only"
        ;;
esac

dnl Override some bakefile defaults before including autoconf_inc.m4

dnl Bakefile-generated makefiles use PCH by default, but we require explicitly
dnl enabling it with --enable-pch as in many cases the speed gain from using it
dnl is tiny, while the space penalty is enormous, and in some cases this can
dnl even make PCH build slower than the build without PCH.
if test "$wxUSE_PCH" != "yes"; then
    bk_use_pch=no
fi

if test "$wxUSE_WINE" = "yes"; then
    BAKEFILE_FORCE_PLATFORM=win32
fi

AC_BAKEFILE([m4_include(autoconf_inc.m4)])

dnl make install path absolute (if not already);
dnl will fail with (some) MSDOS paths
case ${INSTALL} in
  /* ) # Absolute
     ;;
  ?:* ) # Drive letter, considered as absolute.
     ;;
  *)
     INSTALL=`pwd`/${INSTALL} ;;
esac

if test "$wxUSE_GUI" = "yes"; then

if test "$wxUSE_MSW" = 1 ; then
    if test "x$WINDRES" = "x"; then
        AC_MSG_ERROR([Required windres program not found])
    fi

    RESCOMP="$WINDRES"
fi

fi
dnl wxUSE_GUI = 1


dnl Use gcc precompiled headers if supported.
if test $GCC_PCH = 1
then
    # Our WX_PRECOMP flag does not make sense for any language except C++ because
    # the headers that benefit from precompilation are mostly C++ headers.
    CXXFLAGS="-DWX_PRECOMP $CXXFLAGS"
    # When Bakefile can do multi-language PCH (e.g. C++ and Objective-C++) enable this:
    #OBJCXXFLAGS="-DWX_PRECOMP $CXXFLAGS"
fi

dnl HACK ALERT!!
dnl For now, we need to alter bk-deps not to generate deps
dnl when we've configured a Universal binary build.
dnl The next version of Bakefile will have the correct fix for this
dnl at which time, this hack can be removed.

if test "$DEPS_TRACKING" = 1 -a "$wxUSE_MAC" = 1 ; then
    if test "x$wxUSE_UNIVERSAL_BINARY" != "xno" ; then
        if test "x$disable_macosx_deps" = "xyes"; then
            sed "s/DEPSMODE=gcc/DEPSMODE=none/" < bk-deps > temp
            mv temp bk-deps
            chmod +x bk-deps
        fi
    fi
fi

dnl TOOLCHAIN_DEFS should be used for both wx and client code
WXCONFIG_CPPFLAGS="$WXCONFIG_CPPFLAGS $TOOLCHAIN_DEFS"


dnl Sun cc is compatible with gcc and so either of them can use the C
dnl libraries built with the other, i.e. gcc can be used to build wxGTK under
dnl Solaris where GTK+ is compiled using cc and cc can be used under Linux
dnl where GTK+ is built with gcc
dnl
dnl However the compiler options are not compatible at all and in particular
dnl gcc doesn't like cc -mt option and cc doesn't like -pthread. We simply
dnl filter them out as we already have the correct options for multithreaded
dnl programs if we're using threads (and if we don't, it shouldn't matter)
case "${host}" in
    *-*-solaris2* )
        dnl system packages are compiled with Sun CC and so pkg-config outputs
        dnl CC-specific "-mt" flag, remove it when using gcc
        if test "$GCC" = yes; then
            CPPFLAGS=`echo $CPPFLAGS | sed 's/-mt//g'`
            LIBS=`echo $LIBS | sed 's/-mt//g'`
            EXTRALIBS_GUI=`echo $EXTRALIBS_GUI | sed 's/-mt//g'`
        fi
        ;;

    *-*-linux* )
        dnl OTOH when using Sun CC under Linux, the flags contain gcc-specific
        dnl -pthreads which Sun CC doesn't know about
        if test "x$SUNCXX" = xyes; then
            CPPFLAGS=`echo $CPPFLAGS | sed 's/-pthread//g'`
            LIBS=`echo $LIBS | sed 's/-pthread//g'`
            EXTRALIBS_GUI=`echo $EXTRALIBS_GUI | sed 's/-pthread//g'`
        fi
        ;;
esac

dnl Add visibility support flags to CFLAGS/CXXFLAGS - do it this late so that
dnl it doesn't affect compilation checks above
CFLAGS="$CFLAGS $CFLAGS_VISIBILITY"
CXXFLAGS="$CXXFLAGS $CXXFLAGS_VISIBILITY"
OBJCFLAGS="$OBJCFLAGS $CFLAGS_VISIBILITY"
OBJCXXFLAGS="$OBJCXXFLAGS $CXXFLAGS_VISIBILITY"

dnl for convenience, sort the samples in alphabetical order
dnl
dnl FIXME For some mysterious reasons, sometimes the directories are duplicated
dnl       in this list - hence uniq. But normally, this shouldn't be needed!
dnl
dnl       Unfortunately, there is a bug in OS/2's tr, such that
dnl       tr ' ' '\n' introduces DOS-like line breaks, whereas tr '\n' ' '
dnl       only removes the Unix-like part of the introduced line break.
SAMPLES_SUBDIRS="`echo $SAMPLES_SUBDIRS | tr -s ' ' | tr ' ' '\n' | sort | uniq | tr '\n' ' '| tr -d '\r'`"

dnl subtle bakefile goop.
dnl Used in wx-config now too, as its STATIC_FLAG with different makeup.
dnl I wish we would have called it something less likely to clash with
dnl things though.
AC_SUBST(SHARED)

dnl global options
AC_SUBST(WX_LIBRARY_BASENAME_NOGUI)
AC_SUBST(WX_LIBRARY_BASENAME_GUI)

dnl toolkit options
AC_SUBST(USE_GUI)
AC_SUBST(TOOLKIT)
AC_SUBST(TOOLKIT_DIR)
AC_SUBST(TOOLCHAIN_NAME)
AC_SUBST(TOOLCHAIN_FULLNAME)

dnl wx-config options
AC_SUBST(host_alias)
AC_SUBST(cross_compiling)
AC_SUBST(WIDGET_SET)
AC_SUBST(WX_RELEASE)
AC_SUBST(WX_VERSION)
AC_SUBST(WX_SUBVERSION)
AC_SUBST(WX_CHARTYPE)

dnl note that in addition to the usual CPP/C/CXXFLAGS which are used for
dnl building the library itself, we also have WXCONFIG_-prefixed variants which
dnl are used when building the libraries using the library
dnl
dnl so put anything which should be used only during the library build in, e.g.
dnl CXXFLAGS, but put everything else (by default) into WXCONFIG_CXXFLAGS
dnl
dnl and, finally, for some things which should be only used by wx-config but
dnl not during the library compilation, use WXCONFIG_ONLY_CPPFLAGS which is
dnl added to WXCONFIG_CPPFLAGS after adding the latter to CPPFLAGS
AC_SUBST(WXCONFIG_CPPFLAGS)
AC_SUBST(WXCONFIG_CFLAGS)
AC_SUBST(WXCONFIG_CXXFLAGS)

AC_SUBST(WXCONFIG_LIBS)
AC_SUBST(WXCONFIG_RPATH)
AC_SUBST(WXCONFIG_LDFLAGS)
AC_SUBST(WXCONFIG_LDFLAGS_GUI)
AC_SUBST(WXCONFIG_RESFLAGS)

dnl distribution vars
AC_SUBST(GUIDIST)
AC_SUBST(DISTDIR)

dnl additional subdirectories where we will build
AC_SUBST(SAMPLES_SUBDIRS)

dnl additional libraries and linker settings
AC_SUBST(LDFLAGS)
AC_SUBST(LDFLAGS_GL)
AC_SUBST(OPENGL_LIBS)
AC_SUBST(DMALLOC_LIBS)
AC_SUBST(WX_VERSION_TAG)

dnl other tools
AC_SUBST(GCC)
AC_SUBST(DLLTOOL)
AC_SUBST(RESCOMP)
AC_SUBST(WINDRES)


dnl MAKE_SET will be replaced with "MAKE=..." or nothing if make sets MAKE
dnl itself (this macro is required if SUBDIRS variable is used in Makefile.am
dnl - and we do use it)
AC_PROG_MAKE_SET


AC_CONFIG_HEADERS([lib/wx/include/${TOOLCHAIN_FULLNAME}/wx/setup.h:setup.h.in])

if test "$USE_WIN32" = 1; then
    AC_CONFIG_COMMANDS([rcdefs.h],
        [
            mkdir -p $outdir &&
            $CPP $infile | sed 's/^# *[1-9].*//;s/^ *//;/./,/^$/!d' > $outdir/rcdefs.h
        ],
        [
            CPP="$CPP"
            infile="$srcdir/include/wx/msw/genrcdefs.h"
            outdir="lib/wx/include/$TOOLCHAIN_FULLNAME/wx/msw"
        ]
    )
fi

AC_CONFIG_FILES([ lib/wx/config/${TOOLCHAIN_FULLNAME}:wx-config.in ],
                [ chmod +x lib/wx/config/${TOOLCHAIN_FULLNAME} ],
                [ TOOLCHAIN_FULLNAME="${TOOLCHAIN_FULLNAME}" ])

AC_CONFIG_FILES([ lib/wx/config/inplace-${TOOLCHAIN_FULLNAME}:wx-config-inplace.in ],
                [ chmod +x lib/wx/config/inplace-${TOOLCHAIN_FULLNAME} ],
                [ TOOLCHAIN_FULLNAME="${TOOLCHAIN_FULLNAME}" ])

dnl this is used to run ifacecheck with the same flags used by the compiler
dnl for the real compilation:
AC_CONFIG_FILES([ utils/ifacecheck/rungccxml.sh ],
                [ chmod +x utils/ifacecheck/rungccxml.sh ])

if test "$wx_cv_version_script" = "yes"; then
    AC_CONFIG_FILES(version-script)
fi
AC_CONFIG_FILES(Makefile)

AC_CONFIG_COMMANDS([wx-config],
                   [ rm -f wx-config
                     ${LN_S} lib/wx/config/inplace-${TOOLCHAIN_FULLNAME} wx-config
                   ],
                   [ TOOLCHAIN_FULLNAME="${TOOLCHAIN_FULLNAME}"
                     LN_S="${LN_S}"
                   ])

dnl This would give us us build dir that in every significant way
dnl resembles an installed wx in prefix=$builddir.  It is troublesome
dnl though in this form because AC_CONFIG_LINKS will fail for directories
dnl on platforms that do not have symlinks.
dnl AC_CONFIG_LINKS([ include/wx-$WX_RELEASE$WX_FLAVOUR:include ])

if test "$wxWITH_SUBDIRS" != "no"; then
dnl Configure samples, demos etc. directories, but only if they are present:
if test "$wxUSE_GUI" = "yes"; then
    SUBDIRS="samples demos utils"
else
    dnl we build wxBase only
    dnl there are no wxBase programs in demos
    SUBDIRS="samples utils"
fi
SUBDIRS="$SUBDIRS tests"

for subdir in $SUBDIRS; do
    if test -d ${srcdir}/${subdir} ; then
        if test "$wxUSE_GUI" = "yes"; then
            if test ${subdir} = "samples"; then
                dnl only take those samples which compile in the current
                dnl configuration and which exist
                makefiles="samples/Makefile.in $makefiles"
                for sample in $SAMPLES_SUBDIRS; do
                    if test -d $srcdir/samples/$sample; then
                        makefiles="samples/$sample/Makefile.in $makefiles"
                    fi
                done
            else
                dnl assume that everything compiles for utils &c
                dnl any that shouldn't be built can be added to
                dnl DISABLED_UTILS, DISABLED_DEMOS
                disabled_var=DISABLED_`echo $subdir | tr '[[a-z]]' '[[A-Z]]'`
                eval "disabled=\$$disabled_var"
                disabled=/`echo X $disabled | sed 's@ @/|/@g'`/
                makefiles=`(cd $srcdir ; find $subdir -name Makefile.in) | $EGREP -v "$disabled"`
            fi
        else
            dnl we build wxBase only
            dnl don't take all samples/utils, just those which build with wxBase
            if test ${subdir} = "samples"; then
                dnl only take those samples which compile in the current
                dnl configuration and which exist
                makefiles="samples/Makefile.in $makefiles"
                for sample in `echo $SAMPLES_SUBDIRS`; do
                    if test -d $srcdir/samples/$sample; then
                        makefiles="samples/$sample/Makefile.in $makefiles"
                    fi
                done
            elif test ${subdir} = "utils"; then
                makefiles=""
                for util in ifacecheck ; do
                    if test -d $srcdir/utils/$util ; then
                        makefiles="utils/$util/src/Makefile.in \
                                   $makefiles"
                    fi
                done
            else
                dnl assume that everything compiles for tests
                makefiles=`(cd $srcdir ; find $subdir -name Makefile.in)`
            fi
        fi

        for mkin in $makefiles ; do
            mk=`echo $mkin | sed 's/Makefile\.in/Makefile/g'`
            AC_CONFIG_FILES([$mk])
        done
    fi
done
fi dnl wxWITH_SUBDIRS

AC_OUTPUT

dnl Enable strict option checking by default because typos in --enable-xxx is
dnl a much more common case than wanting to explicitly pass an option unknown
dnl to the main configure script (this one) to a configure scripts in a
dnl subdirectory (e.g. src/tiff or src/expat). If someone really needs to do
dnl the latter, --disable-option-checking would need to be explicitly used.
dnl
dnl Notice that we need to do this at the very end of configure script as
dnl otherwise this would be overridden by AC_CONFIG_SUBDIRS() which disables
dnl option checking. And we need to use m4_divert_text() because we want this
dnl to appear in the beginning of the generated file, before the code parsing
dnl the options.
m4_divert_text([DEFAULTS],[enable_option_checking=fatal])

dnl report how we have been configured
echo
echo "Configured wxWidgets ${WX_VERSION} for \`${host}'"
echo ""
echo "  Which GUI toolkit should wxWidgets use?                 ${TOOLKIT_DESC}"
echo "  Should wxWidgets be compiled into single library?       ${wxUSE_MONOLITHIC:-yes}"
echo "  Should wxWidgets be linked as a shared library?         ${wxUSE_SHARED:-no}"
echo $ECHO_N "  Should wxWidgets support Unicode?                       ${wxUSE_UNICODE:-no}$ECHO_C"
if test "$wxUSE_UNICODE" = "yes"; then
    if test "$wxUSE_UNICODE_UTF8" = "yes"; then
        echo " (using UTF-8)"
    else
        echo " (using wchar_t)"
    fi
else
    echo
fi

echo "  What level of wxWidgets compatibility should be enabled?"
echo "                                       wxWidgets 2.8      ${WXWIN_COMPATIBILITY_2_8:-no}"
echo "                                       wxWidgets 3.0      ${WXWIN_COMPATIBILITY_3_0:-yes}"

echo "  Which libraries should wxWidgets use?"
echo "                                       STL                ${wxUSE_STL}"
echo "                                       jpeg               ${wxUSE_LIBJPEG-none}"
echo "                                       png                ${wxUSE_LIBPNG-none}"
echo "                                       regex              ${wxUSE_REGEX}"
echo "                                       tiff               ${wxUSE_LIBTIFF-none}"
if test "$wxUSE_X11" = 1 -o "$wxUSE_MOTIF" = 1; then
echo "                                       xpm                ${wxUSE_LIBXPM-none}"
fi
echo "                                       lzma               ${wxUSE_LIBLZMA}"
echo "                                       zlib               ${wxUSE_ZLIB}"
echo "                                       expat              ${wxUSE_EXPAT}"
echo "                                       libmspack          ${wxUSE_LIBMSPACK}"
echo "                                       sdl                ${wxUSE_LIBSDL}"

echo ""

dnl vi: set et sts=4 sw=4 com=\:dnl:
