// File to suppress cppcheck warnings for files that will not be fixed.
// Does not suppress warnings where an additional occurrence of the warning may be of interest.

// Coding style is to use assignments in constructor when there are many
// members to initialize or the initialization is complex or has comments.
useInitializationList

// These may be interesting but its not clear without examining each instance closely
// Would have to ensure that any_of/all_of has same early/late exits as current code and
// produces same result on empty collections
useStlAlgorithm

// Written with variable for consistency
knownArgument:scintilla/src/SparseVector.h

// The two sections are for different purposes: C1 control set and UTF-8 invalid bytes
duplicateCondition:scintilla/src/Editor.cxx

// Some non-explicit constructors are used for conversions or are private to lexers
noExplicitConstructor

// MarginView access to all bits is safe and is better defined in later versions of C++
shiftTooManyBitsSigned:scintilla/src/MarginView.cxx

// The styler parameter is not const as LexAccessor::operator[] is not const
constParameter:scintilla/lexlib/StyleContext.cxx

// ScintillaDocument is providing an API and there are no consumers of the API inside Scintilla
unusedFunction:scintilla/qt/ScintillaEdit/ScintillaDocument.cpp

// moc_ files show #error as they are not built with standard context
preprocessorErrorDirective:scintilla/qt/*.cpp

// moc_ files are not understood by cppcheck
noValidConfiguration

// The performance cost of by-value passing is often small and using a reference decreases
// code legibility.
passedByValue

// Suppress everything in catch.hpp as won't be changing
*:scintilla/test/unit/catch.hpp
// For now, suppress all test source files as, since Catch 2, cppcheck shows many warnings showing
// it doesn't understand the REQUIRE macro
*:scintilla/test/unit/*.cxx
