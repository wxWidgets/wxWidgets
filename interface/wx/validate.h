/////////////////////////////////////////////////////////////////////////////
// Name:        validate.h
// Purpose:     interface of wxValidator
// Author:      wxWidgets team
// Licence:     wxWindows licence
/////////////////////////////////////////////////////////////////////////////

/**
    @class wxValidationStatusEvent
    A validation status event holds information about events generated by
    wxValidator objects on validating the associated windows.
    @beginEventTable{wxValidationStatusEvent}
    @event{EVT_VALIDATE_OK(id, func)}
        Process @c wxEVT_VALIDATE_OK event, generated if validation succeeded
        after a previous failure.
    @event{EVT_VALIDATE_ERROR(id, func)}
        Process @c wxEVT_VALIDATE_ERROR event, generated if validation failed.
    @endEventTable
    @since 3.1.4
    @library{wxcore}
    @category{events}
*/
class wxValidationStatusEvent : public wxCommandEvent
{
public:
    /**
        Constructor.
    */
    wxValidationStatusEvent(wxEventType type, wxWindow *win);

    /**
        Set the error message.
    */
    void SetErrorMessage(const wxString& errormsg);

    /**
        Return the error message set by SetErrorMessage().
    */
    wxString GetErrorMessage() const;

    /**
        The library calls this function to set a hint to the event handler
        that it's not good to display the error message (for interactive
        validation and validation on focus lost) in a distracting/annoying
        way (e.g. message or dialog box).

        @see CanPopup()
    */
    void SetCanPopup(bool canPopup);

    /**
        For interactive validation or validation on focus lost, it's a good idea
        to signal the error state in a less intrusive manner (e.g. change the bg
        colour) as displaying the error message in a dialog box (for ex.) would
        be irritating at best. Therefore, it's advisable to check this function
        before trying to display any (error) message box on your handlers.
    */
    bool CanPopup() const;

    /**
        Return the window associated with the validator generating the event.
    */
    wxWindow *GetWindow() const;
};

/**
    @class wxValidator

    wxValidator is the base class for a family of validator classes that
    mediate between a class of control, and application data.

    A validator has three major roles:

    -#  To transfer data from a C++ variable or own storage to and from a
        control.
    -#  To validate data in a control, and show an appropriate error message.
    -#  To filter events (such as keystrokes), thereby changing the behaviour
        of the associated control.

    Validators can be plugged into controls dynamically.

    To specify a default, "null" validator, use ::wxDefaultValidator.

    For more information, please see @ref overview_validator.

    @library{wxcore}
    @category{validator}

    @stdobjects
    ::wxDefaultValidator

    @see @ref overview_validator, wxTextValidator, wxGenericValidator,
        wxIntegerValidator, wxFloatingPointValidator
*/
class wxValidator : public wxEvtHandler
{
public:
    /**
        Constructor.
    */
    wxValidator();

    /**
        Destructor.
    */
    virtual ~wxValidator();

    /**
        All validator classes must implement the Clone() function, which
        returns an identical copy of itself.

        This is because validators are passed to control constructors as
        references which must be copied. Unlike objects such as pens and
        brushes, it does not make sense to have a reference counting scheme to
        do this cloning because all validators should have separate data.

        @return This base function returns @NULL.
    */
    virtual wxObject* Clone() const;

    /**
        Returns the window associated with the validator.
    */
    wxWindow* GetWindow() const;

    /**
        This functions switches on or turns off the error sound produced by the
        validators if an invalid key is pressed.

        @since 2.9.1

        @param suppress
            If @true, error sound is not played when a validator detects an
            error. If @false, error sound is enabled.
    */
    static void SuppressBellOnError(bool suppress = true);

    /**
       Returns true if the error sound is currently disabled.
    */
    static bool IsSilent();

    /**
        Returns true if the validation is interactive.

        (Almost) for internal use only.

        @since 3.1.4
    */
    static bool IsInteractive();

    /**
        Call this function if you want an interactive validation. i.e.:
        as soon as you typed in a new char the validation will be triggered.

        @since 3.1.4
    */
    static void ValidateInteractively();

    /**
        Call this function if you want the validation be done on focus lost.

        @since 3.1.4
    */
    static void ValidateOnFocusLost();

    /**
        Returns true if the validation should be done on focus lost.

        (Almost) for internal use only.

        @since 3.1.4
    */
    static bool ShouldValidateOnFocusLost();

    /**
        The default validation method is to validate on demand. i.e.:
        when the (Ok) button is pressed to validate the dialog.

        @since 3.1.4
    */
    static void ResetValidationMethod();

    /**
        Associates a window with the validator.

        This function is automatically called by wxWidgets when creating a
        wxWindow-derived class instance which takes a wxValidator reference.
        Since wxWidgets 3.1.1, it can be overridden in custom validators in
        order to perform any one-time initialization or checks of the window
        when the validator is associated with it.

        E.g.
        @code
        new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0,
                       wxTextValidator(wxFILTER_ALPHA, &g_data.m_string));
        @endcode
        will automatically link the wxTextValidator instance with the wxTextCtrl
        instance and call SetWindow() method on the wxTextValidator object.
    */
    virtual void SetWindow(wxWindow* window);

    /**
        This overridable function is called when the value in the window must
        be transferred to the validator.

        @return @false if there is a problem.
    */
    virtual bool TransferFromWindow();

    /**
        This overridable function is called when the value associated with the
        validator must be transferred to the window.

        @return @false if there is a problem.
    */
    virtual bool TransferToWindow();

    /**
        This overridable function is called when the value in the associated
        window must be validated.

        @param parent
            The parent of the window associated with the validator.

        @return @false if the value in the window is not valid; you may pop up
                an error dialog. Or better yet, use SendErrorEvent() instead
                with the error message and let the event be handled elsewhere.
                Notice that calling SendOkEvent() is possible but not required though.
    */
    virtual bool Validate(wxWindow* parent);

    /**
        Generate @c wxEVT_VALIDATE_OK event.

        @since 3.1.4
    */
    void SendOkEvent();

    /**
        Generate @c wxEVT_VALIDATE_ERROR event.

        Use this function instead of trying to display the error message
        directly from Validate().

        @since 3.1.4
    */
    void SendErrorEvent(const wxString& errormsg);

};

/**
    An empty, "null" wxValidator instance.
*/
const wxValidator wxDefaultValidator;

